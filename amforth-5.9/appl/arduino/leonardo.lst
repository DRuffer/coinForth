
AVRASM ver. 2.1.52  leonardo.asm Fri Jul 10 18:43:15 2015

leonardo.asm(5): Including file '../../avr8\preamble.inc'
../../avr8\preamble.inc(2): Including file '../../avr8\macros.asm'
../../avr8\macros.asm(6): Including file '../../avr8\user.inc'
../../avr8\preamble.inc(6): Including file '../../avr8/devices/atmega32u4\device.asm'
../../avr8/devices/atmega32u4\device.asm(5): Including file '../../avr8/Atmel/Appnotes2\m32U4def.inc'
leonardo.asm(13): Including file '../../avr8\drivers/usart_1.asm'
../../avr8\drivers/usart_1.asm(31): Including file '../../avr8\drivers/usart_common.asm'
../../avr8\drivers/usart_common.asm(5): Including file '../../avr8\drivers/usart-isr-rx.asm'
../../avr8\drivers/usart_common.asm(17): Including file '../../avr8\words/usart-tx-poll.asm'
../../avr8\drivers/usart_common.asm(22): Including file '../../avr8\words/ubrr.asm'
../../avr8\drivers/usart_common.asm(23): Including file '../../avr8\words/usart.asm'
leonardo.asm(15): Including file '../../avr8\amforth.asm'
../../avr8\amforth.asm(12): Including file '../../avr8\drivers/generic-isr.asm'
../../avr8\amforth.asm(14): Including file '../../avr8\dict/rww.inc'
../../avr8\dict/rww.inc(1): Including file '../../avr8\words/mplus.asm'
../../avr8\dict/rww.inc(2): Including file '../../common\words/ud-star.asm'
../../avr8\dict/rww.inc(3): Including file '../../common\words/umax.asm'
../../avr8\dict/rww.inc(4): Including file '../../common\words/umin.asm'
../../avr8\dict/rww.inc(5): Including file '../../avr8\words/immediate-q.asm'
../../avr8\dict/rww.inc(6): Including file '../../avr8\words/name2flags.asm'
../../avr8\dict/rww.inc(7): Including file '../../common\words/name2interpret.asm'
../../avr8\dict/rww.inc(8): Including file '../../common\words/name2compile.asm'
../../avr8\dict/rww.inc(13): Including file '../../avr8\dict/appl_4k.inc'
../../avr8\dict/appl_4k.inc(1): Including file '../../common\words/ver.asm'
../../avr8\dict/appl_4k.inc(4): Including file '../../avr8\words/noop.asm'
../../avr8\dict/appl_4k.inc(5): Including file '../../avr8\words/unused.asm'
../../avr8\dict/appl_4k.inc(6): Including file '../../common\words/to.asm'
../../avr8\dict/appl_4k.inc(7): Including file '../../avr8\words/i-cellplus.asm'
../../avr8\dict/appl_4k.inc(8): Including file '../../avr8\words/icompare.asm'
../../avr8\dict/appl_4k.inc(9): Including file '../../common\words/star.asm'
../../avr8\dict/appl_4k.inc(10): Including file '../../avr8\words/j.asm'
../../avr8\dict/appl_4k.inc(11): Including file '../../avr8\words/dabs.asm'
../../avr8\dict/appl_4k.inc(12): Including file '../../avr8\words/dnegate.asm'
../../avr8\dict/appl_4k.inc(13): Including file '../../avr8\words/cmove.asm'
../../avr8\dict/appl_4k.inc(14): Including file '../../common\words/2swap.asm'
../../avr8\dict/appl_4k.inc(15): Including file '../../avr8\words/tib.asm'
../../avr8\dict/appl_4k.inc(16): Including file '../../avr8\words/init-user.asm'
../../avr8\dict/appl_4k.inc(20): Including file '../../avr8\words/environment.asm'
../../avr8\dict/appl_4k.inc(21): Including file '../../avr8\words/env-wordlists.asm'
../../avr8\dict/appl_4k.inc(22): Including file '../../avr8\words/env-slashpad.asm'
../../avr8\dict/appl_4k.inc(23): Including file '../../avr8\words/env-slashhold.asm'
../../avr8\dict/appl_4k.inc(24): Including file '../../common\words/env-forthname.asm'
../../avr8\dict/appl_4k.inc(25): Including file '../../common\words/env-forthversion.asm'
../../avr8\dict/appl_4k.inc(26): Including file '../../common\words/env-cpu.asm'
../../avr8\dict/appl_4k.inc(27): Including file '../../avr8\words/env-mcuinfo.asm'
../../avr8\dict/appl_4k.inc(28): Including file '../../avr8\words/env-usersize.asm'
../../avr8\dict/appl_4k.inc(30): Including file '../../avr8\words/hld.asm'
../../avr8\dict/appl_4k.inc(31): Including file '../../common\words/hold.asm'
../../avr8\dict/appl_4k.inc(32): Including file '../../common\words/less-sharp.asm'
../../avr8\dict/appl_4k.inc(33): Including file '../../common\words/sharp.asm'
../../avr8\dict/appl_4k.inc(34): Including file '../../common\words/sharp-s.asm'
../../avr8\dict/appl_4k.inc(35): Including file '../../common\words/sharp-greater.asm'
../../avr8\dict/appl_4k.inc(36): Including file '../../common\words/sign.asm'
../../avr8\dict/appl_4k.inc(37): Including file '../../common\words/d-dot-r.asm'
../../avr8\dict/appl_4k.inc(38): Including file '../../common\words/dot-r.asm'
../../avr8\dict/appl_4k.inc(39): Including file '../../common\words/d-dot.asm'
../../avr8\dict/appl_4k.inc(40): Including file '../../common\words/dot.asm'
../../avr8\dict/appl_4k.inc(41): Including file '../../common\words/ud-dot.asm'
../../avr8\dict/appl_4k.inc(42): Including file '../../common\words/ud-dot-r.asm'
../../avr8\dict/appl_4k.inc(43): Including file '../../common\words/ud-slash-mod.asm'
../../avr8\dict/appl_4k.inc(44): Including file '../../common\words/digit-q.asm'
../../avr8\dict/appl_4k.inc(46): Including file '../../avr8\words/do-sliteral.asm'
../../avr8\dict/appl_4k.inc(47): Including file '../../avr8\words/scomma.asm'
../../avr8\dict/appl_4k.inc(48): Including file '../../avr8\words/itype.asm'
../../avr8\dict/appl_4k.inc(49): Including file '../../avr8\words/icount.asm'
../../avr8\dict/appl_4k.inc(50): Including file '../../common\words/type.asm'
../../avr8\dict/appl_4k.inc(51): Including file '../../common\words/tick.asm'
../../avr8\dict/appl_4k.inc(53): Including file '../../common\words/cskip.asm'
../../avr8\dict/appl_4k.inc(54): Including file '../../common\words/cscan.asm'
../../avr8\dict/appl_4k.inc(55): Including file '../../common\words/accept.asm'
../../avr8\dict/appl_4k.inc(56): Including file '../../avr8\words/refill.asm'
../../avr8\dict/appl_4k.inc(57): Including file '../../common\words/char.asm'
../../avr8\dict/appl_4k.inc(58): Including file '../../common\words/number.asm'
../../avr8\dict/appl_4k.inc(59): Including file '../../common\words/q-sign.asm'
../../avr8\dict/appl_4k.inc(60): Including file '../../common\words/set-base.asm'
../../avr8\dict/appl_4k.inc(61): Including file '../../common\words/to-number.asm'
../../avr8\dict/appl_4k.inc(62): Including file '../../common\words/parse.asm'
../../avr8\dict/appl_4k.inc(63): Including file '../../avr8\words/source.asm'
../../avr8\dict/appl_4k.inc(64): Including file '../../common\words/slash-string.asm'
../../avr8\dict/appl_4k.inc(65): Including file '../../common\words/parse-name.asm'
../../avr8\dict/appl_4k.inc(66): Including file '../../avr8\words/sp0.asm'
../../avr8\dict/appl_4k.inc(67): Including file '../../avr8\words/rp0.asm'
../../avr8\dict/appl_4k.inc(68): Including file '../../common\words/depth.asm'
../../avr8\dict/appl_4k.inc(69): Including file '../../common\words/do-recognizer.asm'
../../avr8\dict/appl_4k.inc(70): Including file '../../common\words/interpret.asm'
../../avr8\dict/appl_4k.inc(71): Including file '../../common\words/r-intnumber.asm'
../../avr8\dict/appl_4k.inc(72): Including file '../../common\words/r-word.asm'
../../avr8\dict/appl_4k.inc(73): Including file '../../common\words/r-fail.asm'
../../avr8\dict/appl_4k.inc(74): Including file '../../common\words/search-wordlist.asm'
../../avr8\dict/appl_4k.inc(75): Including file '../../common\words/traverse-wordlist.asm'
../../avr8\dict/appl_4k.inc(76): Including file '../../common\words/name2string.asm'
../../avr8\dict/appl_4k.inc(77): Including file '../../avr8\words/nfa2cfa.asm'
../../avr8\dict/appl_4k.inc(78): Including file '../../common\words/find-name.asm'
../../avr8\dict/appl_4k.inc(80): Including file '../../avr8\dict/compiler1.inc'
../../avr8\dict/compiler1.inc(2): Including file '../../avr8\words/docreate.asm'
../../avr8\dict/compiler1.inc(3): Including file '../../common\words/backslash.asm'
../../avr8\dict/compiler1.inc(4): Including file '../../common\words/l-paren.asm'
../../avr8\dict/compiler1.inc(6): Including file '../../common\words/compile.asm'
../../avr8\dict/compiler1.inc(7): Including file '../../avr8\words/comma.asm'
../../avr8\dict/compiler1.inc(8): Including file '../../common\words/brackettick.asm'
../../avr8\dict/compiler1.inc(11): Including file '../../common\words/literal.asm'
../../avr8\dict/compiler1.inc(12): Including file '../../common\words/sliteral.asm'
../../avr8\dict/compiler1.inc(13): Including file '../../avr8\words/g-mark.asm'
../../avr8\dict/compiler1.inc(14): Including file '../../avr8\words/g-resolve.asm'
../../avr8\dict/compiler1.inc(15): Including file '../../avr8\words/l_mark.asm'
../../avr8\dict/compiler1.inc(16): Including file '../../avr8\words/l_resolve.asm'
../../avr8\dict/compiler1.inc(18): Including file '../../common\words/ahead.asm'
../../avr8\dict/compiler1.inc(19): Including file '../../common\words/if.asm'
../../avr8\dict/compiler1.inc(20): Including file '../../common\words/else.asm'
../../avr8\dict/compiler1.inc(21): Including file '../../common\words/then.asm'
../../avr8\dict/compiler1.inc(22): Including file '../../common\words/begin.asm'
../../avr8\dict/compiler1.inc(23): Including file '../../common\words/while.asm'
../../avr8\dict/compiler1.inc(24): Including file '../../common\words/repeat.asm'
../../avr8\dict/compiler1.inc(25): Including file '../../common\words/until.asm'
../../avr8\dict/compiler1.inc(26): Including file '../../common\words/again.asm'
../../avr8\dict/compiler1.inc(27): Including file '../../common\words/do.asm'
../../avr8\dict/compiler1.inc(28): Including file '../../common\words/loop.asm'
../../avr8\dict/compiler1.inc(29): Including file '../../common\words/plusloop.asm'
../../avr8\dict/compiler1.inc(30): Including file '../../common\words/leave.asm'
../../avr8\dict/compiler1.inc(31): Including file '../../common\words/qdo.asm'
../../avr8\dict/compiler1.inc(32): Including file '../../common\words/endloop.asm'
../../avr8\dict/compiler1.inc(34): Including file '../../common\words/l-from.asm'
../../avr8\dict/compiler1.inc(35): Including file '../../common\words/to-l.asm'
../../avr8\dict/compiler1.inc(36): Including file '../../avr8\words/lp0.asm'
../../avr8\dict/compiler1.inc(37): Including file '../../avr8\words/lp.asm'
../../avr8\dict/compiler1.inc(39): Including file '../../avr8\words/create.asm'
../../avr8\dict/compiler1.inc(40): Including file '../../avr8\words/header.asm'
../../avr8\dict/compiler1.inc(41): Including file '../../avr8\words/wlscope.asm'
../../avr8\dict/compiler1.inc(42): Including file '../../avr8\words/reveal.asm'
../../avr8\dict/compiler1.inc(43): Including file '../../avr8\words/latest.asm'
../../avr8\dict/compiler1.inc(44): Including file '../../avr8\words/does.asm'
../../avr8\dict/compiler1.inc(45): Including file '../../common\words/colon.asm'
../../avr8\dict/compiler1.inc(46): Including file '../../avr8\words/colon-noname.asm'
../../avr8\dict/compiler1.inc(47): Including file '../../common\words/semicolon.asm'
../../avr8\dict/compiler1.inc(48): Including file '../../common\words/right-bracket.asm'
../../avr8\dict/compiler1.inc(49): Including file '../../common\words/left-bracket.asm'
../../avr8\dict/compiler1.inc(50): Including file '../../common\words/variable.asm'
../../avr8\dict/compiler1.inc(51): Including file '../../common\words/constant.asm'
../../avr8\dict/compiler1.inc(52): Including file '../../avr8\words/user.asm'
../../avr8\dict/compiler1.inc(54): Including file '../../avr8\words/recurse.asm'
../../avr8\dict/compiler1.inc(55): Including file '../../avr8\words/immediate.asm'
../../avr8\dict/compiler1.inc(57): Including file '../../common\words/bracketchar.asm'
../../avr8\dict/compiler1.inc(58): Including file '../../common\words/abort-string.asm'
../../avr8\dict/compiler1.inc(59): Including file '../../common\words/abort.asm'
../../avr8\dict/compiler1.inc(60): Including file '../../common\words/q-abort.asm'
../../avr8\dict/compiler1.inc(62): Including file '../../common\words/get-stack.asm'
../../avr8\dict/compiler1.inc(63): Including file '../../common\words/set-stack.asm'
../../avr8\dict/compiler1.inc(64): Including file '../../common\words/map-stack.asm'
../../avr8\dict/compiler1.inc(65): Including file '../../avr8\words/get-current.asm'
../../avr8\dict/compiler1.inc(66): Including file '../../common\words/get-order.asm'
../../avr8\dict/compiler1.inc(68): Including file '../../avr8\words/compare.asm'
../../avr8\dict/compiler1.inc(69): Including file '../../avr8\words/nfa2lfa.asm'
../../avr8\amforth.asm(15): Including file 'dict_appl.inc'
dict_appl.inc(4): Including file '../../avr8\dict/compiler2.inc'
../../avr8\dict/compiler2.inc(8): Including file '../../avr8\words/set-current.asm'
../../avr8\dict/compiler2.inc(9): Including file '../../avr8\words/wordlist.asm'
../../avr8\dict/compiler2.inc(11): Including file '../../avr8\words/only.asm'
../../avr8\dict/compiler2.inc(12): Including file '../../avr8\words/forth-wordlist.asm'
../../avr8\dict/compiler2.inc(13): Including file '../../common\words/set-order.asm'
../../avr8\dict/compiler2.inc(14): Including file '../../common\words/set-recognizer.asm'
../../avr8\dict/compiler2.inc(15): Including file '../../common\words/get-recognizer.asm'
../../avr8\dict/compiler2.inc(16): Including file '../../avr8\words/code.asm'
../../avr8\dict/compiler2.inc(17): Including file '../../avr8\words/end-code.asm'
../../avr8\dict/compiler2.inc(18): Including file '../../avr8\words/marker.asm'
../../avr8\dict/compiler2.inc(19): Including file '../../common\words/postpone.asm'
dict_appl.inc(6): Including file 'words/applturnkey.asm'
../../avr8\amforth.asm(23): Including file '../../avr8\amforth-interpreter.asm'
../../avr8\amforth.asm(24): Including file '../../avr8\dict/nrww.inc'
../../avr8\dict/nrww.inc(4): Including file '../../avr8\words/exit.asm'
../../avr8\dict/nrww.inc(5): Including file '../../avr8\words/execute.asm'
../../avr8\dict/nrww.inc(6): Including file '../../avr8\words/dobranch.asm'
../../avr8\dict/nrww.inc(7): Including file '../../avr8\words/docondbranch.asm'
../../avr8\dict/nrww.inc(10): Including file '../../avr8\words/doliteral.asm'
../../avr8\dict/nrww.inc(11): Including file '../../avr8\words/dovariable.asm'
../../avr8\dict/nrww.inc(12): Including file '../../avr8\words/doconstant.asm'
../../avr8\dict/nrww.inc(13): Including file '../../avr8\words/douser.asm'
../../avr8\dict/nrww.inc(14): Including file '../../avr8\words/do-value.asm'
../../avr8\dict/nrww.inc(15): Including file '../../avr8\words/fetch.asm'
../../avr8\dict/nrww.inc(16): Including file '../../avr8\words/store.asm'
../../avr8\dict/nrww.inc(17): Including file '../../avr8\words/cstore.asm'
../../avr8\dict/nrww.inc(18): Including file '../../avr8\words/cfetch.asm'
../../avr8\dict/nrww.inc(19): Including file '../../avr8\words/fetch-u.asm'
../../avr8\dict/nrww.inc(20): Including file '../../avr8\words/store-u.asm'
../../avr8\dict/nrww.inc(23): Including file '../../avr8\words/dup.asm'
../../avr8\dict/nrww.inc(24): Including file '../../avr8\words/qdup.asm'
../../avr8\dict/nrww.inc(25): Including file '../../avr8\words/swap.asm'
../../avr8\dict/nrww.inc(26): Including file '../../avr8\words/over.asm'
../../avr8\dict/nrww.inc(27): Including file '../../avr8\words/drop.asm'
../../avr8\dict/nrww.inc(28): Including file '../../avr8\words/rot.asm'
../../avr8\dict/nrww.inc(29): Including file '../../avr8\words/nip.asm'
../../avr8\dict/nrww.inc(31): Including file '../../avr8\words/r_from.asm'
../../avr8\dict/nrww.inc(32): Including file '../../avr8\words/to_r.asm'
../../avr8\dict/nrww.inc(33): Including file '../../avr8\words/r_fetch.asm'
../../avr8\dict/nrww.inc(36): Including file '../../common\words/not-equal.asm'
../../avr8\dict/nrww.inc(37): Including file '../../avr8\words/equalzero.asm'
../../avr8\dict/nrww.inc(38): Including file '../../avr8\words/lesszero.asm'
../../avr8\dict/nrww.inc(39): Including file '../../avr8\words/greaterzero.asm'
../../avr8\dict/nrww.inc(40): Including file '../../avr8\words/d-greaterzero.asm'
../../avr8\dict/nrww.inc(41): Including file '../../avr8\words/d-lesszero.asm'
../../avr8\dict/nrww.inc(43): Including file '../../avr8\words/true.asm'
../../avr8\dict/nrww.inc(44): Including file '../../avr8\words/zero.asm'
../../avr8\dict/nrww.inc(45): Including file '../../avr8\words/uless.asm'
../../avr8\dict/nrww.inc(46): Including file '../../common\words/u-greater.asm'
../../avr8\dict/nrww.inc(47): Including file '../../avr8\words/less.asm'
../../avr8\dict/nrww.inc(48): Including file '../../avr8\words/greater.asm'
../../avr8\dict/nrww.inc(50): Including file '../../avr8\words/log2.asm'
../../avr8\dict/nrww.inc(51): Including file '../../avr8\words/minus.asm'
../../avr8\dict/nrww.inc(52): Including file '../../avr8\words/plus.asm'
../../avr8\dict/nrww.inc(53): Including file '../../avr8\words/mstar.asm'
../../avr8\dict/nrww.inc(54): Including file '../../avr8\words/umslashmod.asm'
../../avr8\dict/nrww.inc(55): Including file '../../avr8\words/umstar.asm'
../../avr8\dict/nrww.inc(57): Including file '../../avr8\words/invert.asm'
../../avr8\dict/nrww.inc(58): Including file '../../avr8\words/2slash.asm'
../../avr8\dict/nrww.inc(59): Including file '../../avr8\words/2star.asm'
../../avr8\dict/nrww.inc(60): Including file '../../avr8\words/and.asm'
../../avr8\dict/nrww.inc(61): Including file '../../avr8\words/or.asm'
../../avr8\dict/nrww.inc(62): Including file '../../avr8\words/xor.asm'
../../avr8\dict/nrww.inc(64): Including file '../../avr8\words/1plus.asm'
../../avr8\dict/nrww.inc(65): Including file '../../avr8\words/1minus.asm'
../../avr8\dict/nrww.inc(66): Including file '../../avr8\words/lshift.asm'
../../avr8\dict/nrww.inc(67): Including file '../../avr8\words/rshift.asm'
../../avr8\dict/nrww.inc(68): Including file '../../avr8\words/plusstore.asm'
../../avr8\dict/nrww.inc(70): Including file '../../avr8\words/rpfetch.asm'
../../avr8\dict/nrww.inc(71): Including file '../../avr8\words/rpstore.asm'
../../avr8\dict/nrww.inc(72): Including file '../../avr8\words/spfetch.asm'
../../avr8\dict/nrww.inc(73): Including file '../../avr8\words/spstore.asm'
../../avr8\dict/nrww.inc(75): Including file '../../avr8\words/dodo.asm'
../../avr8\dict/nrww.inc(76): Including file '../../avr8\words/i.asm'
../../avr8\dict/nrww.inc(77): Including file '../../avr8\words/doplusloop.asm'
../../avr8\dict/nrww.inc(78): Including file '../../avr8\words/doloop.asm'
../../avr8\dict/nrww.inc(79): Including file '../../avr8\words/unloop.asm'
../../avr8\dict/nrww.inc(83): Including file '../../avr8\words/cmove_g.asm'
../../avr8\dict/nrww.inc(84): Including file '../../avr8\words/byteswap.asm'
../../avr8\dict/nrww.inc(85): Including file '../../avr8\words/up.asm'
../../avr8\dict/nrww.inc(86): Including file '../../avr8\words/1ms.asm'
../../avr8\dict/nrww.inc(87): Including file '../../avr8\words/2to_r.asm'
../../avr8\dict/nrww.inc(88): Including file '../../avr8\words/2r_from.asm'
../../avr8\dict/nrww.inc(90): Including file '../../avr8\words/store-e.asm'
../../avr8\dict/nrww.inc(91): Including file '../../avr8\words/fetch-e.asm'
../../avr8\dict/nrww.inc(92): Including file '../../avr8\words/store-i.asm'
../../avr8\dict/nrww.inc(96): Including file '../../avr8\words/store-i_nrww.asm'
../../avr8\dict/nrww.inc(98): Including file '../../avr8\words/fetch-i.asm'
../../avr8\dict/nrww.inc(103): Including file '../../avr8\dict/core_4k.inc'
../../avr8\dict/core_4k.inc(3): Including file '../../avr8\words/n_to_r.asm'
../../avr8\dict/core_4k.inc(4): Including file '../../avr8\words/n_r_from.asm'
../../avr8\dict/core_4k.inc(5): Including file '../../avr8\words/d-2star.asm'
../../avr8\dict/core_4k.inc(6): Including file '../../avr8\words/d-2slash.asm'
../../avr8\dict/core_4k.inc(7): Including file '../../avr8\words/d-plus.asm'
../../avr8\dict/core_4k.inc(8): Including file '../../avr8\words/d-minus.asm'
../../avr8\dict/core_4k.inc(9): Including file '../../avr8\words/d-invert.asm'
../../avr8\dict/core_4k.inc(10): Including file '../../avr8\words/slashmod.asm'
../../avr8\dict/core_4k.inc(11): Including file '../../avr8\words/abs.asm'
../../avr8\dict/core_4k.inc(12): Including file '../../common\words/pick.asm'
../../avr8\dict/core_4k.inc(13): Including file '../../avr8\words/cellplus.asm'
../../avr8\dict/core_4k.inc(14): Including file '../../avr8\dict/interrupt.inc'
../../avr8\dict/interrupt.inc(2): Including file '../../avr8\words/int-on.asm'
../../avr8\dict/interrupt.inc(3): Including file '../../avr8\words/int-off.asm'
../../avr8\dict/interrupt.inc(4): Including file '../../avr8\words/int-store.asm'
../../avr8\dict/interrupt.inc(5): Including file '../../avr8\words/int-fetch.asm'
../../avr8\dict/interrupt.inc(6): Including file '../../avr8\words/int-trap.asm'
../../avr8\dict/interrupt.inc(8): Including file '../../avr8\words/isr-exec.asm'
../../avr8\dict/interrupt.inc(9): Including file '../../avr8\words/isr-end.asm'
../../avr8\dict/core_4k.inc(17): Including file '../../common\words/prompt-ok.asm'
../../avr8\dict/core_4k.inc(18): Including file '../../common\words/prompt-ready.asm'
../../avr8\dict/core_4k.inc(19): Including file '../../common\words/prompt-error.asm'
../../avr8\dict/core_4k.inc(21): Including file '../../common\words/quit.asm'
../../avr8\dict/core_4k.inc(22): Including file '../../avr8\words/pause.asm'
../../avr8\dict/core_4k.inc(23): Including file '../../avr8\words/cold.asm'
../../avr8\dict/core_4k.inc(24): Including file '../../avr8\words/warm.asm'
../../avr8\dict/core_4k.inc(26): Including file '../../common\words/handler.asm'
../../avr8\dict/core_4k.inc(27): Including file '../../common\words/catch.asm'
../../avr8\dict/core_4k.inc(28): Including file '../../common\words/throw.asm'
../../avr8\dict/core_4k.inc(31): Including file '../../avr8\words/edefer-fetch.asm'
../../avr8\dict/core_4k.inc(32): Including file '../../avr8\words/edefer-store.asm'
../../avr8\dict/core_4k.inc(33): Including file '../../common\words/rdefer-fetch.asm'
../../avr8\dict/core_4k.inc(34): Including file '../../common\words/rdefer-store.asm'
../../avr8\dict/core_4k.inc(35): Including file '../../common\words/udefer-fetch.asm'
../../avr8\dict/core_4k.inc(36): Including file '../../common\words/udefer-store.asm'
../../avr8\dict/core_4k.inc(37): Including file '../../common\words/defer-store.asm'
../../avr8\dict/core_4k.inc(38): Including file '../../common\words/defer-fetch.asm'
../../avr8\dict/core_4k.inc(39): Including file '../../avr8\words/do-defer.asm'
../../avr8\dict/core_4k.inc(41): Including file '../../avr8\words/d-equal.asm'
../../avr8\dict/core_4k.inc(42): Including file '../../common\words/u-dot.asm'
../../avr8\dict/core_4k.inc(43): Including file '../../common\words/u-dot-r.asm'
../../avr8\dict/core_4k.inc(46): Including file '../../avr8\words/uslashmod.asm'
../../avr8\dict/core_4k.inc(47): Including file '../../avr8\words/negate.asm'
../../avr8\dict/core_4k.inc(48): Including file '../../common\words/slash.asm'
../../avr8\dict/core_4k.inc(49): Including file '../../common\words/mod.asm'
../../avr8\dict/core_4k.inc(51): Including file '../../common\words/min.asm'
../../avr8\dict/core_4k.inc(52): Including file '../../common\words/max.asm'
../../avr8\dict/core_4k.inc(53): Including file '../../common\words/within.asm'
../../avr8\dict/core_4k.inc(55): Including file '../../common\words/show-wordlist.asm'
../../avr8\dict/core_4k.inc(56): Including file '../../avr8\words/words.asm'
../../avr8\dict/core_4k.inc(58): Including file '../../common\words/dot-quote.asm'
../../avr8\dict/core_4k.inc(59): Including file '../../common\words/squote.asm'
../../avr8\dict/core_4k.inc(60): Including file '../../avr8\words/fill.asm'
../../avr8\dict/core_4k.inc(62): Including file '../../common\words/f_cpu.asm'
../../avr8\dict/core_4k.inc(63): Including file '../../avr8\words/state.asm'
../../avr8\dict/core_4k.inc(64): Including file '../../common\words/base.asm'
../../avr8\dict/core_4k.inc(66): Including file '../../avr8\words/cells.asm'
../../avr8\dict/core_4k.inc(68): Including file '../../common\words/2dup.asm'
../../avr8\dict/core_4k.inc(69): Including file '../../common\words/2drop.asm'
../../avr8\dict/core_4k.inc(70): Including file '../../common\words/tuck.asm'
../../avr8\dict/core_4k.inc(72): Including file '../../common\words/to-in.asm'
../../avr8\dict/core_4k.inc(73): Including file '../../avr8\words/sharptib.asm'
../../avr8\dict/core_4k.inc(74): Including file '../../avr8\words/pad.asm'
../../avr8\dict/core_4k.inc(75): Including file '../../avr8\words/emit.asm'
../../avr8\dict/core_4k.inc(76): Including file '../../avr8\words/emitq.asm'
../../avr8\dict/core_4k.inc(77): Including file '../../avr8\words/key.asm'
../../avr8\dict/core_4k.inc(78): Including file '../../avr8\words/keyq.asm'
../../avr8\dict/core_4k.inc(80): Including file '../../avr8\words/dp.asm'
../../avr8\dict/core_4k.inc(81): Including file '../../avr8\words/ehere.asm'
../../avr8\dict/core_4k.inc(82): Including file '../../avr8\words/here.asm'
../../avr8\dict/core_4k.inc(83): Including file '../../avr8\words/allot.asm'
../../avr8\dict/core_4k.inc(85): Including file '../../common\words/bin.asm'
../../avr8\dict/core_4k.inc(86): Including file '../../common\words/decimal.asm'
../../avr8\dict/core_4k.inc(87): Including file '../../common\words/hex.asm'
../../avr8\dict/core_4k.inc(88): Including file '../../common\words/bl.asm'
../../avr8\dict/core_4k.inc(90): Including file '../../avr8\words/turnkey.asm'
../../avr8\dict/core_4k.inc(91): Including file '../../common\words/to-upper.asm'
../../avr8\dict/core_4k.inc(92): Including file '../../common\words/to-lower.asm'
../../avr8\dict/core_4k.inc(94): Including file '../../common\words/q-stack.asm'
../../avr8\dict/core_4k.inc(95): Including file '../../common\words/bounds.asm'
../../avr8\dict/core_4k.inc(96): Including file '../../common\words/cr.asm'
../../avr8\dict/core_4k.inc(97): Including file '../../common\words/space.asm'
../../avr8\dict/core_4k.inc(98): Including file '../../common\words/spaces.asm'
../../avr8\dict/core_4k.inc(99): Including file '../../common\words/s-to-d.asm'
../../avr8\dict/core_4k.inc(100): Including file '../../avr8\words/to-body.asm'
../../avr8\dict/nrww.inc(111): Including file '../../avr8\words/2literal.asm'
../../avr8\dict/nrww.inc(112): Including file '../../avr8\words/equal.asm'
../../avr8\dict/nrww.inc(113): Including file '../../common\words/num-constants.asm'
../../avr8\amforth.asm(25): Including file 'dict_appl_core.inc'
../../avr8\amforth.asm(36): Including file '../../avr8\amforth-eeprom.inc'
                 
                 
                 ; file see ../template/template.asm. You may want to
                 ; copy that file to this one and edit it afterwards.
                 
                 .include "preamble.inc"
                 
                 .include "macros.asm"
                 
                 .set DICT_COMPILER2 = 0 ;
                 .set cpu_msp430 = 0
                 .set cpu_avr8   = 1
                 
                 .include "user.inc"
                 
                 ; 
                 
                 ; used by the multitasker
                 .set USER_STATE    = 0
                 .set USER_FOLLOWER = 2
                 
                 ; stackpointer, used by mulitasker
                 .set USER_RP      = 4
                 .set USER_SP0     = 6
                 .set USER_SP      = 8
                 
                 ; excpection handling
                 .set USER_HANDLER = 10
                 
                 ; numeric IO
                 .set USER_BASE  = 12
                 
                 ; character IO 
                 .set USER_EMIT  = 14
                 .set USER_EMITQ = 16
                 .set USER_KEY   = 18
                 .set USER_KEYQ  = 20
                 
                 .set USER_SOURCE  = 22
                 .set USER_TO_IN   = 24
                 .set USER_REFILL  = 26
                 
                 .set SYSUSERSIZE = 28
                 ; 
                 
                   .def zerol = r2
                   .def zeroh = r3
                   .def upl = r4
                   .def uph = r5
                 
                   .def al  = r6
                   .def ah  = r7
                   .def bl  = r8
                   .def bh  = r9
                 
                 ; internal
                   .def mcu_boot      = r10
                   .def erase_counter = r11
                 
                   .def temp4 = r14
                   .def temp5 = r15
                 
                   .def temp0 = r16
                   .def temp1 = r17
                   .def temp2 = r18
                   .def temp3 = r19
                 
                   .def temp6 = r20
                   .def temp7 = r21
                 
                   .def tosl = r24
                   .def tosh = r25
                 
                   .def wl = r22
                   .def wh = r23
                 
                 .macro loadtos
                     ld tosl, Y+
                     ld tosh, Y+
                 .endmacro
                 
                 .macro savetos
                     st -Y, tosh
                     st -Y, tosl
                 .endmacro
                 
                 .macro in_
                 .if (@1 < $40)
                   in @0,@1
                 .else
                   lds @0,@1
                 .endif
                 .endmacro
                 
                 .macro out_
                 .if (@0 < $40)
                   out @0,@1
                 .else
                   sts @0,@1
                 .endif
                 .endmacro
                 
                 .macro sbi_
                 .if (@0 < $40)
                   sbi @0,@1
                 .else
                   in_ @2,@0
                   ori @2,exp2(@1)
                   out_ @0,@2
                 .endif
                 .endmacro
                 
                 .macro cbi_
                 .if (@0 < $40)
                   cbi @0,@1
                 .else
                   in_ @2,@0
                   andi @2,~(exp2(@1))
                   out_ @0,@2
                 .endif
                 .endmacro
                 
                 .macro jmp_
                 	; a more flexible macro
                     .ifdef @0
                     .if (@0-pc > 2040) || (pc-@0>2040)
                 	jmp @0
                 	.else
                 	rjmp @0
                 	.endif
                 	.else
                 	jmp @0
                 	.endif
                 .endmacro
                 .macro call_
                 	; a more flexible macro
                     .ifdef @0
                     .if (@0-pc > 2040) || (pc-@0>2040)
                 	call @0
                 	.else
                 	rcall @0
                 	.endif
                 	.else
                 	call @0
                 	.endif
                 .endmacro
                 
                 ;               F_CPU
                 ;    µsec   16000000   14745600    8000000  1000000
                 ;    1            16      14,74          8        1
                 ;    10          160     147,45         80       10
                 ;    100        1600    1474,56        800      100
                 ;    1000      16000   14745,6        8000     1000
                 ;
                 ; cycles = µsec * f_cpu / 1e6
                 ; n_loops=cycles/5
                 ;
                 ;     cycles already used will be subtracted from the delay
                 ;     the waittime resolution is 1 cycle (delay from exact to +1 cycle)
                 ;     the maximum delay at 20MHz (50ns/clock) is 38350ns
                 ;     waitcount register must specify an immediate register
                 ;
                 ; busy waits a specfied amount of microseconds
                 .macro   delay
                       .set cycles = ( ( @0 * F_CPU ) / 1000000 )
                       .if (cycles > ( 256 * 255 * 4 + 2))
                         .error "MACRO delay - too many cycles to burn"
                       .else
                         .if (cycles > 6)
                           .set  loop_cycles = (cycles / 4)      
                           ldi   zl,low(loop_cycles)
                           ldi   zh,high(loop_cycles)
                           sbiw  Z, 1
                           brne  pc-1
                           .set  cycles = (cycles - (loop_cycles * 4))
                         .endif
                         .if (cycles > 0)
                           .if   (cycles & 4)
                             rjmp  pc+1
                             rjmp  pc+1
                           .endif
                           .if   (cycles & 2)
                             rjmp  pc+1
                           .endif
                           .if   (cycles & 1)
                             nop
                           .endif
                         .endif
                       .endif
                 .endmacro
                 
                 ; portability macros, they come from the msp430 branches
                 
                 .macro DEST
                     .dw @0
                 .endm
                 
                 ; controller specific file selected via include
                 ; directory definition when calling the assembler (-I)
                 .include "device.asm"
                 
                 ; generated automatically, do not edit
                 
                 .list
                 
                 .equ ramstart =  256
                 .equ CELLSIZE = 2
                 .macro readflashcell
                 	lsl zl
                 	rol zh
                 	lpm @0, Z+
                 	lpm @1, Z+
                 .endmacro
                 .macro writeflashcell
                 	lsl zl
                 	rol zh
                 .endmacro
                 .set WANT_WATCHDOG = 0
                 .set WANT_PORTD = 0
                 .set WANT_SPI = 0
                 .set WANT_USART1 = 0
                 .set WANT_BOOT_LOAD = 0
                 .set WANT_EEPROM = 0
                 .set WANT_TIMER_COUNTER_0 = 0
                 .set WANT_TIMER_COUNTER_3 = 0
                 .set WANT_TIMER_COUNTER_1 = 0
                 .set WANT_JTAG = 0
                 .set WANT_EXTERNAL_INTERRUPT = 0
                 .set WANT_TIMER_COUNTER_4 = 0
                 .set WANT_PORTB = 0
                 .set WANT_PORTC = 0
                 .set WANT_PORTE = 0
                 .set WANT_PORTF = 0
                 .set WANT_AD_CONVERTER = 0
                 .set WANT_ANALOG_COMPARATOR = 0
                 .set WANT_CPU = 0
                 .set WANT_PLL = 0
                 .set WANT_USB_DEVICE = 0
                 .equ intvecsize = 2 ; please verify; flash size: 32768 bytes
                 .equ pclen = 2 ; please verify
                 .overlap
                 .org 2
000002 d0e9      	 rcall isr ; External Interrupt Request 0
                 .org 4
000004 d0e7      	 rcall isr ; External Interrupt Request 1
                 .org 6
000006 d0e5      	 rcall isr ; External Interrupt Request 2
                 .org 8
000008 d0e3      	 rcall isr ; External Interrupt Request 3
                 .org 10
00000a d0e1      	 rcall isr ; Reserved1
                 .org 12
00000c d0df      	 rcall isr ; Reserved2
                 .org 14
00000e d0dd      	 rcall isr ; External Interrupt Request 6
                 .org 16
000010 d0db      	 rcall isr ; Reserved3
                 .org 18
000012 d0d9      	 rcall isr ; Pin Change Interrupt Request 0
                 .org 20
000014 d0d7      	 rcall isr ; USB General Interrupt Request
                 .org 22
000016 d0d5      	 rcall isr ; USB Endpoint/Pipe Interrupt Communication Request
                 .org 24
000018 d0d3      	 rcall isr ; Watchdog Time-out Interrupt
                 .org 26
00001a d0d1      	 rcall isr ; Reserved4
                 .org 28
00001c d0cf      	 rcall isr ; Reserved5
                 .org 30
00001e d0cd      	 rcall isr ; Reserved6
                 .org 32
000020 d0cb      	 rcall isr ; Timer/Counter1 Capture Event
                 .org 34
000022 d0c9      	 rcall isr ; Timer/Counter1 Compare Match A
                 .org 36
000024 d0c7      	 rcall isr ; Timer/Counter1 Compare Match B
                 .org 38
000026 d0c5      	 rcall isr ; Timer/Counter1 Compare Match C
                 .org 40
000028 d0c3      	 rcall isr ; Timer/Counter1 Overflow
                 .org 42
00002a d0c1      	 rcall isr ; Timer/Counter0 Compare Match A
                 .org 44
00002c d0bf      	 rcall isr ; Timer/Counter0 Compare Match B
                 .org 46
00002e d0bd      	 rcall isr ; Timer/Counter0 Overflow
                 .org 48
000030 d0bb      	 rcall isr ; SPI Serial Transfer Complete
                 .org 50
000032 d0b9      	 rcall isr ; USART1, Rx Complete
                 .org 52
000034 d0b7      	 rcall isr ; USART1 Data register Empty
                 .org 54
000036 d0b5      	 rcall isr ; USART1, Tx Complete
                 .org 56
000038 d0b3      	 rcall isr ; Analog Comparator
                 .org 58
00003a d0b1      	 rcall isr ; ADC Conversion Complete
                 .org 60
00003c d0af      	 rcall isr ; EEPROM Ready
                 .org 62
00003e d0ad      	 rcall isr ; Timer/Counter3 Capture Event
                 .org 64
000040 d0ab      	 rcall isr ; Timer/Counter3 Compare Match A
                 .org 66
000042 d0a9      	 rcall isr ; Timer/Counter3 Compare Match B
                 .org 68
000044 d0a7      	 rcall isr ; Timer/Counter3 Compare Match C
                 .org 70
000046 d0a5      	 rcall isr ; Timer/Counter3 Overflow
                 .org 72
000048 d0a3      	 rcall isr ; 2-wire Serial Interface        
                 .org 74
00004a d0a1      	 rcall isr ; Store Program Memory Read
                 .org 76
00004c d09f      	 rcall isr ; Timer/Counter4 Compare Match A
                 .org 78
00004e d09d      	 rcall isr ; Timer/Counter4 Compare Match B
                 .org 80
000050 d09b      	 rcall isr ; Timer/Counter4 Compare Match D
                 .org 82
000052 d099      	 rcall isr ; Timer/Counter4 Overflow
                 .org 84
000054 d097      	 rcall isr ; Timer/Counter4 Fault Protection Interrupt
                 .equ INTVECTORS = 43
                 .nooverlap
                 
                 ; compatability layer (maybe empty)
                 
                 ; controller data area, environment query mcu-info
                 mcu_info:
                 mcu_ramsize:
000055 0a00      	.dw 2560
                 mcu_eepromsize:
000056 0400      	.dw 1024
                 mcu_maxdp:
000057 7000      	.dw 28672 
                 mcu_numints:
000058 002b      	.dw 43
                 mcu_name:
000059 000a      	.dw 10
00005a 5441
00005b 656d
00005c 6167
00005d 3233
00005e 3455      	.db "ATmega32U4"
                 .set codestart=pc
                 
                 ; some defaults, change them in your application master file
                 ; see template.asm for an example
                 
                 .set AMFORTH_RO_SEG = NRWW_START_ADDR
                 
                 ; receiving is asynchron, so an interrupt queue is useful.
                 .set WANT_ISR_RX = 1
                 
                 ; case insensitve dictionary lookup.
                 .set WANT_IGNORECASE = 0
                 
                 ; map all memories to one address space. Details in the
                 ; technical guide
                 .set WANT_UNIFIED = 0
                 
                 ; terminal input buffer
                 .set TIBSIZE  = 90    ; ANS94 needs at least 80 characters per line
                 
                 ; USER variables *in addition* to system ones
                 .set APPUSERSIZE = 10  ; size of application specific user area in bytes
                 
                 ; addresses of various data segments
                 .set rstackstart = RAMEND      ; start address of return stack, grows downward
                 .set stackstart  = RAMEND - 80 ; start address of data stack, grows downward
                 ; change only if you know what to you do
                 .set NUMWORDLISTS = 8 ; number of word lists in the searh order, at least 8
                 .set NUMRECOGNIZERS = 4 ; total number of recognizers, two are always used.
                 
                 ; 10 per mille (1 per cent) is ok.
                 .set BAUD = 38400
                 .set BAUD_MAXERROR = 10
                 
                 ; Dictionary setup
                 .set VE_HEAD = $0000
                 .set VE_ENVHEAD = $0000
                 
                 
                 ; letters the same. Set to 0 if you do not want it
                 .set WANT_IGNORECASE = 1
                 
                 ; cpu clock in hertz
                 .equ F_CPU = 16000000
                 
                 .include "drivers/usart_1.asm"
                 
                   .equ BAUDRATE_HIGH = UBRR1H
                   .equ USART_C = UCSR1C
                   .equ USART_B = UCSR1B
                   .equ USART_A = UCSR1A
                   .equ USART_DATA = UDR1
                 
                 .equ URXCaddr = URXC1addr
                 .equ UDREaddr = UDRE1addr
                 
                 .equ bm_USART_RXRD = 1 << RXC1
                 .equ bm_USART_TXRD = 1 << UDRE1
                 .equ bm_ENABLE_TX  = 1 << TXEN1
                 .equ bm_ENABLE_RX  = 1 << RXEN1
                 .equ bm_ENABLE_INT_RX = 1<<RXCIE1
                 .equ bm_ENABLE_INT_TX = 1<<UDRIE1
                 
                 .equ bm_USARTC_en   = 0
                 .equ bm_ASYNC       = 0 << 6
                 .equ bm_SYNC        = 1 << 6
                 .equ bm_NO_PARITY   = 0 << 4
                 .equ bm_EVEN_PARITY = 2 << 4
                 .equ bm_ODD_PARITY  = 3 << 4
                 .equ bm_1STOPBIT    = 0 << 3
                 .equ bm_2STOPBIT    = 1 << 3
                 .equ bm_5BIT        = 0 << 1
                 .equ bm_6BIT        = 1 << 1
                 .equ bm_7BIT        = 2 << 1
                 .equ bm_8BIT        = 3 << 1
                 
                 .include "drivers/usart_common.asm"
                 
                 .set USART_C_VALUE = bm_ASYNC | bm_NO_PARITY | bm_1STOPBIT | bm_8BIT
                 .if WANT_ISR_RX == 1
                   .set USART_B_VALUE = bm_ENABLE_TX | bm_ENABLE_RX | bm_ENABLE_INT_RX
                   .include "drivers/usart-isr-rx.asm"
                 
                 
                 ; sizes have to be powers of 2!
                 .equ usart_rx_size = $10
                 .equ usart_rx_mask = usart_rx_size - 1
                 .dseg
000100           usart_rx_data: .byte usart_rx_size+2
000112           usart_rx_in: .byte 2
000114           usart_rx_out: .byte 2
                 
                 .cseg
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 ; forth code:
                 ; : rx-isr USART_DATA c@
                 ;    usart_rx_data usart_rx_in c@ dup >r
                 ;    + !
                 ;    r> 1+ usart_rx_mask and usart_rx_in c!
                 ; ;
                 ; setup with
                 ; ' rx-isr URXCaddr int!
                 usart_rx_isr:
00005f 93af        push xl
000060 b7af        in xl, SREG
000061 93af        push xl
000062 93bf        push xh
000063 93ef        push zl
000064 93ff        push zh
                 
000065 91b0 00ce   lds xh, USART_DATA
                 usart_rx_store:
000067 91a0 0112   lds xl, usart_rx_in
000069 e0e0        ldi zl, low(usart_rx_data)
00006a e0f1        ldi zh, high(usart_rx_data)
00006b 0fea        add zl, xl
00006c 1df3        adc zh, zeroh
00006d 83b0        st Z, xh
                 
00006e 95a3        inc xl
00006f 70af        andi xl,usart_rx_mask
                 
000070 93a0 0112   sts usart_rx_in, xl
                 
                 usart_rx_isr_finish:
000072 91ff        pop zh
000073 91ef        pop zl
000074 91bf        pop xh
000075 91af        pop xl
000076 bfaf        out SREG, xl
000077 91af        pop xl
000078 9518        reti
                 
                 .set usartpc = pc
                 .org URXCaddr
000032 c02c        jmp_ usart_rx_isr
                 .org usartpc
                 
                 
                 ; ( -- ) Hardware Access
                 ; R( --)
                 ; initialize usart
                 ;VE_USART_INIT_RX:
                 ;  .dw $ff06
                 ;  .db "+usart"
                 ;  .dw VE_HEAD
                 ;  .set VE_HEAD = VE_USART_INIT_RX
                 XT_USART_INIT_RX_ISR:
000079 3800        .dw DO_COLON
                 PFA_USART_INIT_RX_ISR:          ; ( -- )
00007a 394e        .dw XT_ZERO
00007b 3837        .dw XT_DOLITERAL
00007c 0112        .dw usart_rx_in
00007d 3887        .dw XT_CSTORE
00007e 394e        .dw XT_ZERO
00007f 3837        .dw XT_DOLITERAL
000080 0114        .dw usart_rx_out
000081 3887        .dw XT_CSTORE
                 
000082 381a        .dw XT_EXIT
                 
                 ; ( -- c)
                 ; MCU
                 ; get 1 character from input queue, wait if needed using interrupt driver
                 VE_RX_ISR:
000083 ff06          .dw $ff06
000084 7872
000085 692d
000086 7273          .db "rx-isr"
000087 0000          .dw VE_HEAD
                     .set VE_HEAD = VE_RX_ISR
                 XT_RX_ISR:
000088 3800          .dw DO_COLON
                 PFA_RX_ISR:
000089 00a2        .dw XT_RXQ_ISR
00008a 3830        .dw XT_DOCONDBRANCH
00008b 0089        .dw PFA_RX_ISR
00008c 3837        .dw XT_DOLITERAL
00008d 0114        .dw usart_rx_out
00008e 3892        .dw XT_CFETCH
00008f 38ab        .dw XT_DUP
000090 3a29        .dw XT_1PLUS
000091 3837        .dw XT_DOLITERAL
000092 000f        .dw usart_rx_mask
000093 3a0d        .dw XT_AND
000094 3837        .dw XT_DOLITERAL
000095 0114        .dw usart_rx_out
000096 3887        .dw XT_CSTORE
000097 3837        .dw XT_DOLITERAL
000098 0100        .dw usart_rx_data
000099 3997        .dw XT_PLUS
00009a 3892        .dw XT_CFETCH
00009b 381a        .dw XT_EXIT
                 
                 ; ( -- f)  
                 ; MCU
                 ; check if unread characters are in the input queue using interrupt driver
                 VE_RXQ_ISR:
00009c ff07          .dw $ff07
00009d 7872
00009e 2d3f
00009f 7369
0000a0 0072          .db "rx?-isr",0
0000a1 0083          .dw VE_HEAD
                     .set VE_HEAD = VE_RXQ_ISR
                 XT_RXQ_ISR:
0000a2 3800          .dw DO_COLON
                 PFA_RXQ_ISR:
0000a3 3d11        .dw XT_PAUSE
0000a4 3837        .dw XT_DOLITERAL
0000a5 0114        .dw usart_rx_out
0000a6 3892        .dw XT_CFETCH
0000a7 3837        .dw XT_DOLITERAL
0000a8 0112        .dw usart_rx_in
0000a9 3892        .dw XT_CFETCH
0000aa 390d        .dw XT_NOTEQUAL
0000ab 381a        .dw XT_EXIT
                   .set XT_RX  = XT_RX_ISR
                   .set XT_RXQ = XT_RXQ_ISR
                   .set XT_USART_INIT_RX = XT_USART_INIT_RX_ISR
                 .else
                 .endif
                 
                 .include "words/usart-tx-poll.asm"
                 
                 ; MCU
                 ; check availability and send one character to the terminal using register poll
                 VE_TX_POLL:
0000ac ff07          .dw $ff07
0000ad 7874
0000ae 702d
0000af 6c6f
0000b0 006c          .db "tx-poll",0
0000b1 009c          .dw VE_HEAD
                     .set VE_HEAD = VE_TX_POLL
                 XT_TX_POLL:
0000b2 3800          .dw DO_COLON
                 PFA_TX_POLL:
                   ; wait for data ready
0000b3 00c0        .dw XT_TXQ_POLL
0000b4 3830        .dw XT_DOCONDBRANCH
0000b5 00b3        .dw PFA_TX_POLL
                   ; send to usart
0000b6 3837        .dw XT_DOLITERAL
0000b7 00ce        .dw USART_DATA
0000b8 3887        .dw XT_CSTORE
0000b9 381a        .dw XT_EXIT
                 
                 ; ( -- f) MCU
                 ; MCU
                 ; check if a character can be send using register poll
                 VE_TXQ_POLL:
0000ba ff08          .dw $ff08
0000bb 7874
0000bc 2d3f
0000bd 6f70
0000be 6c6c          .db "tx?-poll"
0000bf 00ac          .dw VE_HEAD
                     .set VE_HEAD = VE_TXQ_POLL
                 XT_TXQ_POLL:
0000c0 3800          .dw DO_COLON
                 PFA_TXQ_POLL:
0000c1 3d11        .dw XT_PAUSE
0000c2 3837        .dw XT_DOLITERAL
0000c3 00c8        .dw USART_A
0000c4 3892        .dw XT_CFETCH
0000c5 3837        .dw XT_DOLITERAL
0000c6 0020        .dw bm_USART_TXRD
0000c7 3a0d        .dw XT_AND
0000c8 381a        .dw XT_EXIT
                 .set XT_TX  = XT_TX_POLL
                 .set XT_TXQ = XT_TXQ_POLL
                 .set XT_USART_INIT_TX = 0
                 
                 .include "words/ubrr.asm"
                 
                 ; MCU
                 ; returns usart UBRR settings
                 VE_UBRR:
0000c9 ff04        .dw $ff04
0000ca 6275
0000cb 7272        .db "ubrr"
0000cc 00ba        .dw VE_HEAD
                   .set VE_HEAD = VE_UBRR
                 XT_UBRR:
0000cd 3869        .dw PFA_DOVALUE1
                 PFA_UBRR:          ; ( -- )
0000ce 00a8        .dw EE_UBRRVAL
0000cf 3d81        .dw XT_EDEFERFETCH
0000d0 3d8b        .dw XT_EDEFERSTORE
                 .include "words/usart.asm"
                 
                 ; MCU
                 ; initialize usart
                 VE_USART:
0000d1 ff06        .dw $ff06
0000d2 752b
0000d3 6173
0000d4 7472        .db "+usart"
0000d5 00c9        .dw VE_HEAD
                   .set VE_HEAD = VE_USART
                 XT_USART:
0000d6 3800        .dw DO_COLON
                 PFA_USART:          ; ( -- )
                 
0000d7 3837        .dw XT_DOLITERAL
0000d8 0098        .dw USART_B_VALUE
0000d9 3837        .dw XT_DOLITERAL
0000da 00c9        .dw USART_B
0000db 3887        .dw XT_CSTORE
                 
0000dc 3837        .dw XT_DOLITERAL
0000dd 0006        .dw USART_C_VALUE
0000de 3837        .dw XT_DOLITERAL
0000df 00ca        .dw USART_C | bm_USARTC_en
0000e0 3887        .dw XT_CSTORE
                 
0000e1 00cd        .dw XT_UBRR
0000e2 38ab        .dw XT_DUP
0000e3 3ae7        .dw XT_BYTESWAP
0000e4 3837        .dw XT_DOLITERAL
0000e5 00cd        .dw BAUDRATE_HIGH
0000e6 3887        .dw XT_CSTORE
0000e7 3837        .dw XT_DOLITERAL
0000e8 00cc        .dw BAUDRATE_LOW
0000e9 3887        .dw XT_CSTORE
                 .if XT_USART_INIT_RX!=0
0000ea 0079        .dw XT_USART_INIT_RX
                 .endif
                 .if XT_USART_INIT_TX!=0
                 .endif
                 
0000eb 381a        .dw XT_EXIT
                 
                 .include "amforth.asm"
                 
                 ;;;;
                 ;;;; GPL V2 (only)
                 
                 .set AMFORTH_NRWW_SIZE=(FLASHEND-AMFORTH_RO_SEG)*2
                 
                 .set corepc = pc
                 .org $0000
000000 940c 3d1a   jmp_ PFA_COLD
                 
                 .org corepc
                 .include "drivers/generic-isr.asm"
                 
                 .dseg
000116           intcur: .byte 1
                 .eseg
000000           intvec: .byte INTVECTORS * CELLSIZE
                 .cseg
                 
                 ; interrupt routine gets called (again) by rcall! This gives the
                 ; address of the int-vector on the stack.
                 isr:
0000ec 920a          st -Y, r0
0000ed b60f          in r0, SREG
0000ee 920a          st -Y, r0
                 .if (pclen==3)
                 .endif
0000ef 900f          pop r0
0000f0 900f          pop r0          ; = intnum * intvectorsize + 1 (address following the rcall)
0000f1 940a          dec r0
                 .if intvecsize == 1 ;
                 .endif
0000f2 9200 0116     sts intcur, r0
0000f4 9009          ld r0, Y+
0000f5 be0f          out SREG, r0
0000f6 9009          ld r0, Y+
0000f7 9468          set ; set the interrupt flag for the inner interpreter
0000f8 9508          ret ; returns the interrupt, the rcall stack frame is removed!
                 
                 ; lower part of the dictionary
                 .include "dict/rww.inc"
                 
                 
                 ; Arithmetics
                 ; add a number to a double cell
                 VE_MPLUS:
0000f9 ff02          .dw $ff02
0000fa 2b6d          .db "m+"
0000fb 00d1          .dw VE_HEAD
                     .set VE_HEAD = VE_MPLUS
                 XT_MPLUS:
0000fc 3800          .dw DO_COLON
                 PFA_MPLUS:
0000fd 3fb7          .dw XT_S2D
0000fe 3c04          .dw XT_DPLUS
0000ff 381a          .dw XT_EXIT
                 .include "words/ud-star.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UDSTAR:
000100 ff03          .dw $ff03
000101 6475
../../common\words/ud-star.asm(9): warning: .cseg .db misalignment - padding zero byte
000102 002a          .db "ud*"
000103 00f9          .dw VE_HEAD
                     .set VE_HEAD = VE_UDSTAR
                 XT_UDSTAR:
000104 3800          .dw DO_COLON
                 PFA_UDSTAR:
                 
                 .endif
                 ;Z UD*      ud1 d2 -- ud3      32*16->32 multiply
                 ;   XT_DUP >R UM* DROP  XT_SWAP R> UM* ROT + ;
                 
000105 38ab
000106 38f9
000107 39da
000108 38d3              .DW XT_DUP,XT_TO_R,XT_UMSTAR,XT_DROP
000109 38be
00010a 38f0
00010b 39da
00010c 38db
00010d 3997
00010e 381a              .DW XT_SWAP,XT_R_FROM,XT_UMSTAR,XT_ROT,XT_PLUS,XT_EXIT
                 .include "words/umax.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UMAX:
00010f ff04          .dw $ff04
000110 6d75
000111 7861          .db "umax"
000112 0100          .dw VE_HEAD
                     .set VE_HEAD = VE_UMAX
                 XT_UMAX:
000113 3800          .dw DO_COLON
                 PFA_UMAX:
                 .endif
                 
000114 3eb2
000115 3956              .DW XT_2DUP,XT_ULESS
000116 3830      	.dw XT_DOCONDBRANCH
000117 0119      	 DEST(UMAX1)
000118 38be              .DW XT_SWAP
000119 38d3      UMAX1:  .DW XT_DROP
00011a 381a      	.dw XT_EXIT
                 .include "words/umin.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UMIN:
00011b ff04          .dw $ff04
00011c 6d75
00011d 6e69          .db "umin"
00011e 010f          .dw VE_HEAD
                     .set VE_HEAD = VE_UMIN
                 XT_UMIN:
00011f 3800          .dw DO_COLON
                 PFA_UMIN:
                 .endif
000120 3eb2
000121 3961              .DW XT_2DUP,XT_UGREATER
000122 3830      	.dw XT_DOCONDBRANCH
000123 0125      	DEST(UMIN1)
000124 38be              .DW XT_SWAP
000125 38d3      UMIN1:  .DW XT_DROP
000126 381a      	.dw XT_EXIT
                 .include "words/immediate-q.asm"
                 
                 ; Tools
                 ; get count information out of a counted string in flash
                 ;VE_IMMEDIATEQ:
                 ;    .dw $ff06
                 ;    .db "immediate?"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_IMMEDIATEQ
                 XT_IMMEDIATEQ:
000127 3800          .dw DO_COLON
                 PFA_IMMEDIATEQ:
000128 3837          .dw XT_DOLITERAL
000129 8000          .dw $8000
00012a 3a0d          .dw XT_AND
00012b 3914          .dw XT_ZEROEQUAL
00012c 3830          .dw XT_DOCONDBRANCH
00012d 0131          DEST(IMMEDIATEQ1)
00012e 3837           .dw XT_DOLITERAL
00012f 0001           .dw 1
000130 381a           .dw XT_EXIT
                 IMMEDIATEQ1:
                     ; not immediate
000131 3945          .dw XT_TRUE
000132 381a          .dw XT_EXIT
                 .include "words/name2flags.asm"
                 
                 ; Tools
                 ; get the flags from a name token
                 VE_NAME2FLAGS:
000133 ff0a          .dw $ff0a
000134 616e
000135 656d
000136 663e
000137 616c
000138 7367          .db "name>flags"
000139 011b          .dw VE_HEAD
                     .set VE_HEAD = VE_NAME2FLAGS
                 XT_NAME2FLAGS:
00013a 3800          .dw DO_COLON
                 PFA_NAME2FLAGS:
00013b 3bba          .dw XT_FETCHI ; skip to link field
00013c 3837          .dw XT_DOLITERAL
00013d ff00          .dw $ff00
00013e 3a0d          .dw XT_AND
00013f 381a          .dw XT_EXIT
                 .include "words/name2interpret.asm"
                 
                 ; Tools (ext)
                 ; get the execution token from the name token
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_NAME2INTERPRET:
000140 ff0e          .dw $ff0e
000141 616e
000142 656d
000143 693e
000144 746e
000145 7265
000146 7270
000147 7465          .db "name>interpret"
000148 0133          .dw VE_HEAD
                     .set VE_HEAD = VE_NAME2INTERPRET
                 XT_NAME2INTERPRET:
000149 3800          .dw DO_COLON
                 PFA_NAME2INTERPRET:
                 .endif
00014a 06eb          .dw XT_NFA2CFA
00014b 381a          .dw XT_EXIT
                 .include "words/name2compile.asm"
                 
                 ; Tools (ext)
                 ; get the execution token from the name token in compile state
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_NAME2COMPILE:
00014c ff0c          .dw $ff0c
00014d 616e
00014e 656d
00014f 633e
000150 6d6f
000151 6970
000152 656c          .db "name>compile"
000153 0140          .dw VE_HEAD
                     .set VE_HEAD = VE_NAME2COMPILE
                 XT_NAME2COMPILE:
000154 3800          .dw DO_COLON
                 PFA_NAME2COMPILE:
                 .endif
000155 38ab          .dw XT_DUP
000156 06eb          .dw XT_NFA2CFA
000157 38be          .dw XT_SWAP
000158 013a          .dw XT_NAME2FLAGS
000159 0127          .dw XT_IMMEDIATEQ
00015a 3830          .dw XT_DOCONDBRANCH
00015b 015f          DEST(NAME2COMPILE1)
00015c 3837      	.dw XT_DOLITERAL
00015d 0747      	.dw XT_COMMA
00015e 381a      	.dw XT_EXIT
                 NAME2COMPILE1:
00015f 3837      	.dw XT_DOLITERAL
000160 3824      	.dw XT_EXECUTE
000161 381a          .dw XT_EXIT
                 
                 .if AMFORTH_NRWW_SIZE > 8000
                 .elif AMFORTH_NRWW_SIZE > 4000
                 .include "dict/appl_4k.inc"
                 
                 
                 ; Tools
                 ; print the version string
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DOT_VER:
000162 ff03          .dw $ff03
000163 6576
../../common\words/ver.asm(12): warning: .cseg .db misalignment - padding zero byte
000164 0072          .db "ver"
000165 014c          .dw VE_HEAD
                     .set VE_HEAD = VE_DOT_VER
                 XT_DOT_VER:
000166 3800          .dw DO_COLON
                 PFA_DOT_VER:
                 .endif
000167 02c4          .dw XT_ENV_FORTHNAME
000168 03ed          .dw XT_ITYPE
000169 3f9e          .dw XT_SPACE
00016a 3ea6          .dw XT_BASE
00016b 3873          .dw XT_FETCH
                 
00016c 02d2          .dw XT_ENV_FORTHVERSION
00016d 3f31          .dw XT_DECIMAL
00016e 3fb7          .dw XT_S2D
00016f 030b          .dw XT_L_SHARP
000170 0313          .dw XT_SHARP
000171 3837          .dw XT_DOLITERAL
000172 002e          .dw '.'
000173 02fc          .dw XT_HOLD
000174 0329          .dw XT_SHARP_S
000175 0334          .dw XT_SHARP_G
000176 0423          .dw XT_TYPE
000177 3ea6          .dw XT_BASE
000178 387b          .dw XT_STORE
000179 3f9e          .dw XT_SPACE
00017a 02da          .dw XT_ENV_CPU
00017b 03ed          .dw XT_ITYPE
                 
00017c 381a          .dw XT_EXIT
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/noop.asm"
                 
                 ; Tools
                 ; do nothing
                 VE_NOOP:
00017d ff04          .dw $ff04
00017e 6f6e
00017f 706f          .db "noop"
000180 0162          .dw VE_HEAD
                     .set VE_HEAD = VE_NOOP
                 XT_NOOP:
000181 0182          .dw PFA_NOOP
                 PFA_NOOP:
000182 940c 3804     jmp_ DO_NEXT
                 .include "words/unused.asm"
                 
                 ; Tools
                 ; Amount of available RAM (incl. PAD)
                 VE_UNUSED:
000184 ff06          .dw $ff06
000185 6e75
000186 7375
000187 6465          .db "unused"
000188 017d          .dw VE_HEAD
                     .set VE_HEAD = VE_UNUSED
                 XT_UNUSED:
000189 3800          .dw DO_COLON
                 PFA_UNUSED:
00018a 3a7b          .dw XT_SP_FETCH
00018b 3f12          .dw XT_HERE
00018c 398d          .dw XT_MINUS
00018d 381a          .dw XT_EXIT
                 .include "words/to.asm"
                 
                 ; Tools
                 ; store the TOS to the named value (eeprom cell)
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TO:
00018e 0002          .dw $0002
00018f 6f74          .db "to"
000190 0184          .dw VE_HEAD
                     .set VE_HEAD = VE_TO
                 XT_TO:
000191 3800          .dw DO_COLON
                 PFA_TO:
                 .endif
000192 0432          .dw XT_TICK
000193 3fc0          .dw XT_TO_BODY
000194 3ea0          .dw XT_STATE
000195 3873          .dw XT_FETCH
000196 3830          .dw XT_DOCONDBRANCH
000197 01a2          DEST(PFA_TO1)
000198 073c          .dw XT_COMPILE
000199 019c          .dw XT_DOTO
00019a 0747          .dw XT_COMMA
00019b 381a          .dw XT_EXIT
                 
                 ; ( n -- ) (R: IP -- IP+1)
                 ; Tools
                 ; runtime portion of to
                 ;VE_DOTO:
                 ;    .dw $ff04
                 ;    .db "(to)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOTO
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 XT_DOTO:
00019c 3800          .dw DO_COLON
                 PFA_DOTO:
                 .endif
00019d 38f0          .dw XT_R_FROM
00019e 38ab          .dw XT_DUP
00019f 01ae          .dw XT_ICELLPLUS
0001a0 38f9          .dw XT_TO_R
0001a1 3bba          .dw XT_FETCHI
                 PFA_TO1:
0001a2 38ab          .dw XT_DUP
0001a3 01ae          .dw XT_ICELLPLUS
0001a4 01ae          .dw XT_ICELLPLUS
0001a5 3bba          .dw XT_FETCHI
0001a6 3824          .dw XT_EXECUTE
0001a7 381a          .dw XT_EXIT
                 .include "words/i-cellplus.asm"
                 
                 ; Compiler
                 ; skip to the next cell in flash
                 VE_ICELLPLUS:
0001a8 ff07          .dw $FF07
0001a9 2d69
0001aa 6563
0001ab 6c6c
0001ac 002b          .db "i-cell+",0
0001ad 018e          .dw VE_HEAD
                     .set VE_HEAD = VE_ICELLPLUS
                 XT_ICELLPLUS:
0001ae 3800          .dw DO_COLON
                 PFA_ICELLPLUS:
0001af 3a29          .dw XT_1PLUS
0001b0 381a          .dw XT_EXIT
                 .include "words/icompare.asm"
                 
                 ; Tools
                 ; compares string in RAM with string in flash. f is zero if equal like COMPARE
                 VE_ICOMPARE:
0001b1 ff08          .dw $ff08
0001b2 6369
0001b3 6d6f
0001b4 6170
0001b5 6572          .db "icompare"
0001b6 01a8          .dw VE_HEAD
                     .set VE_HEAD = VE_ICOMPARE
                 XT_ICOMPARE:
0001b7 3800          .dw DO_COLON
                 PFA_ICOMPARE:
0001b8 38f9          .dw XT_TO_R    ; ( -- r-addr r-len f-addr)
0001b9 38c9          .dw XT_OVER    ; ( -- r-addr r-len f-addr r-len)
0001ba 38f0          .dw XT_R_FROM  ; ( -- r-addr r-len f-addr r-len f-len )
0001bb 390d          .dw XT_NOTEQUAL ; ( -- r-addr r-len f-addr flag )
0001bc 3830          .dw XT_DOCONDBRANCH
0001bd 01c2          .dw PFA_ICOMPARE_SAMELEN
0001be 3ebb            .dw XT_2DROP
0001bf 38d3            .dw XT_DROP
0001c0 3945            .dw XT_TRUE
0001c1 381a            .dw XT_EXIT
                 PFA_ICOMPARE_SAMELEN:
0001c2 38be          .dw XT_SWAP ; ( -- r-addr f-addr len )
0001c3 394e          .dw XT_ZERO
0001c4 0806          .dw XT_QDOCHECK
0001c5 3830          .dw XT_DOCONDBRANCH
0001c6 01e7          .dw PFA_ICOMPARE_DONE
0001c7 3a89          .dw XT_DODO
                 PFA_ICOMPARE_LOOP:
                     ; ( r-addr f-addr --)
0001c8 38c9          .dw XT_OVER
0001c9 3873          .dw XT_FETCH
                 .if WANT_IGNORECASE == 1
0001ca 01ea          .dw XT_ICOMPARE_LC
                 .endif
0001cb 38c9          .dw XT_OVER
0001cc 3bba          .dw XT_FETCHI ; ( -- r-addr f-addr r-cc f- cc)
                 .if WANT_IGNORECASE == 1
0001cd 01ea          .dw XT_ICOMPARE_LC
                 .endif
                     ; flash strings are zero-padded at the last cell
                     ; that means: if the flash cell is less $0100, than mask the
                     ; high byte in the ram cell
0001ce 38ab          .dw XT_DUP
                     ;.dw XT_BYTESWAP
0001cf 3837          .dw XT_DOLITERAL
0001d0 0100          .dw $100
0001d1 3956          .dw XT_ULESS
0001d2 3830          .dw XT_DOCONDBRANCH
0001d3 01d8          .dw PFA_ICOMPARE_LASTCELL
0001d4 38be          .dw XT_SWAP
0001d5 3837          .dw XT_DOLITERAL
0001d6 00ff          .dw $00FF
0001d7 3a0d          .dw XT_AND  ; the final swap can be omitted
                 PFA_ICOMPARE_LASTCELL:
0001d8 390d          .dw XT_NOTEQUAL
0001d9 3830          .dw XT_DOCONDBRANCH
0001da 01df          .dw PFA_ICOMPARE_NEXTLOOP
0001db 3ebb          .dw XT_2DROP
0001dc 3945          .dw XT_TRUE
0001dd 3ac2          .dw XT_UNLOOP
0001de 381a          .dw XT_EXIT
                 PFA_ICOMPARE_NEXTLOOP:
0001df 3a29          .dw XT_1PLUS
0001e0 38be          .dw XT_SWAP
0001e1 3c82          .dw XT_CELLPLUS
0001e2 38be          .dw XT_SWAP
0001e3 3837          .dw XT_DOLITERAL
0001e4 0002          .dw 2
0001e5 3aa8          .dw XT_DOPLUSLOOP
0001e6 01c8          .dw PFA_ICOMPARE_LOOP
                 PFA_ICOMPARE_DONE:
0001e7 3ebb          .dw XT_2DROP
0001e8 394e          .dw XT_ZERO
0001e9 381a          .dw XT_EXIT
                 
                 .if WANT_IGNORECASE == 1
                 ; ( cc1 cc2 -- f) 
                 ; Tools
                 ; compares two packed characters 
                 ;VE_ICOMPARELC:
                 ;    .dw $ff08
                 ;    .db "icompare-lower"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_ICOMPARELC
                 XT_ICOMPARE_LC:
0001ea 3800          .dw DO_COLON
                 PFA_ICOMPARE_LC:
0001eb 38ab          .dw XT_DUP
0001ec 3837          .dw XT_DOLITERAL
0001ed 00ff          .dw $00ff
0001ee 3a0d          .dw XT_AND
0001ef 3f69          .dw XT_TOLOWER
0001f0 38be          .dw XT_SWAP
0001f1 3ae7          .dw XT_BYTESWAP
0001f2 3837          .dw XT_DOLITERAL
0001f3 00ff          .dw $00ff
0001f4 3a0d          .dw XT_AND
0001f5 3f69          .dw XT_TOLOWER
0001f6 3ae7          .dw XT_BYTESWAP
0001f7 3a16          .dw XT_OR
0001f8 381a          .dw XT_EXIT
                 .endif
                 .include "words/star.asm"
                 
                 ; Arithmetics
                 ; multiply routine
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_STAR:
0001f9 ff01          .dw $ff01
0001fa 002a          .db "*",0
0001fb 01b1          .dw VE_HEAD
                     .set VE_HEAD = VE_STAR
                 XT_STAR:
0001fc 3800          .dw DO_COLON
                 PFA_STAR:
                 .endif
                 
0001fd 39a0          .dw XT_MSTAR
0001fe 38d3          .dw XT_DROP
0001ff 381a          .dw XT_EXIT
                 .include "words/j.asm"
                 
                 ; Compiler
                 ; loop counter of outer loop
                 VE_J:
000200 ff01          .dw $FF01
000201 006a          .db "j",0
000202 01f9          .dw VE_HEAD
                     .set VE_HEAD = VE_J
                 XT_J:
000203 3800          .dw DO_COLON
                 PFA_J:
000204 3a64          .dw XT_RP_FETCH
000205 3837          .dw XT_DOLITERAL
000206 0007          .dw 7
000207 3997          .dw XT_PLUS
000208 3873          .dw XT_FETCH
000209 3a64          .dw XT_RP_FETCH
00020a 3837          .dw XT_DOLITERAL
00020b 0009          .dw 9
00020c 3997          .dw XT_PLUS
00020d 3873          .dw XT_FETCH
00020e 3997          .dw XT_PLUS
00020f 381a          .dw XT_EXIT
                 .include "words/dabs.asm"
                 
                 ; Arithmetics
                 ; double cell absolute value
                 VE_DABS:
000210 ff04          .dw $ff04
000211 6164
000212 7362          .db "dabs"
000213 0200          .dw VE_HEAD
                     .set VE_HEAD = VE_DABS
                 XT_DABS:
000214 3800          .dw DO_COLON
                 PFA_DABS:
000215 38ab          .dw XT_DUP
000216 391b          .dw XT_ZEROLESS
000217 3830          .dw XT_DOCONDBRANCH
000218 021a          .dw PFA_DABS1
000219 0221          .dw XT_DNEGATE
                 PFA_DABS1:
00021a 381a          .dw XT_EXIT
                 ; : dabs      ( ud1 -- +d2 ) dup 0< if dnegate then ;
                 .include "words/dnegate.asm"
                 
                 ; Arithmetics
                 ; double cell negation
                 VE_DNEGATE:
00021b ff07          .dw $ff07
00021c 6e64
00021d 6765
00021e 7461
00021f 0065          .db "dnegate",0
000220 0210          .dw VE_HEAD
                     .set VE_HEAD = VE_DNEGATE
                 XT_DNEGATE:
000221 3800          .dw DO_COLON
                 PFA_DNEGATE:
000222 3c2a          .dw XT_DINVERT
000223 3837          .dw XT_DOLITERAL
000224 0001          .dw 1
000225 394e          .dw XT_ZERO
000226 3c04          .dw XT_DPLUS
000227 381a          .dw XT_EXIT
                 ; : dnegate   ( ud1 -- ud2 ) dinvert 1. d+ ;
                 .include "words/cmove.asm"
                 
                 ; Memory
                 ; copy data in RAM, from lower to higher addresses
                 VE_CMOVE:
000228 ff05          .dw $ff05
000229 6d63
00022a 766f
00022b 0065          .db "cmove",0
00022c 021b          .dw VE_HEAD
                     .set VE_HEAD  = VE_CMOVE
                 XT_CMOVE:
00022d 022e          .dw PFA_CMOVE
                 PFA_CMOVE:
00022e 93bf          push xh
00022f 93af          push xl
000230 91e9          ld zl, Y+
000231 91f9          ld zh, Y+ ; addr-to
000232 91a9          ld xl, Y+
000233 91b9          ld xh, Y+ ; addr-from
000234 2f09          mov temp0, tosh
000235 2b08          or temp0, tosl
000236 f021          brbs 1, PFA_CMOVE1
                 PFA_CMOVE2:
000237 911d          ld temp1, X+
000238 9311          st Z+, temp1
000239 9701          sbiw tosl, 1
00023a f7e1          brbc 1, PFA_CMOVE2
                 PFA_CMOVE1:
00023b 91af          pop xl
00023c 91bf          pop xh
00023d 9189
00023e 9199          loadtos
00023f 940c 3804     jmp_ DO_NEXT
                 .include "words/2swap.asm"
                 
                 ; Stack
                 ; Exchange the two top cell pairs
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_2SWAP:
000241 ff05          .dw $ff05
000242 7332
000243 6177
000244 0070          .db "2swap",0
000245 0228          .dw VE_HEAD
                     .set VE_HEAD = VE_2SWAP
                 XT_2SWAP:
000246 3800          .dw DO_COLON
                 PFA_2SWAP:
                 
                 .endif
000247 38db          .dw XT_ROT
000248 38f9          .dw XT_TO_R
000249 38db          .dw XT_ROT
00024a 38f0          .dw XT_R_FROM
00024b 381a          .dw XT_EXIT
                 .include "words/tib.asm"
                 
                 ; System Variable
                 ; terminal input buffer address
                 VE_TIB:
00024c ff03          .dw $ff03
00024d 6974
00024e 0062          .db "tib",0
00024f 0241          .dw VE_HEAD
                     .set VE_HEAD = VE_TIB
                 XT_TIB:
000250 3842          .dw PFA_DOVARIABLE
                 PFA_TIB:
000251 0117          .dw ram_tib
                     
                 .dseg
000117           ram_tib: .byte TIBSIZE
                 .cseg
                 ; ( -- f ) 
                 ; System
                 ; refills the input buffer
                 VE_REFILLTIB:
000252 ff0a          .dw $ff0a
000253 6572
000254 6966
000255 6c6c
000256 742d
000257 6269          .db "refill-tib"
000258 024c          .dw VE_HEAD
                     .set VE_HEAD = VE_REFILLTIB
                 XT_REFILLTIB:
000259 3800          .dw DO_COLON
                 PFA_REFILLTIB:
00025a 0250          .dw XT_TIB
00025b 3837          .dw XT_DOLITERAL
00025c 005a          .dw TIBSIZE
00025d 047b          .dw XT_ACCEPT
00025e 3ed1          .dw XT_NUMBERTIB
00025f 387b          .dw XT_STORE
000260 394e          .dw XT_ZERO
000261 3ecb          .dw XT_TO_IN
000262 387b          .dw XT_STORE
000263 3945          .dw XT_TRUE ; -1
000264 381a          .dw XT_EXIT
                 
                 ; ( -- addr n ) 
                 ; System
                 ; address and current length of the input buffer
                 VE_SOURCETIB:
000265 ff0a          .dw $FF0A
000266 6f73
000267 7275
000268 6563
000269 742d
00026a 6269          .db "source-tib"
00026b 0252          .dw VE_HEAD
                     .set VE_HEAD = VE_SOURCETIB
                 XT_SOURCETIB:
00026c 3800          .dw DO_COLON
                 PFA_SOURCETIB:
00026d 0250          .dw XT_TIB
00026e 3ed1          .dw XT_NUMBERTIB
00026f 3873          .dw XT_FETCH
000270 381a          .dw XT_EXIT
                 .include "words/init-user.asm"
                 
                 ; Tools
                 ; copy len cells from eeprom to ram
                 VE_EE2RAM:
000271 ff06        .dw $ff06
000272 6565
000273 723e
000274 6d61        .db "ee>ram"
000275 0265        .dw VE_HEAD
                   .set VE_HEAD = VE_EE2RAM
                 XT_EE2RAM:
000276 3800        .dw DO_COLON
                 PFA_EE2RAM:          ; ( -- )
000277 394e          .dw XT_ZERO
000278 3a89          .dw XT_DODO
                 PFA_EE2RAM_1:
                     ; ( -- e-addr r-addr )
000279 38c9          .dw XT_OVER
00027a 3b4d          .dw XT_FETCHE
00027b 38c9          .dw XT_OVER
00027c 387b          .dw XT_STORE
00027d 3c82          .dw XT_CELLPLUS
00027e 38be          .dw XT_SWAP
00027f 3c82          .dw XT_CELLPLUS
000280 38be          .dw XT_SWAP
000281 3ab7          .dw XT_DOLOOP
000282 0279          .dw PFA_EE2RAM_1
                 PFA_EE2RAM_2:
000283 3ebb          .dw XT_2DROP
000284 381a          .dw XT_EXIT
                 
                 ; ( -- )
                 ; Tools
                 ; setup the default user area from eeprom
                 VE_INITUSER:
000285 ff09        .dw $ff09
000286 6e69
000287 7469
000288 752d
000289 6573
00028a 0072        .db "init-user",0
00028b 0271        .dw VE_HEAD
                   .set VE_HEAD = VE_INITUSER
                 XT_INITUSER:
00028c 3800        .dw DO_COLON
                 PFA_INITUSER:          ; ( -- )
00028d 3837          .dw XT_DOLITERAL
00028e 008c          .dw EE_INITUSER
00028f 3af0          .dw XT_UP_FETCH
000290 3837          .dw XT_DOLITERAL
000291 001c          .dw SYSUSERSIZE
000292 39fe          .dw XT_2SLASH
000293 0276          .dw XT_EE2RAM
000294 381a          .dw XT_EXIT
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
                 
                 .include "words/environment.asm"
                 
                 ; System Value
                 ; word list identifier of the environmental search list
                 VE_ENVIRONMENT:
000295 ff0b          .dw $ff0b
000296 6e65
000297 6976
000298 6f72
000299 6d6e
00029a 6e65
00029b 0074          .db "environment",0
00029c 0285          .dw VE_HEAD
                     .set VE_HEAD = VE_ENVIRONMENT
                 XT_ENVIRONMENT:
00029d 3842          .dw PFA_DOVARIABLE
                 PFA_ENVIRONMENT:
00029e 0062          .dw EE_ENVIRONMENT
                 .include "words/env-wordlists.asm"
                 
                 ; Environment
                 ; maximum number of wordlists in the dictionary search order
                 VE_ENVWORDLISTS:
00029f ff09          .dw $ff09
0002a0 6f77
0002a1 6472
0002a2 696c
0002a3 7473
0002a4 0073          .db "wordlists",0
0002a5 0000          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENVWORDLISTS
                 XT_ENVWORDLISTS:
0002a6 3800          .dw DO_COLON
                 PFA_ENVWORDLISTS:
0002a7 3837          .dw XT_DOLITERAL
0002a8 0008          .dw NUMWORDLISTS
0002a9 381a          .dw XT_EXIT
                 .include "words/env-slashpad.asm"
                 
                 ; Environment
                 ; Size of the PAD buffer in bytes
                 VE_ENVSLASHPAD:
0002aa ff04          .dw $ff04
0002ab 702f
0002ac 6461          .db "/pad"
0002ad 029f          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENVSLASHPAD
                 XT_ENVSLASHPAD:
0002ae 3800          .dw DO_COLON
                 PFA_ENVSLASHPAD:
0002af 3a7b          .dw XT_SP_FETCH
0002b0 3ed7          .dw XT_PAD
0002b1 398d          .dw XT_MINUS
0002b2 381a          .dw XT_EXIT
                 .include "words/env-slashhold.asm"
                 
                 ; Environment
                 ; size of the pictured numeric output buffer in bytes
                 VE_ENVSLASHHOLD:
0002b3 ff05          .dw $ff05
0002b4 682f
0002b5 6c6f
0002b6 0064          .db "/hold",0
0002b7 02aa          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENVSLASHHOLD
                 XT_ENVSLASHHOLD:
0002b8 3800          .dw DO_COLON
                 PFA_ENVSLASHHOLD:
0002b9 3ed7          .dw XT_PAD
0002ba 3f12          .dw XT_HERE
0002bb 398d          .dw XT_MINUS
0002bc 381a          .dw XT_EXIT
                 .include "words/env-forthname.asm"
                 
                 ; Environment
                 ; flash address of the amforth name string
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ENV_FORTHNAME:
0002bd ff0a          .dw $ff0a
0002be 6f66
0002bf 7472
0002c0 2d68
0002c1 616e
0002c2 656d          .db "forth-name"
0002c3 02b3          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENV_FORTHNAME
                 XT_ENV_FORTHNAME:
0002c4 3800          .dw DO_COLON
                 PFA_EN_FORTHNAME:
0002c5 03ba          .dw XT_DOSLITERAL
0002c6 0007          .dw 7
                 .endif
0002c7 6d61
0002c8 6f66
0002c9 7472
../../common\words/env-forthname.asm(22): warning: .cseg .db misalignment - padding zero byte
0002ca 0068          .db "amforth"
                 .if cpu_msp430==1
                 .endif
0002cb 381a          .dw XT_EXIT
                 .include "words/env-forthversion.asm"
                 
                 ; Environment
                 ; version number of amforth
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ENV_FORTHVERSION:
0002cc ff07          .dw $ff07
0002cd 6576
0002ce 7372
0002cf 6f69
0002d0 006e          .db "version",0
0002d1 02bd          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENV_FORTHVERSION
                 XT_ENV_FORTHVERSION:
0002d2 3800          .dw DO_COLON
                 PFA_EN_FORTHVERSION:
                 .endif
0002d3 3837          .dw XT_DOLITERAL
0002d4 003b          .dw 59
0002d5 381a          .dw XT_EXIT
                 .include "words/env-cpu.asm"
                 
                 ; Environment
                 ; flash address of the CPU identification string
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ENV_CPU:
0002d6 ff03          .dw $ff03
0002d7 7063
0002d8 0075          .db "cpu",0
0002d9 02cc          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENV_CPU
                 XT_ENV_CPU:
0002da 3800          .dw DO_COLON
                 PFA_EN_CPU:
0002db 3837          .dw XT_DOLITERAL
0002dc 0059          .dw mcu_name
0002dd 0419          .dw XT_ICOUNT
                 .endif
0002de 381a          .dw XT_EXIT
                 .include "words/env-mcuinfo.asm"
                 
                 ; Environment
                 ; flash address of some CPU specific parameters
                 VE_ENV_MCUINFO:
0002df ff08          .dw $ff08
0002e0 636d
0002e1 2d75
0002e2 6e69
0002e3 6f66          .db "mcu-info"
0002e4 02d6          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENV_MCUINFO
                 XT_ENV_MCUINFO:
0002e5 3800          .dw DO_COLON
                 PFA_EN_MCUINFO:
0002e6 3837          .dw XT_DOLITERAL
0002e7 0055          .dw mcu_info
0002e8 381a          .dw XT_EXIT
                 .include "words/env-usersize.asm"
                 
                 ; Environment
                 ; size of the USER area in bytes
                 VE_ENVUSERSIZE:
0002e9 ff05          .dw $ff05
0002ea 752f
0002eb 6573
0002ec 0072          .db "/user",0
0002ed 02df          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENVUSERSIZE
                 XT_ENVUSERSIZE:
0002ee 3800          .dw DO_COLON
                 PFA_ENVUSERSIZE:
0002ef 3837          .dw XT_DOLITERAL
0002f0 0026          .dw SYSUSERSIZE + APPUSERSIZE
0002f1 381a          .dw XT_EXIT
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/hld.asm"
                 
                 ; Numeric IO
                 ; pointer to current write position in the Pictured Numeric Output buffer
                 VE_HLD:
0002f2 ff03          .dw $ff03
0002f3 6c68
0002f4 0064          .db "hld",0
0002f5 0295          .dw VE_HEAD
                     .set VE_HEAD = VE_HLD
                 XT_HLD:
0002f6 3842          .dw PFA_DOVARIABLE
                 PFA_HLD:
0002f7 0171          .dw ram_hld
                 
                 .dseg
000171           ram_hld: .byte 2
                 .cseg
                 .include "words/hold.asm"
                 
                 ; Numeric IO
                 ; prepend character to pictured numeric output buffer
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_HOLD:
0002f8 ff04          .dw $ff04
0002f9 6f68
0002fa 646c          .db "hold"
0002fb 02f2          .dw VE_HEAD
                     .set VE_HEAD = VE_HOLD
                 XT_HOLD:
0002fc 3800          .dw DO_COLON
                 PFA_HOLD:
                 .endif
0002fd 02f6          .dw XT_HLD
0002fe 38ab          .dw XT_DUP
0002ff 3873          .dw XT_FETCH
000300 3a2f          .dw XT_1MINUS
000301 38ab          .dw XT_DUP
000302 38f9          .dw XT_TO_R
000303 38be          .dw XT_SWAP
000304 387b          .dw XT_STORE
000305 38f0          .dw XT_R_FROM
000306 3887          .dw XT_CSTORE
000307 381a          .dw XT_EXIT
                 .include "words/less-sharp.asm" ; <#
                 
                 ; Numeric IO
                 ; initialize the pictured numeric output conversion process
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_L_SHARP:
000308 ff02          .dw $ff02
000309 233c          .db "<#"
00030a 02f8          .dw VE_HEAD
                     .set VE_HEAD = VE_L_SHARP
                 XT_L_SHARP:
00030b 3800          .dw DO_COLON
                 PFA_L_SHARP:
                 .endif
00030c 3ed7          .dw XT_PAD
00030d 02f6          .dw XT_HLD
00030e 387b          .dw XT_STORE
00030f 381a          .dw XT_EXIT
                 .include "words/sharp.asm"
                 
                 ; Numeric IO
                 ; pictured numeric output: convert one digit
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_SHARP:
000310 ff01          .dw $ff01
000311 0023          .db "#",0
000312 0308          .dw VE_HEAD
                     .set VE_HEAD = VE_SHARP
                 XT_SHARP:
000313 3800          .dw DO_COLON
                 PFA_SHARP:
                 .endif
000314 3ea6          .dw XT_BASE
000315 3873          .dw XT_FETCH
000316 0390          .dw XT_UDSLASHMOD
000317 38db          .dw XT_ROT
000318 3837          .dw XT_DOLITERAL
000319 0009          .dw 9
00031a 38c9          .dw XT_OVER
00031b 3968          .dw XT_LESS
00031c 3830          .dw XT_DOCONDBRANCH
00031d 0321          DEST(PFA_SHARP1)
00031e 3837          .dw XT_DOLITERAL
00031f 0007          .dw 7
000320 3997          .dw XT_PLUS
                 PFA_SHARP1:
000321 3837          .dw XT_DOLITERAL
000322 0030          .dw 48 ; ASCII 0
000323 3997          .dw XT_PLUS
000324 02fc          .dw XT_HOLD
000325 381a          .dw XT_EXIT
                 ; : #    ( ud1 -- ud2 ) 
                 ;        base @ ud/mod rot 9 over < if 7 + then 30 + hold ; 
                 .include "words/sharp-s.asm"
                 
                 ; Numeric IO
                 ; pictured numeric output: convert all digits until 0 (zero) is reached
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SHARP_S:
000326 ff02          .dw $ff02
000327 7323          .db "#s"
000328 0310          .dw VE_HEAD
                     .set VE_HEAD = VE_SHARP_S
                 XT_SHARP_S:
000329 3800          .dw DO_COLON
                 PFA_SHARP_S:
                 .endif
                 NUMS1:
00032a 0313          .dw XT_SHARP
00032b 3eb2          .dw XT_2DUP
00032c 3a16          .dw XT_OR
00032d 3914          .dw XT_ZEROEQUAL
00032e 3830          .dw XT_DOCONDBRANCH
00032f 032a          DEST(NUMS1) ; PFA_SHARP_S
000330 381a          .dw XT_EXIT
                 .include "words/sharp-greater.asm" ; #>
                 
                 ; Numeric IO
                 ; Pictured Numeric Output: convert PNO buffer into an string
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SHARP_G:
000331 ff02          .dw $ff02
000332 3e23          .db "#>"
000333 0326          .dw VE_HEAD
                     .set VE_HEAD = VE_SHARP_G
                 XT_SHARP_G:
000334 3800          .dw DO_COLON
                 PFA_SHARP_G:
                 .endif
000335 3ebb          .dw XT_2DROP
000336 02f6          .dw XT_HLD
000337 3873          .dw XT_FETCH
000338 3ed7          .dw XT_PAD
000339 38c9          .dw XT_OVER
00033a 398d          .dw XT_MINUS
00033b 381a          .dw XT_EXIT
                 .include "words/sign.asm"
                 
                 ; Numeric IO
                 ; place a - in HLD if n is negative
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SIGN:
00033c ff04          .dw $ff04
00033d 6973
00033e 6e67          .db "sign"
00033f 0331          .dw VE_HEAD
                     .set VE_HEAD = VE_SIGN
                 XT_SIGN:
000340 3800          .dw DO_COLON
                 PFA_SIGN:
                 .endif
000341 391b          .dw XT_ZEROLESS
000342 3830          .dw XT_DOCONDBRANCH
000343 0347          DEST(PFA_SIGN1)
000344 3837          .dw XT_DOLITERAL
000345 002d          .dw 45 ; ascii -
000346 02fc          .dw XT_HOLD
                 PFA_SIGN1:
000347 381a          .dw XT_EXIT
                 .include "words/d-dot-r.asm"
                 
                 ; Numeric IO
                 ; singed PNO with double cell numbers, right aligned in width w
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DDOTR:
000348 ff03          .dw $ff03
000349 2e64
00034a 0072          .db "d.r",0
00034b 033c          .dw VE_HEAD
                     .set VE_HEAD = VE_DDOTR
                 XT_DDOTR:
00034c 3800          .dw DO_COLON
                 PFA_DDOTR:
                 
                 .endif
00034d 38f9          .dw XT_TO_R
00034e 3ec3          .dw XT_TUCK
00034f 0214          .dw XT_DABS
000350 030b          .dw XT_L_SHARP
000351 0329          .dw XT_SHARP_S
000352 38db          .dw XT_ROT
000353 0340          .dw XT_SIGN
000354 0334          .dw XT_SHARP_G
000355 38f0          .dw XT_R_FROM
000356 38c9          .dw XT_OVER
000357 398d          .dw XT_MINUS
000358 3fa7          .dw XT_SPACES
000359 0423          .dw XT_TYPE
00035a 381a          .dw XT_EXIT
                 ; : d.r       ( d n -- )
                 ;             >r swap over dabs <# #s rot sign #> r> over - spaces type ;
                 .include "words/dot-r.asm"
                 
                 ; Numeric IO
                 ; singed PNO with single cell numbers, right aligned in width w
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DOTR:
00035b ff02          .dw $ff02
00035c 722e          .db ".r"
00035d 0348          .dw VE_HEAD
                     .set VE_HEAD = VE_DOTR
                 XT_DOTR:
00035e 3800          .dw DO_COLON
                 PFA_DOTR:
                 
                 .endif
00035f 38f9          .dw XT_TO_R
000360 3fb7          .dw XT_S2D
000361 38f0          .dw XT_R_FROM
000362 034c          .dw XT_DDOTR
000363 381a          .dw XT_EXIT
                 ; : .r        ( s n -- )  >r s>d r> d.r ;
                 .include "words/d-dot.asm"
                 
                 ; Numeric IO
                 ; singed PNO with double cell numbers
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DDOT:
000364 ff02          .dw $ff02
000365 2e64          .db "d."
000366 035b          .dw VE_HEAD
                     .set VE_HEAD = VE_DDOT
                 XT_DDOT:
000367 3800          .dw DO_COLON
                 PFA_DDOT:
                 
                 .endif
000368 394e          .dw XT_ZERO
000369 034c          .dw XT_DDOTR
00036a 3f9e          .dw XT_SPACE
00036b 381a          .dw XT_EXIT
                 ; : d.        ( d -- )    0 d.r space ;
                 .include "words/dot.asm"
                 
                 ; Numeric IO
                 ; singed PNO with single cell numbers
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_DOT:
00036c ff01          .dw $ff01
00036d 002e          .db ".",0
00036e 0364          .dw VE_HEAD
                     .set VE_HEAD = VE_DOT
                 XT_DOT:
00036f 3800          .dw DO_COLON
                 PFA_DOT:
                 .endif
000370 3fb7          .dw XT_S2D
000371 0367          .dw XT_DDOT
000372 381a          .dw XT_EXIT
                 ; : .         ( s -- )    s>d d. ; 
                 .include "words/ud-dot.asm"
                 
                 ; Numeric IO
                 ; unsigned PNO with double cell numbers
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UDDOT:
000373 ff03          .dw $ff03
000374 6475
000375 002e          .db "ud.",0
000376 036c          .dw VE_HEAD
                     .set VE_HEAD = VE_UDDOT
                 XT_UDDOT:
000377 3800          .dw DO_COLON
                 PFA_UDDOT:
                 .endif
000378 394e          .dw XT_ZERO
000379 0380          .dw XT_UDDOTR
00037a 3f9e          .dw XT_SPACE
00037b 381a          .dw XT_EXIT
                 .include "words/ud-dot-r.asm"
                 
                 ; Numeric IO
                 ; unsigned PNO with double cell numbers, right aligned in width w
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_UDDOTR:
00037c ff04          .dw $ff04
00037d 6475
00037e 722e          .db "ud.r"
00037f 0373          .dw VE_HEAD
                     .set VE_HEAD = VE_UDDOTR
                 XT_UDDOTR:
000380 3800          .dw DO_COLON
                 PFA_UDDOTR:
                 .endif
000381 38f9          .dw XT_TO_R
000382 030b          .dw XT_L_SHARP
000383 0329          .dw XT_SHARP_S
000384 0334          .dw XT_SHARP_G
000385 38f0          .dw XT_R_FROM
000386 38c9          .dw XT_OVER
000387 398d          .dw XT_MINUS
000388 3fa7          .dw XT_SPACES
000389 0423          .dw XT_TYPE
00038a 381a          .dw XT_EXIT
                 .include "words/ud-slash-mod.asm"
                 
                 ; Arithmetics
                 ; unsigned double cell division with remainder
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UDSLASHMOD:
00038b ff06          .dw $ff06
00038c 6475
00038d 6d2f
00038e 646f          .db "ud/mod"
00038f 037c          .dw VE_HEAD
                     .set VE_HEAD = VE_UDSLASHMOD
                 XT_UDSLASHMOD:
000390 3800          .dw DO_COLON
                 PFA_UDSLASHMOD:
                 .endif
000391 38f9          .dw XT_TO_R
000392 394e          .dw XT_ZERO
000393 3902          .dw XT_R_FETCH
000394 39bc          .dw XT_UMSLASHMOD
000395 38f0          .dw XT_R_FROM
000396 38be          .dw XT_SWAP
000397 38f9          .dw XT_TO_R
000398 39bc          .dw XT_UMSLASHMOD
000399 38f0          .dw XT_R_FROM
00039a 381a          .dw XT_EXIT
                 .include "words/digit-q.asm"
                 
                 ; Numeric IO
                 ; tries to convert a character to a number, set flag accordingly
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DIGITQ:
00039b ff06          .dw $ff06 
00039c 6964
00039d 6967
00039e 3f74          .db "digit?"
00039f 038b          .dw VE_HEAD
                     .set VE_HEAD = VE_DIGITQ
                 XT_DIGITQ:
0003a0 3800          .dw DO_COLON 
                 PFA_DIGITQ:
                 .endif
0003a1 3f56          .dw XT_TOUPPER
0003a2 38ab
0003a3 3837
0003a4 0039
0003a5 3972
0003a6 3837
0003a7 0100          .DW XT_DUP,XT_DOLITERAL,57,XT_GREATER,XT_DOLITERAL,256
0003a8 3a0d
0003a9 3997
0003aa 38ab
0003ab 3837
0003ac 0140
0003ad 3972          .DW XT_AND,XT_PLUS,XT_DUP,XT_DOLITERAL,320,XT_GREATER
0003ae 3837
0003af 0107
0003b0 3a0d
0003b1 398d
0003b2 3837
0003b3 0030          .DW XT_DOLITERAL,263,XT_AND,XT_MINUS,XT_DOLITERAL,48
0003b4 398d
0003b5 38ab
0003b6 3ea6
0003b7 3873
0003b8 3956          .DW XT_MINUS,XT_DUP,XT_BASE,XT_FETCH,XT_ULESS
0003b9 381a          .DW XT_EXIT
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/do-sliteral.asm"
                 
                 ; String
                 ; runtime portion of sliteral
                 ;VE_DOSLITERAL:
                 ;  .dw $ff0a
                 ;  .db "(sliteral)"
                 ;  .dw VE_HEAD
                 ;  .set VE_HEAD = VE_DOSLITERAL
                 XT_DOSLITERAL:
0003ba 3800        .dw DO_COLON
                 PFA_DOSLITERAL:
0003bb 3902        .dw XT_R_FETCH   ; ( -- addr )
0003bc 0419        .dw XT_ICOUNT
0003bd 38f0        .dw XT_R_FROM
0003be 38c9        .dw XT_OVER     ; ( -- addr' n addr n)
0003bf 3a29        .dw XT_1PLUS
0003c0 39fe        .dw XT_2SLASH   ; ( -- addr' n addr k )
0003c1 3997        .dw XT_PLUS     ; ( -- addr' n addr'' )
0003c2 3a29        .dw XT_1PLUS
0003c3 38f9        .dw XT_TO_R     ; ( -- )
0003c4 381a        .dw XT_EXIT
                 .include "words/scomma.asm"
                 
                 ; Compiler
                 ; compiles a string from RAM to Flash
                 VE_SCOMMA:
0003c5 ff02        .dw $ff02
0003c6 2c73        .db "s",$2c
0003c7 039b        .dw VE_HEAD
                   .set VE_HEAD = VE_SCOMMA
                 XT_SCOMMA:
0003c8 3800          .dw DO_COLON
                 PFA_SCOMMA:
0003c9 38ab          .dw XT_DUP
0003ca 03cc          .dw XT_DOSCOMMA
0003cb 381a          .dw XT_EXIT
                 
                 ; ( addr len len' -- ) 
                 ; Compiler
                 ; compiles a string from RAM to Flash
                 ;VE_DOSCOMMA:
                 ;  .dw $ff04
                 ;  .db "(s",$2c,")"
                 ;  .dw VE_HEAD
                 ;  .set VE_HEAD = VE_DOSCOMMA
                 XT_DOSCOMMA:
0003cc 3800          .dw DO_COLON
                 PFA_DOSCOMMA:
0003cd 0747          .dw XT_COMMA
0003ce 38ab          .dw XT_DUP   ; ( --addr len len)
0003cf 39fe          .dw XT_2SLASH ; ( -- addr len len/2
0003d0 3ec3          .dw XT_TUCK   ; ( -- addr len/2 len len/2
0003d1 3a05          .dw XT_2STAR  ; ( -- addr len/2 len len'
0003d2 398d          .dw XT_MINUS  ; ( -- addr len/2 rem
0003d3 38f9          .dw XT_TO_R
0003d4 394e          .dw XT_ZERO
0003d5 0806          .dw XT_QDOCHECK
0003d6 3830          .dw XT_DOCONDBRANCH
0003d7 03df          .dw PFA_SCOMMA2
0003d8 3a89          .dw XT_DODO
                 PFA_SCOMMA1:
0003d9 38ab          .dw XT_DUP         ; ( -- addr addr )
0003da 3873          .dw XT_FETCH       ; ( -- addr c1c2 )
0003db 0747          .dw XT_COMMA       ; ( -- addr )
0003dc 3c82          .dw XT_CELLPLUS    ; ( -- addr+cell )
0003dd 3ab7          .dw XT_DOLOOP
0003de 03d9          .dw PFA_SCOMMA1
                 PFA_SCOMMA2:
0003df 38f0          .dw XT_R_FROM
0003e0 3922          .dw XT_GREATERZERO
0003e1 3830          .dw XT_DOCONDBRANCH
0003e2 03e6          .dw PFA_SCOMMA3
0003e3 38ab            .dw XT_DUP     ; well, tricky
0003e4 3892            .dw XT_CFETCH
0003e5 0747            .dw XT_COMMA
                 PFA_SCOMMA3:
0003e6 38d3          .dw XT_DROP        ; ( -- )
0003e7 381a          .dw XT_EXIT
                 .include "words/itype.asm"
                 
                 ; Tools
                 ; reads string from flash and prints it
                 VE_ITYPE:
0003e8 ff05          .dw $ff05
0003e9 7469
0003ea 7079
0003eb 0065          .db "itype",0
0003ec 03c5          .dw VE_HEAD
                     .set VE_HEAD = VE_ITYPE
                 XT_ITYPE:
0003ed 3800          .dw DO_COLON
                 PFA_ITYPE:
0003ee 38ab          .dw XT_DUP    ; ( --addr len len)
0003ef 39fe          .dw XT_2SLASH ; ( -- addr len len/2
0003f0 3ec3          .dw XT_TUCK   ; ( -- addr len/2 len len/2
0003f1 3a05          .dw XT_2STAR  ; ( -- addr len/2 len len'
0003f2 398d          .dw XT_MINUS  ; ( -- addr len/2 rem
0003f3 38f9          .dw XT_TO_R
0003f4 394e          .dw XT_ZERO
0003f5 0806          .dw XT_QDOCHECK
0003f6 3830          .dw XT_DOCONDBRANCH
0003f7 0401          .dw PFA_ITYPE2
0003f8 3a89          .dw XT_DODO
                 PFA_ITYPE1:
0003f9 38ab          .dw XT_DUP         ; ( -- addr addr )
0003fa 3bba          .dw XT_FETCHI      ; ( -- addr c1c2 )
0003fb 38ab          .dw XT_DUP
0003fc 040e          .dw XT_LOWEMIT
0003fd 040a          .dw XT_HIEMIT
0003fe 3a29          .dw XT_1PLUS    ; ( -- addr+cell )
0003ff 3ab7          .dw XT_DOLOOP
000400 03f9          .dw PFA_ITYPE1
                 PFA_ITYPE2:
000401 38f0          .dw XT_R_FROM
000402 3922          .dw XT_GREATERZERO
000403 3830          .dw XT_DOCONDBRANCH
000404 0408          .dw PFA_ITYPE3
000405 38ab            .dw XT_DUP     ; make sure the drop below has always something to do
000406 3bba            .dw XT_FETCHI
000407 040e            .dw XT_LOWEMIT
                 PFA_ITYPE3:
000408 38d3          .dw XT_DROP
000409 381a          .dw XT_EXIT
                 
                 ; ( w -- )
                 ; R( -- )
                 ; content of cell fetched on stack.
                 ;VE_HIEMIT:
                 ;    .dw $ff06
                 ;    .db "hiemit"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_HIEMIT
                 XT_HIEMIT:
00040a 3800          .dw DO_COLON
                 PFA_HIEMIT:
00040b 3ae7          .dw XT_BYTESWAP
00040c 040e          .dw XT_LOWEMIT
00040d 381a          .dw XT_EXIT
                 
                 ; ( w -- )
                 ; R( -- )
                 ; content of cell fetched on stack.
                 ;VE_LOWEMIT:
                 ;    .dw $ff07
                 ;    .db "lowemit"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_LOWEMIT
                 XT_LOWEMIT:
00040e 3800          .dw DO_COLON
                 PFA_LOWEMIT:
00040f 3837          .dw XT_DOLITERAL
000410 00ff          .dw $00ff
000411 3a0d          .dw XT_AND
000412 3ee1          .dw XT_EMIT
000413 381a          .dw XT_EXIT
                 .include "words/icount.asm"
                 
                 ; Tools
                 ; get count information out of a counted string in flash
                 VE_ICOUNT:
000414 ff06          .dw $ff06
000415 6369
000416 756f
000417 746e          .db "icount"
000418 03e8          .dw VE_HEAD
                     .set VE_HEAD = VE_ICOUNT
                 XT_ICOUNT:
000419 3800          .dw DO_COLON
                 PFA_ICOUNT:
00041a 38ab          .dw XT_DUP
00041b 3a29          .dw XT_1PLUS
00041c 38be          .dw XT_SWAP
00041d 3bba          .dw XT_FETCHI
00041e 381a          .dw XT_EXIT
                 .include "words/type.asm"
                 
                 ; Character IO
                 ; print a RAM based string
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TYPE:
00041f ff04          .dw $ff04
000420 7974
000421 6570          .db "type"
000422 0414          .dw VE_HEAD
                     .set VE_HEAD = VE_TYPE
                 XT_TYPE:
000423 3800          .dw DO_COLON
                 PFA_TYPE:
                 
                 .endif
000424 3f89          .dw XT_BOUNDS
000425 0806          .dw XT_QDOCHECK
000426 3830          .dw XT_DOCONDBRANCH
000427 042e          DEST(PFA_TYPE2)
000428 3a89          .dw XT_DODO
                 PFA_TYPE1:
000429 3a9a          .dw XT_I
00042a 3892          .dw XT_CFETCH
00042b 3ee1          .dw XT_EMIT
00042c 3ab7          .dw XT_DOLOOP
00042d 0429          DEST(PFA_TYPE1)
                 PFA_TYPE2:
00042e 381a          .dw XT_EXIT
                 .include "words/tick.asm"
                 
                 ; Dictionary
                 ; search dictionary for name, return XT or throw an exception -13
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TICK:
00042f ff01          .dw $ff01
000430 0027          .db "'",0
000431 041f          .dw VE_HEAD
                     .set VE_HEAD = VE_TICK
                 XT_TICK:
000432 3800          .dw DO_COLON
                 PFA_TICK:
                 .endif
000433 059e          .dw XT_PARSENAME
000434 05e0          .dw XT_DORECOGNIZER
000435 0663          .dw XT_R_WORD
000436 3fd3          .dw XT_EQUAL
000437 3830          .dw XT_DOCONDBRANCH
000438 043b          DEST(PFA_TICK1)
000439 38d3          .dw XT_DROP
00043a 381a          .dw XT_EXIT
                 PFA_TICK1:
00043b 3837          .dw XT_DOLITERAL
00043c fff3          .dw -13
00043d 3d67          .dw XT_THROW
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/cskip.asm"
                 
                 ; String
                 ; skips leading occurancies in string at addr1/n1 leaving addr2/n2 pointing to the 1st non-c character
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_CSKIP:
00043e ff05          .dw $ff05
00043f 7363
000440 696b
000441 0070          .db "cskip",0
000442 042f          .dw VE_HEAD
                     .set VE_HEAD = VE_CSKIP
                 XT_CSKIP:
000443 3800          .dw DO_COLON
                 PFA_CSKIP:
                 .endif
000444 38f9          .dw XT_TO_R           ; ( -- addr1 n1 )
                 PFA_CSKIP1:
000445 38ab          .dw XT_DUP            ; ( -- addr' n' n' )
000446 3830          .dw XT_DOCONDBRANCH   ; ( -- addr' n')
000447 0453          DEST(PFA_CSKIP2)
000448 38c9          .dw XT_OVER           ; ( -- addr' n' addr' )
000449 3892          .dw XT_CFETCH         ; ( -- addr' n' c' )
00044a 3902          .dw XT_R_FETCH        ; ( -- addr' n' c' c )
00044b 3fd3          .dw XT_EQUAL          ; ( -- addr' n' f )
00044c 3830          .dw XT_DOCONDBRANCH   ; ( -- addr' n')
00044d 0453          DEST(PFA_CSKIP2)
00044e 3837          .dw XT_DOLITERAL
00044f 0001          .dw 1
000450 058f          .dw XT_SLASHSTRING
000451 3829          .dw XT_DOBRANCH
000452 0445          DEST(PFA_CSKIP1)
                 PFA_CSKIP2:
000453 38f0          .dw XT_R_FROM
000454 38d3          .dw XT_DROP           ; ( -- addr2 n2)
000455 381a          .dw XT_EXIT
                 .include "words/cscan.asm"
                 
                 ; String
                 ; Scan string at addr1/n1 for the first occurance of c, leaving addr1/n2, char at n2 is first non-c character
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_CSCAN:
000456 ff05          .dw $ff05
000457 7363
000458 6163
../../common\words/cscan.asm(12): warning: .cseg .db misalignment - padding zero byte
000459 006e          .db "cscan"
00045a 043e          .dw VE_HEAD
                     .set VE_HEAD = VE_CSCAN
                 XT_CSCAN:
00045b 3800          .dw DO_COLON
                 PFA_CSCAN:
                 .endif
00045c 38f9          .dw XT_TO_R
00045d 38c9          .dw XT_OVER
                 PFA_CSCAN1:
00045e 38ab          .dw XT_DUP
00045f 3892          .dw XT_CFETCH
000460 3902          .dw XT_R_FETCH
000461 3fd3          .dw XT_EQUAL
000462 3914          .dw XT_ZEROEQUAL
000463 3830          .dw XT_DOCONDBRANCH
000464 0470          DEST(PFA_CSCAN2)
000465 38be            .dw XT_SWAP
000466 3a2f            .dw XT_1MINUS
000467 38be            .dw XT_SWAP
000468 38c9            .dw XT_OVER
000469 391b            .dw XT_ZEROLESS ; not negative
00046a 3914            .dw XT_ZEROEQUAL
00046b 3830            .dw XT_DOCONDBRANCH
00046c 0470            DEST(PFA_CSCAN2)
00046d 3a29              .dw XT_1PLUS
00046e 3829              .dw XT_DOBRANCH
00046f 045e              DEST(PFA_CSCAN1)
                 PFA_CSCAN2:
000470 38ea          .dw XT_NIP
000471 38c9          .dw XT_OVER
000472 398d          .dw XT_MINUS
000473 38f0          .dw XT_R_FROM
000474 38d3          .dw XT_DROP
000475 381a          .dw XT_EXIT
                 
                 ; : my-cscan ( addr len c -- addr len' )
                 ;    >r over ( -- addr len addr )
                 ;    begin
                 ;      dup c@ r@ <> while
                 ;       swap 1- swap over 0 >=  while
                 ;        1+ 
                 ;     repeat then
                 ;     nip over - r> drop 
                 ; ;
                 .include "words/accept.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ACCEPT:
000476 ff06          .dw $ff06
000477 6361
000478 6563
000479 7470          .db "accept"
00047a 0456          .dw VE_HEAD
                     .set VE_HEAD = VE_ACCEPT
                 XT_ACCEPT:
00047b 3800          .dw DO_COLON
                 PFA_ACCEPT:
                 
                 .endif
00047c 38c9
00047d 3997
00047e 3a2f
00047f 38c9              .DW XT_OVER,XT_PLUS,XT_1MINUS,XT_OVER
000480 3ef2
000481 38ab
000482 04b5
000483 3914
000484 3830      ACC1:   .DW XT_KEY,XT_DUP,XT_CRLFQ,XT_ZEROEQUAL,XT_DOCONDBRANCH
000485 04a7              DEST(ACC5)
000486 38ab
000487 3837
000488 0008
000489 3fd3
00048a 3830              .DW XT_DUP,XT_DOLITERAL,8,XT_EQUAL,XT_DOCONDBRANCH
00048b 049e              DEST(ACC3)
00048c 38d3
00048d 38db
00048e 3eb2
00048f 3972
000490 38f9
000491 38db
000492 38db
000493 38f0
000494 3830              .DW XT_DROP,XT_ROT,XT_2DUP,XT_GREATER,XT_TO_R,XT_ROT,XT_ROT,XT_R_FROM,XT_DOCONDBRANCH
000495 049c      	DEST(ACC6)
000496 04ad
000497 3a2f
000498 38f9
000499 38c9
00049a 38f0
00049b 0113      	.DW XT_BS,XT_1MINUS,XT_TO_R,XT_OVER,XT_R_FROM,XT_UMAX
                 ACC6:
00049c 3829              .DW XT_DOBRANCH
00049d 04a5              DEST(ACC4)
00049e 38ab
00049f 3ee1
0004a0 38c9
0004a1 3887
0004a2 3a29
0004a3 38c9
0004a4 011f      ACC3:   .DW XT_DUP,XT_EMIT,XT_OVER,XT_CSTORE,XT_1PLUS,XT_OVER,XT_UMIN
0004a5 3829      ACC4:   .DW XT_DOBRANCH
0004a6 0480              DEST(ACC1)
0004a7 38d3
0004a8 38ea
0004a9 38be
0004aa 398d
0004ab 3f91
0004ac 381a      ACC5:   .DW XT_DROP,XT_NIP,XT_SWAP,XT_MINUS,XT_CR,XT_EXIT
                 
                 
                 ; ( --  ) 
                 ; System
                 ; send a backspace character to overwrite the current char
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 ;VE_BS:
                 ;    .dw $ff02
                 ;    .db "bs"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_BS
                 XT_BS:
0004ad 3800          .dw DO_COLON
                 .endif
0004ae 3837          .dw XT_DOLITERAL
0004af 0008          .dw 8
0004b0 38ab          .dw XT_DUP
0004b1 3ee1          .dw XT_EMIT
0004b2 3f9e          .dw XT_SPACE
0004b3 3ee1          .dw XT_EMIT
0004b4 381a          .dw XT_EXIT
                 
                 
                 ; ( c -- f ) 
                 ; System
                 ; is the character a line end character?
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 ;VE_CRLFQ:
                 ;    .dw $ff02
                 ;    .db "crlf?"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_CRLFQ
                 XT_CRLFQ:
0004b5 3800          .dw DO_COLON
                 .endif
0004b6 38ab          .dw XT_DUP
0004b7 3837          .dw XT_DOLITERAL
0004b8 000d          .dw 13
0004b9 3fd3          .dw XT_EQUAL
0004ba 38be          .dw XT_SWAP
0004bb 3837          .dw XT_DOLITERAL
0004bc 000a          .dw 10
0004bd 3fd3          .dw XT_EQUAL
0004be 3a16          .dw XT_OR
0004bf 381a          .dw XT_EXIT
                 .include "words/refill.asm"
                 
                 ; System
                 ; refills the input buffer
                 VE_REFILL:
0004c0 ff06          .dw $ff06
0004c1 6572
0004c2 6966
0004c3 6c6c          .db "refill"
0004c4 0476          .dw VE_HEAD
                     .set VE_HEAD = VE_REFILL
                 XT_REFILL:
0004c5 3de0          .dw PFA_DODEFER1
                 PFA_REFILL:
0004c6 001a          .dw USER_REFILL
0004c7 3da9          .dw XT_UDEFERFETCH
0004c8 3db5          .dw XT_UDEFERSTORE
                 
                 .include "words/char.asm"
                 
                 ; Tools
                 ; copy the first character of the next word onto the stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_CHAR:
0004c9 ff04          .dw $ff04
0004ca 6863
0004cb 7261          .db "char"
0004cc 04c0          .dw VE_HEAD
                     .set VE_HEAD = VE_CHAR
                 XT_CHAR:
0004cd 3800          .dw DO_COLON
                 PFA_CHAR:
                 .endif
0004ce 059e          .dw XT_PARSENAME
0004cf 38d3          .dw XT_DROP
0004d0 3892          .dw XT_CFETCH
0004d1 381a          .dw XT_EXIT
                 .include "words/number.asm"
                 
                 ; Numeric IO
                 ; convert a string at addr to a number
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_NUMBER:
0004d2 ff06          .dw $ff06
0004d3 756e
0004d4 626d
0004d5 7265          .db "number"
0004d6 04c9          .dw VE_HEAD
                     .set VE_HEAD = VE_NUMBER
                 XT_NUMBER:
0004d7 3800          .dw DO_COLON
                 PFA_NUMBER:
                 .endif
0004d8 3ea6          .dw XT_BASE
0004d9 3873          .dw XT_FETCH
0004da 38f9          .dw XT_TO_R
0004db 051e          .dw XT_QSIGN
0004dc 38f9          .dw XT_TO_R
0004dd 0532          .dw XT_SET_BASE
0004de 051e          .dw XT_QSIGN
0004df 38f0          .dw XT_R_FROM
0004e0 3a16          .dw XT_OR
0004e1 38f9          .dw XT_TO_R
                     ; check whether something is left
0004e2 38ab          .dw XT_DUP
0004e3 3914          .dw XT_ZEROEQUAL
0004e4 3830          .dw XT_DOCONDBRANCH
0004e5 04ee          DEST(PFA_NUMBER0)
                       ; nothing is left. It cannot be a number at all
0004e6 3ebb            .dw XT_2DROP
0004e7 38f0            .dw XT_R_FROM
0004e8 38d3            .dw XT_DROP
0004e9 38f0            .dw XT_R_FROM
0004ea 3ea6            .dw XT_BASE
0004eb 387b            .dw XT_STORE
0004ec 394e            .dw XT_ZERO
0004ed 381a            .dw XT_EXIT
                 PFA_NUMBER0:
0004ee 3b0c          .dw XT_2TO_R
0004ef 394e          .dw XT_ZERO       ; starting value
0004f0 394e          .dw XT_ZERO
0004f1 3b1b          .dw XT_2R_FROM
0004f2 0551          .dw XT_TO_NUMBER ; ( 0. addr len -- d addr' len'
                     ; check length of the remaining string.
                     ; if zero: a single cell number is entered
0004f3 38b3          .dw XT_QDUP
0004f4 3830          .dw XT_DOCONDBRANCH
0004f5 0512          DEST(PFA_NUMBER1)
                     ; if equal 1: mayba a trailing dot? --> double cell number
0004f6 3837          .dw XT_DOLITERAL
0004f7 0001          .dw 1
0004f8 3fd3          .dw XT_EQUAL
0004f9 3830          .dw XT_DOCONDBRANCH
0004fa 0509          DEST(PFA_NUMBER2)
                 	; excatly one character is left
0004fb 3892      	.dw XT_CFETCH
0004fc 3837      	.dw XT_DOLITERAL
0004fd 002e      	.dw 46 ; .
0004fe 3fd3      	.dw XT_EQUAL
0004ff 3830      	.dw XT_DOCONDBRANCH
000500 050a      	DEST(PFA_NUMBER6)
                 	; its a double cell number
                         ; incorporate sign into number
000501 38f0      	.dw XT_R_FROM
000502 3830              .dw XT_DOCONDBRANCH
000503 0505      	DEST(PFA_NUMBER3)
000504 0221              .dw XT_DNEGATE
                 PFA_NUMBER3:
000505 3837      	.dw XT_DOLITERAL
000506 0002      	.dw 2
000507 3829      	.dw XT_DOBRANCH
000508 0519      	DEST(PFA_NUMBER5)
                 PFA_NUMBER2:
000509 38d3      	.dw XT_DROP
                 PFA_NUMBER6:
00050a 3ebb      	.dw XT_2DROP
00050b 38f0      	.dw XT_R_FROM
00050c 38d3      	.dw XT_DROP
00050d 38f0              .dw XT_R_FROM
00050e 3ea6              .dw XT_BASE
00050f 387b              .dw XT_STORE
000510 394e      	.dw XT_ZERO
000511 381a      	.dw XT_EXIT
                 PFA_NUMBER1:
000512 3ebb          .dw XT_2DROP ; remove the address
                     ; incorporate sign into number
000513 38f0          .dw XT_R_FROM
000514 3830          .dw XT_DOCONDBRANCH
000515 0517          DEST(PFA_NUMBER4)
000516 3e10          .dw XT_NEGATE
                 PFA_NUMBER4:
000517 3837          .dw XT_DOLITERAL
000518 0001          .dw 1
                 PFA_NUMBER5:
000519 38f0          .dw XT_R_FROM
00051a 3ea6          .dw XT_BASE
00051b 387b          .dw XT_STORE
00051c 3945          .dw XT_TRUE
00051d 381a          .dw XT_EXIT
                 .include "words/q-sign.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_QSIGN:
00051e 3800          .dw DO_COLON 
                 PFA_QSIGN:        ; ( c -- ) 
                 .endif
00051f 38c9          .dw XT_OVER    ; ( -- addr len addr )
000520 3892          .dw XT_CFETCH
000521 3837          .dw XT_DOLITERAL
000522 002d          .dw '-'
000523 3fd3          .dw XT_EQUAL  ; ( -- addr len flag )
000524 38ab          .dw XT_DUP
000525 38f9          .dw XT_TO_R
000526 3830          .dw XT_DOCONDBRANCH
000527 052b          DEST(PFA_NUMBERSIGN_DONE)
000528 3837          .dw XT_DOLITERAL      ; skip sign character
000529 0001          .dw 1
00052a 058f          .dw XT_SLASHSTRING
                 PFA_NUMBERSIGN_DONE:
00052b 38f0          .dw XT_R_FROM
00052c 381a          .dw XT_EXIT
                 .include "words/set-base.asm"
                 
                 ; Numeric IO
                 ; skip a numeric prefix character
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_BASES:
00052d 384c          .dw PFA_DOCONSTANT
                 .endif
00052e 000a
00052f 0010
000530 0002
000531 000a          .dw 10,16,2,10 ; last one could a 8 instead.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_SET_BASE:
000532 3800          .dw DO_COLON 
                 PFA_SET_BASE:        ; ( adr1 len1 -- adr2 len2 ) 
                 .endif
000533 38c9          .dw XT_OVER
000534 3892          .dw XT_CFETCH
000535 3837          .dw XT_DOLITERAL
000536 0023          .dw 35
000537 398d          .dw XT_MINUS
000538 38ab          .dw XT_DUP
000539 394e          .dw XT_ZERO
00053a 3837          .dw XT_DOLITERAL
00053b 0004          .dw 4
00053c 3e40          .dw XT_WITHIN
00053d 3830          .dw XT_DOCONDBRANCH
00053e 0549          DEST(SET_BASE1)
                 	.if cpu_msp430==1
                 	.endif
00053f 052d      	.dw XT_BASES
000540 3997      	.dw XT_PLUS
000541 3bba      	.dw XT_FETCHI
000542 3ea6      	.dw XT_BASE
000543 387b      	.dw XT_STORE
000544 3837      	.dw XT_DOLITERAL
000545 0001      	.dw 1
000546 058f      	.dw XT_SLASHSTRING
000547 3829      	.dw XT_DOBRANCH
000548 054a      	DEST(SET_BASE2)
                 SET_BASE1:
000549 38d3      	.dw XT_DROP
                 SET_BASE2:
00054a 381a          .dw XT_EXIT 
                 
                 ; create bases 10 , 16 , 2 , 8 ,
                 ; : set-base 35 - dup 0 4 within if 
                 ;    bases + @i base ! 1 /string 
                 ;   else 
                 ;    drop
                 ;   then ;
                 .include "words/to-number.asm"
                 
                 ; Numeric IO
                 ; convert a string to a number  c-addr2/u2 is the unconverted string
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TO_NUMBER:
00054b ff07          .dw $ff07
00054c 6e3e
00054d 6d75
00054e 6562
00054f 0072          .db ">number",0
000550 04d2          .dw VE_HEAD
                     .set VE_HEAD = VE_TO_NUMBER
                 XT_TO_NUMBER:
000551 3800          .dw DO_COLON
                 
                 .endif
                 
000552 38ab
000553 3830      TONUM1: .DW XT_DUP,XT_DOCONDBRANCH
000554 056a              DEST(TONUM3)
000555 38c9
000556 3892
000557 03a0              .DW XT_OVER,XT_CFETCH,XT_DIGITQ
000558 3914
000559 3830              .DW XT_ZEROEQUAL,XT_DOCONDBRANCH
00055a 055d              DEST(TONUM2)
00055b 38d3
00055c 381a              .DW XT_DROP,XT_EXIT
00055d 38f9
00055e 0246
00055f 3ea6
000560 3873
000561 0104      TONUM2: .DW XT_TO_R,XT_2SWAP,XT_BASE,XT_FETCH,XT_UDSTAR
000562 38f0
000563 00fc
000564 0246              .DW XT_R_FROM,XT_MPLUS,XT_2SWAP
000565 3837
000566 0001
000567 058f
000568 3829              .DW XT_DOLITERAL,1,XT_SLASHSTRING,XT_DOBRANCH
000569 0552              DEST(TONUM1)
00056a 381a      TONUM3: .DW XT_EXIT
                 
                 ;C >NUMBER  ud adr u -- ud' adr' u'
                 ;C                      convert string to number
                 ;   BEGIN
                 ;   DUP WHILE
                 ;       OVER C@ DIGIT?
                 ;       0= IF DROP EXIT THEN
                 ;       >R 2SWAP BASE @ UD*
                 ;       R> M+ 2SWAP
                 ;       1 /STRING
                 ;   REPEAT ;
                 .include "words/parse.asm"
                 
                 ; String
                 ; in input buffer parse ccc delimited string by the delimiter char.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_PARSE:
00056b ff05          .dw $ff05
00056c 6170
00056d 7372
00056e 0065          .db "parse",0
00056f 054b          .dw VE_HEAD
                     .set VE_HEAD = VE_PARSE
                 XT_PARSE:
000570 3800          .dw DO_COLON
                 PFA_PARSE:
                 .endif
000571 38f9          .dw XT_TO_R     ; ( -- )
000572 0585          .dw XT_SOURCE   ; ( -- addr len)
000573 3ecb          .dw XT_TO_IN     ; ( -- addr len >in)
000574 3873          .dw XT_FETCH
000575 058f          .dw XT_SLASHSTRING ; ( -- addr' len' )
                 
000576 38f0          .dw XT_R_FROM      ; ( -- addr' len' c)
000577 045b          .dw XT_CSCAN       ; ( -- addr' len'')
000578 38ab          .dw XT_DUP         ; ( -- addr' len'' len'')
000579 3a29          .dw XT_1PLUS
00057a 3ecb          .dw XT_TO_IN        ; ( -- addr' len'' len'' >in)
00057b 3a53          .dw XT_PLUSSTORE   ; ( -- addr' len')
00057c 3837          .dw XT_DOLITERAL
00057d 0001          .dw 1
00057e 058f          .dw XT_SLASHSTRING
00057f 381a          .dw XT_EXIT
                 .include "words/source.asm"
                 
                 ; System
                 ; address and current length of the input buffer
                 VE_SOURCE:
000580 ff06          .dw $FF06
000581 6f73
000582 7275
000583 6563          .db "source"
000584 056b          .dw VE_HEAD
                     .set VE_HEAD = VE_SOURCE
                 XT_SOURCE:
000585 3de0          .dw PFA_DODEFER1
                 PFA_SOURCE:
000586 0016          .dw USER_SOURCE
000587 3da9          .dw XT_UDEFERFETCH
000588 3db5          .dw XT_UDEFERSTORE
                 
                 
                 .include "words/slash-string.asm"
                 
                 ; String
                 ; adjust string from addr1 to addr1+n, reduce length from u1 to u2 by n
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SLASHSTRING:
000589 ff07          .dw $ff07
00058a 732f
00058b 7274
00058c 6e69
00058d 0067          .db "/string",0
00058e 0580          .dw VE_HEAD
                     .set VE_HEAD = VE_SLASHSTRING
                 XT_SLASHSTRING:
00058f 3800          .dw DO_COLON
                 PFA_SLASHSTRING:
                 .endif
000590 38db          .dw XT_ROT
000591 38c9          .dw XT_OVER
000592 3997          .dw XT_PLUS
000593 38db          .dw XT_ROT
000594 38db          .dw XT_ROT
000595 398d          .dw XT_MINUS
000596 381a          .dw XT_EXIT
                 
                 .include "words/parse-name.asm"
                 
                 ; String
                 ; In the SOURCE buffer parse whitespace delimited string. Returns string address within SOURCE.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 VE_PARSENAME:
000597 ff0a          .dw $FF0A 
000598 6170
000599 7372
00059a 2d65
00059b 616e
00059c 656d          .db "parse-name"
00059d 0589          .dw VE_HEAD
                     .set VE_HEAD = VE_PARSENAME
                 XT_PARSENAME:
00059e 3800          .dw DO_COLON 
                 PFA_PARSENAME:
                 .endif
00059f 3f44          .dw XT_BL
0005a0 05a2          .dw XT_SKIPSCANCHAR
0005a1 381a          .dw XT_EXIT 
                 
                 ; ( c -- addr2 len2 ) 
                 ; String
                 ; skips char and scan what's left in source for char
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 ;VE_SKIPSCANCHAR:
                 ;    .dw $FF0A 
                 ;    .db "skipscanchar"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_SKIPSCANCHAR
                 XT_SKIPSCANCHAR:
0005a2 3800          .dw DO_COLON
                 PFA_SKIPSCANCHAR:
                 .endif
0005a3 38f9          .dw XT_TO_R
0005a4 0585          .dw XT_SOURCE 
0005a5 3ecb          .dw XT_TO_IN 
0005a6 3873          .dw XT_FETCH 
0005a7 058f          .dw XT_SLASHSTRING 
                 
0005a8 3902          .dw XT_R_FETCH
0005a9 0443          .dw XT_CSKIP
0005aa 38f0          .dw XT_R_FROM
0005ab 045b          .dw XT_CSCAN
                 
                     ; adjust >IN
0005ac 3eb2          .dw XT_2DUP
0005ad 3997          .dw XT_PLUS
0005ae 0585          .dw XT_SOURCE 
0005af 38d3          .dw XT_DROP
0005b0 398d          .dw XT_MINUS
0005b1 3ecb          .dw XT_TO_IN
0005b2 387b          .dw XT_STORE
0005b3 381a          .dw XT_EXIT
                 .include "words/sp0.asm"
                 
                 ; Stack
                 ; start address of the data stack
                 VE_SP0:
0005b4 ff03          .dw $ff03
0005b5 7073
0005b6 0030          .db "sp0",0
0005b7 0597          .dw VE_HEAD
                     .set VE_HEAD = VE_SP0
                 XT_SP0:
0005b8 3869          .dw PFA_DOVALUE1
                 PFA_SP0:
0005b9 0006          .dw USER_SP0
0005ba 3da9          .dw XT_UDEFERFETCH
0005bb 3db5          .dw XT_UDEFERSTORE
                 
                 ; ( -- addr) 
                 ; Stack
                 ; address of user variable to store top-of-stack for inactive tasks
                 VE_SP:
0005bc ff02          .dw $ff02
0005bd 7073          .db "sp"
0005be 05b4          .dw VE_HEAD
                     .set VE_HEAD = VE_SP
                 XT_SP:
0005bf 3852          .dw PFA_DOUSER
                 PFA_SP:
0005c0 0008          .dw USER_SP
                 .include "words/rp0.asm"
                 
                 ; Stack
                 ; start address of return stack
                 VE_RP0:
0005c1 ff03          .dw $ff03
0005c2 7072
0005c3 0030          .db "rp0",0
0005c4 05bc          .dw VE_HEAD
                     .set VE_HEAD = VE_RP0
                 XT_RP0:
0005c5 3800          .dw DO_COLON
                 PFA_RP0:
0005c6 05c9          .dw XT_DORP0
0005c7 3873          .dw XT_FETCH
0005c8 381a          .dw XT_EXIT
                 
                 ; ( -- addr) 
                 ; Stack
                 ; user variable of the address of the initial return stack
                 ;VE_DORP0:
                 ;    .dw $ff05
                 ;    .db "(rp0)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DORP0
                 XT_DORP0:
0005c9 3852          .dw PFA_DOUSER
                 PFA_DORP0:
0005ca 0004          .dw USER_RP
                 .include "words/depth.asm"
                 
                 ; Stack
                 ; number of single-cell values contained in the data stack before n was placed on the stack.
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DEPTH:
0005cb ff05          .dw $ff05
0005cc 6564
0005cd 7470
0005ce 0068          .db "depth",0
0005cf 05c1          .dw VE_HEAD
                     .set VE_HEAD = VE_DEPTH
                 XT_DEPTH:
0005d0 3800          .dw DO_COLON
                 PFA_DEPTH:
                 .endif
0005d1 05b8          .dw XT_SP0
0005d2 3a7b          .dw XT_SP_FETCH
0005d3 398d          .dw XT_MINUS
0005d4 39fe          .dw XT_2SLASH
0005d5 3a2f          .dw XT_1MINUS
0005d6 381a          .dw XT_EXIT
                 .include "words/do-recognizer.asm"
                 
                 ; System
                 ; walk the recognizer stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DORECOGNIZER:
0005d7 ff0d          .dw $ff0d
0005d8 6f64
0005d9 722d
0005da 6365
0005db 676f
0005dc 696e
0005dd 657a
0005de 0072          .db "do-recognizer",0
0005df 05cb          .dw VE_HEAD
                     .set VE_HEAD = VE_DORECOGNIZER
                 XT_DORECOGNIZER:
0005e0 3800          .dw DO_COLON
                 PFA_DORECOGNIZER:
                 .endif
0005e1 3837          .dw XT_DOLITERAL
0005e2 05ec          .dw XT_DORECOGNIZER_A
0005e3 3837          .dw XT_DOLITERAL
0005e4 007c          .dw CFG_RECOGNIZERLISTLEN
0005e5 0990          .dw XT_MAPSTACK
0005e6 3914          .dw XT_ZEROEQUAL
0005e7 3830          .dw XT_DOCONDBRANCH
0005e8 05eb          DEST(PFA_DORECOGNIZER1)
0005e9 3ebb            .dw XT_2DROP
0005ea 0680            .dw XT_R_FAIL
                 PFA_DORECOGNIZER1:
0005eb 381a          .dw XT_EXIT
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 ; ( addr len XT -- addr len [ r:table -1 | 0 ] )
                 XT_DORECOGNIZER_A:
0005ec 3800         .dw DO_COLON
                 PFA_DORECOGNIZER_A:
                 .endif
0005ed 38db         .dw XT_ROT  ; -- len xt addr
0005ee 38db         .dw XT_ROT  ; -- xt addr len
0005ef 3eb2         .dw XT_2DUP 
0005f0 3b0c         .dw XT_2TO_R
0005f1 38db         .dw XT_ROT  ; -- addr len xt
0005f2 3824         .dw XT_EXECUTE ; -- i*x r:foo | r:fail
0005f3 3b1b         .dw XT_2R_FROM
0005f4 38db         .dw XT_ROT
0005f5 38ab         .dw XT_DUP
0005f6 0680         .dw XT_R_FAIL
0005f7 3fd3         .dw XT_EQUAL
0005f8 3830         .dw XT_DOCONDBRANCH
0005f9 05fd         DEST(PFA_DORECOGNIZER_A1)
0005fa 38d3           .dw XT_DROP
0005fb 394e           .dw XT_ZERO
0005fc 381a           .dw XT_EXIT
                 PFA_DORECOGNIZER_A1:
0005fd 38ea         .dw XT_NIP 
0005fe 38ea         .dw XT_NIP
0005ff 3945         .dw XT_TRUE
000600 381a         .dw XT_EXIT
                 
                 ; : do-recognizer ( addr len -- i*x r:table|r:fail )
                 ;    \ ( addr len -- addr len 0 | i*x r:table -1 )
                 ;    [: rot rot 2dup 2>r rot execute 2r> rot 
                 ;          dup r:fail = ( -- addr len r:table f )
                 ;          if drop 0 else nip nip -1 then
                 ;    ;] 
                 ;    EE_RECOGNIZERLISTLEN map-stack ( -- i*x addr len r:table f )
                 ;    0= if \ a recognizer did the job, remove addr/len
                 ;     2drop r:fail 
                 ;    then
                 ;
                 .include "words/interpret.asm"
                 
                 ; System
                 ; Interpret SOURCE word by word.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_INTERPRET:
000601 ff09          .dw $ff09
000602 6e69
000603 6574
000604 7072
000605 6572
000606 0074          .db "interpret",0
000607 05d7          .dw VE_HEAD
                     .set VE_HEAD = VE_INTERPRET
                 XT_INTERPRET:
000608 3800          .dw DO_COLON
                 .endif
                 PFA_INTERPRET:
000609 059e          .dw XT_PARSENAME ; ( -- addr len )
00060a 38ab          .dw XT_DUP   ; ( -- addr len flag)
00060b 3830          .dw XT_DOCONDBRANCH
00060c 0618          DEST(PFA_INTERPRET2)
00060d 05e0            .dw XT_DORECOGNIZER
00060e 3ea0            .dw XT_STATE
00060f 3873            .dw XT_FETCH
000610 3830            .dw XT_DOCONDBRANCH
000611 0613          DEST(PFA_INTERPRET1)
000612 01ae            .dw XT_ICELLPLUS   ; we need the compile action
                 PFA_INTERPRET1:
000613 3bba            .dw XT_FETCHI
000614 3824            .dw XT_EXECUTE
000615 3f7b            .dw XT_QSTACK
000616 3829          .dw XT_DOBRANCH
000617 0609          DEST(PFA_INTERPRET)
                 PFA_INTERPRET2:
000618 3ebb          .dw XT_2DROP
000619 381a          .dw XT_EXIT
                 .include "words/r-intnumber.asm"
                 
                 ; Interpreter
                 ; Method table for single cell integers
                 
                 
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_R_NUM:
00061a ff05          .dw $ff05
00061b 3a72
00061c 756e
00061d 006d          .db "r:num",0
00061e 0601          .dw VE_HEAD
                     .set VE_HEAD = VE_R_NUM
                 XT_R_NUM:
00061f 384c          .dw PFA_DOCONSTANT
                 PFA_R_NUM:
                 .endif
000620 0181          .dw XT_NOOP    ; interpret
000621 075d          .dw XT_LITERAL ; compile
000622 062c          .dw XT_FAILNUM ; postpone
                 
                 ; ( -- addr )
                 ; Interpreter
                 ; Method table for double cell integers
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_R_DNUM:
000623 ff06          .dw $ff06
000624 3a72
000625 6e64
000626 6d75          .db "r:dnum"
000627 061a          .dw VE_HEAD
                     .set VE_HEAD = VE_R_DNUM
                 XT_R_DNUM:
000628 384c          .dw PFA_DOCONSTANT
                 PFA_R_DNUM:
                 .endif
000629 0181          .dw XT_NOOP     ; interpret
00062a 3fc7          .dw XT_2LITERAL ; compile
00062b 0632          .dw XT_FAILDNUM ; postpone
                 
                 ; ( -- addr )
                 ; Interpreter
                 ; Method to print a number and throw exception "invalid postpone"
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 ;VE_FAILNUM:
                 ;    .dw $ff06
                 ;    .db "fail:i"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_FAILNUM
                 XT_FAILNUM:
00062c 3800          .dw DO_COLON
                 PFA_FAILNUM:
                 .endif
00062d 036f          .dw XT_DOT
00062e 3837          .dw XT_DOLITERAL
00062f ffd0          .dw -48
000630 3d67          .dw XT_THROW
000631 381a          .dw XT_EXIT
                 
                 ; ( -- addr )
                 ; Interpreter
                 ; Method to print a double cell number and throw exception "invalid postpone"
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 VE_FAILDNUM:
                 ;    .dw $ff06
                 ;    .db "fail:d"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_FAILDNUM
                 XT_FAILDNUM:
000632 3800          .dw DO_COLON
                 PFA_FAILDNUM:
                 .endif
000633 0367          .dw XT_DDOT
000634 3837          .dw XT_DOLITERAL
000635 ffd0          .dw -48
000636 3d67          .dw XT_THROW
000637 381a          .dw XT_EXIT
                 
                 ; ( addr len -- f )
                 ; Interpreter
                 ; recognizer for integer numbers
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 VE_REC_NUM:
000638 ff07          .dw $ff07
000639 6572
00063a 3a63
00063b 756e
00063c 006d          .db "rec:num",0
00063d 0623          .dw VE_HEAD
                     .set VE_HEAD = VE_REC_NUM
                 XT_REC_NUM:
00063e 3800          .dw DO_COLON
                 PFA_REC_NUM:
                 .endif
                     ; try converting to a number
00063f 04d7          .dw XT_NUMBER
000640 3830          .dw XT_DOCONDBRANCH
000641 064b          DEST(PFA_REC_NONUMBER)
000642 3837          .dw XT_DOLITERAL
000643 0001          .dw 1
000644 3fd3          .dw XT_EQUAL
000645 3830          .dw XT_DOCONDBRANCH
000646 0649          DEST(PFA_REC_INTNUM2)
000647 061f            .dw XT_R_NUM
000648 381a            .dw XT_EXIT
                 PFA_REC_INTNUM2:
000649 0628            .dw XT_R_DNUM
00064a 381a            .dw XT_EXIT
                 PFA_REC_NONUMBER:
00064b 0680          .dw XT_R_FAIL
00064c 381a          .dw XT_EXIT
                 .include "words/r-word.asm"
                 
                 ; Interpreter
                 ; search for a word
                 .if cpu_msp430==1
                 .endif
                 .if cpu_avr8==1
                 VE_REC_WORD:
00064d ff08          .dw $ff08
00064e 6572
00064f 3a63
000650 6f77
000651 6472          .db "rec:word"
000652 0638          .dw VE_HEAD
                     .set VE_HEAD = VE_REC_WORD
                 XT_REC_WORD:
000653 3800          .dw DO_COLON
                 PFA_REC_WORD:
                 .endif
000654 06f6          .DW XT_FINDNAME
000655 38ab          .dw XT_DUP
000656 3914          .dw XT_ZEROEQUAL
000657 3830          .dw XT_DOCONDBRANCH
000658 065c          DEST(PFA_REC_WORD_FOUND)
000659 38d3              .dw XT_DROP
00065a 0680      	.dw XT_R_FAIL
00065b 381a      	.dw XT_EXIT
                 PFA_REC_WORD_FOUND:
00065c 0663          .dw XT_R_WORD
                 
00065d 381a          .dw XT_EXIT
                 
                 ; ( -- addr )
                 ; Interpreter
                 ; actions to handle execution tokens and their flags
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_R_WORD:
00065e ff06          .dw $ff06
00065f 3a72
000660 6f77
000661 6472          .db "r:word"
000662 064d          .dw VE_HEAD
                     .set VE_HEAD = VE_R_WORD
                 XT_R_WORD:
000663 384c          .dw PFA_DOCONSTANT
                 PFA_R_WORD:
                 .endif
000664 0667          .dw XT_R_WORD_INTERPRET
000665 066b          .dw XT_R_WORD_COMPILE
000666 0673          .dw XT_R_WORD_POSTPONE
                 
                 ; ( XT flags -- )
                 ; Interpreter
                 ; interpret method for WORD recognizer
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_R_WORD_INTERPRET:
000667 3800          .dw DO_COLON
                 PFA_R_WORD_INTERPRET:
                 .endif
000668 38d3          .dw XT_DROP ; the flags are in the way
000669 3824          .dw XT_EXECUTE
00066a 381a          .dw XT_EXIT
                 
                 ; ( XT flags -- )
                 ; Interpreter
                 ; Compile method for WORD recognizer
                 .if cpu_msp430==1
                 .endif
                 .if cpu_avr8==1
                 XT_R_WORD_COMPILE:
00066b 3800          .dw DO_COLON
                 PFA_R_WORD_COMPILE:
                 .endif
00066c 391b          .dw XT_ZEROLESS
00066d 3830          .dw XT_DOCONDBRANCH
00066e 0671          DEST(PFA_R_WORD_COMPILE1)
00066f 0747      	.dw XT_COMMA
000670 381a              .dw XT_EXIT
                 PFA_R_WORD_COMPILE1:
000671 3824              .dw XT_EXECUTE
000672 381a          .dw XT_EXIT
                 
                 ; ( XT flags -- )
                 ; Interpreter
                 ; Postpone method for WORD recognizer
                 .if cpu_msp430==1
                 .endif
                 .if cpu_avr8==1
                 XT_R_WORD_POSTPONE:
000673 3800          .dw DO_COLON
                 PFA_R_WORD_POSTPONE:
                 .endif
000674 391b          .dw XT_ZEROLESS
000675 3830          .dw XT_DOCONDBRANCH
000676 0679          DEST(PFA_R_WORD_POSTPONE1)
000677 073c            .dw XT_COMPILE
000678 073c            .dw XT_COMPILE
                 PFA_R_WORD_POSTPONE1:
000679 0747          .dw XT_COMMA
00067a 381a          .dw XT_EXIT
                 .include "words/r-fail.asm"
                 
                 ; Interpreter
                 ; there is no parser for this recognizer, this is the default and failsafe part
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_R_FAIL:
00067b ff06          .dw $ff06
00067c 3a72
00067d 6166
00067e 6c69          .db "r:fail"
00067f 065e          .dw VE_HEAD
                     .set VE_HEAD = VE_R_FAIL
                 XT_R_FAIL:
000680 384c          .dw PFA_DOCONSTANT
                 PFA_R_FAIL:
                 .endif
000681 0684          .dw XT_FAIL  ; interpret
000682 0684          .dw XT_FAIL  ; compile
000683 0684          .dw XT_FAIL  ; postpone
                 
                 ; ( addr len -- )
                 ; Interpreter
                 ; default failure action: throw exception -13.
                 .if cpu_msp430==1
                 .endif
                 .if cpu_avr8==1
                 ;VE_FAIL:
                 ;    .dw $ff04
                 ;    .db "fail"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_FAIL
                 XT_FAIL:
000684 3800          .dw DO_COLON
                 PFA_FAIL:
                 .endif
000685 3837          .dw XT_DOLITERAL
000686 fff3          .dw -13
000687 3d67          .dw XT_THROW
                 .include "words/search-wordlist.asm"
                 
                 ; Search Order
                 ; searches the word list wid for the word at c-addr/len
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SEARCH_WORDLIST:
000688 ff0f          .dw $ff0f
000689 6573
00068a 7261
00068b 6863
00068c 772d
00068d 726f
00068e 6c64
00068f 7369
000690 0074          .db "search-wordlist",0
000691 067b          .dw VE_HEAD
                     .set VE_HEAD = VE_SEARCH_WORDLIST
                 XT_SEARCH_WORDLIST:
000692 3800          .dw DO_COLON
                 PFA_SEARCH_WORDLIST:
                 .endif
000693 38f9          .dw XT_TO_R
000694 394e          .dw XT_ZERO
000695 3837          .dw XT_DOLITERAL
000696 06a7          .dw XT_ISWORD
000697 38f0          .dw XT_R_FROM
000698 06c4          .dw XT_TRAVERSEWORDLIST
000699 38ab          .dw XT_DUP
00069a 3914          .dw XT_ZEROEQUAL
00069b 3830          .dw XT_DOCONDBRANCH
00069c 06a1          DEST(PFA_SEARCH_WORDLIST1)
00069d 3ebb             .dw XT_2DROP
00069e 38d3             .dw XT_DROP
00069f 394e             .dw XT_ZERO
0006a0 381a             .dw XT_EXIT
                 PFA_SEARCH_WORDLIST1:
                       ; ... get the XT ...
0006a1 38ab            .dw XT_DUP
0006a2 06eb            .dw XT_NFA2CFA
                       ; .. and get the header flag
0006a3 38be            .dw XT_SWAP
0006a4 013a            .dw XT_NAME2FLAGS
0006a5 0127            .dw XT_IMMEDIATEQ
0006a6 381a          .dw XT_EXIT
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_ISWORD:
0006a7 3800          .dw DO_COLON
                 PFA_ISWORD:
                 .endif
                     ; ( c-addr len 0 nt -- c-addr len 0 true| nt false )
0006a8 38f9          .dw XT_TO_R
0006a9 38d3          .dw XT_DROP
0006aa 3eb2          .dw XT_2DUP
0006ab 3902          .dw XT_R_FETCH  ; -- addr len addr len nt
0006ac 06df          .dw XT_NAME2STRING
0006ad 01b7          .dw XT_ICOMPARE      ; (-- addr len f )
0006ae 3830          .dw XT_DOCONDBRANCH
0006af 06b5          DEST(PFA_ISWORD3)
                       ; not now
0006b0 38f0            .dw XT_R_FROM
0006b1 38d3            .dw XT_DROP
0006b2 394e            .dw XT_ZERO
0006b3 3945            .dw XT_TRUE         ; maybe next word
0006b4 381a            .dw XT_EXIT
                 PFA_ISWORD3:
                       ; we found the word, now clean up iteration data ...
0006b5 3ebb            .dw XT_2DROP
0006b6 38f0            .dw XT_R_FROM
0006b7 394e            .dw XT_ZERO       ; finish traverse-wordlist
0006b8 381a            .dw XT_EXIT
                 .include "words/traverse-wordlist.asm"
                 
                 ; Tools Ext (2012)
                 ; call the xt for every member of the wordlist wid until xt returns false
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TRAVERSEWORDLIST:
0006b9 ff11          .dw $ff11
0006ba 7274
0006bb 7661
0006bc 7265
0006bd 6573
0006be 772d
0006bf 726f
0006c0 6c64
0006c1 7369
0006c2 0074          .db "traverse-wordlist",0
0006c3 0688          .dw VE_HEAD
                     .set VE_HEAD = VE_TRAVERSEWORDLIST
                 XT_TRAVERSEWORDLIST:
0006c4 3800          .dw DO_COLON
                 PFA_TRAVERSEWORDLIST:
                 
                 .endif
0006c5 3b4d          .dw XT_FETCHE
                 PFA_TRAVERSEWORDLIST1:
0006c6 38ab          .dw XT_DUP           ; ( -- xt nt nt )
0006c7 3830          .dw XT_DOCONDBRANCH  ; ( -- nt ) is nfa = counted string
0006c8 06d5          DEST(PFA_TRAVERSEWORDLIST2)
0006c9 3eb2          .dw XT_2DUP
0006ca 3b0c          .dw XT_2TO_R
0006cb 38be          .dw XT_SWAP
0006cc 3824          .dw XT_EXECUTE
0006cd 3b1b          .dw XT_2R_FROM
0006ce 38db          .dw XT_ROT
0006cf 3830          .dw XT_DOCONDBRANCH
0006d0 06d5          DEST(PFA_TRAVERSEWORDLIST2)
0006d1 09f7          .dw XT_NFA2LFA
0006d2 3bba          .dw XT_FETCHI
0006d3 3829          .dw XT_DOBRANCH      ; ( -- addr )
0006d4 06c6          DEST(PFA_TRAVERSEWORDLIST1)       ; ( -- addr )
                 PFA_TRAVERSEWORDLIST2:
0006d5 3ebb          .dw XT_2DROP
0006d6 381a          .dw XT_EXIT
                 
                 ; : traverse-wordlist ( i*x xt wid -- i*x' ) 
                 ;        begin @ dup 
                 ;        while 
                 ;          2dup 2>r 
                 ;          cell + swap execute ( i*x nt -- i*x' f ) 
                 ;          2r> rot 
                 ;        while repeat then 2drop ; 
                 .include "words/name2string.asm"
                 
                 ; Tools Ext (2012)
                 ; get a (flash) string from a name token nt
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_NAME2STRING:
0006d7 ff0b          .dw $ff0b
0006d8 616e
0006d9 656d
0006da 733e
0006db 7274
0006dc 6e69
0006dd 0067          .db "name>string",0
0006de 06b9          .dw VE_HEAD
                     .set VE_HEAD = VE_NAME2STRING
                 XT_NAME2STRING:
0006df 3800          .dw DO_COLON
                 PFA_NAME2STRING:
                 
                 .endif
0006e0 0419          .dw XT_ICOUNT   ; ( -- addr n )
0006e1 3837          .dw XT_DOLITERAL
0006e2 00ff          .dw 255
0006e3 3a0d          .dw XT_AND      ; mask immediate bit
0006e4 381a          .dw XT_EXIT
                 .include "words/nfa2cfa.asm"
                 
                 ; Tools
                 ; get the XT from a name token
                 VE_NFA2CFA:
0006e5 ff07          .dw $ff07
0006e6 666e
0006e7 3e61
0006e8 6663
../../avr8\words/nfa2cfa.asm(6): warning: .cseg .db misalignment - padding zero byte
0006e9 0061          .db "nfa>cfa"
0006ea 06d7          .dw VE_HEAD
                     .set VE_HEAD = VE_NFA2CFA
                 XT_NFA2CFA:
0006eb 3800          .dw DO_COLON
                 PFA_NFA2CFA:
0006ec 09f7          .dw XT_NFA2LFA ; skip to link field
0006ed 3a29          .dw XT_1PLUS   ; next is the execution token
0006ee 381a          .dw XT_EXIT
                 .include "words/find-name.asm"
                 
                 ; Tools
                 ; search wordlists for an entry with the name from c-addr/len
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_FINDNAME:
0006ef ff09          .dw $ff09
0006f0 6966
0006f1 646e
0006f2 6e2d
0006f3 6d61
0006f4 0065          .db "find-name",0
0006f5 06e5          .dw VE_HEAD
                     .set VE_HEAD = VE_FINDNAME
                 XT_FINDNAME:
0006f6 3800          .dw DO_COLON
                 PFA_FINDNAME:
                 .endif
0006f7 3837          .dw XT_DOLITERAL
0006f8 0702          .dw XT_FINDNAMEA
0006f9 3837          .dw XT_DOLITERAL
0006fa 006a          .dw CFG_ORDERLISTLEN
0006fb 0990          .dw XT_MAPSTACK
0006fc 3914          .dw XT_ZEROEQUAL
0006fd 3830          .dw XT_DOCONDBRANCH
0006fe 0701          DEST(PFA_FINDNAME1)
0006ff 3ebb            .dw XT_2DROP
000700 394e            .dw XT_ZERO
                 PFA_FINDNAME1:
000701 381a          .dw XT_EXIT
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 XT_FINDNAMEA:
000702 3800          .dw DO_COLON
                 PFA_FINDNAMEA:
                 .endif
000703 38f9          .dw XT_TO_R
000704 3eb2          .dw XT_2DUP
000705 38f0          .dw XT_R_FROM
000706 0692          .dw XT_SEARCH_WORDLIST
000707 38ab          .dw XT_DUP
000708 3830          .dw XT_DOCONDBRANCH
000709 070f          DEST(PFA_FINDNAMEA1)
00070a 38f9            .dw XT_TO_R
00070b 38ea            .dw XT_NIP
00070c 38ea            .dw XT_NIP
00070d 38f0            .dw XT_R_FROM
00070e 3945            .dw XT_TRUE
                 PFA_FINDNAMEA1:
00070f 381a          .dw XT_EXIT
                 
                 .include "dict/compiler1.inc"
                 
                 .include "words/docreate.asm"
                 
                 ; Compiler
                 ; parse the input and create an empty vocabulary entry without XT and data field (PF)
                 VE_DOCREATE:
000710 ff08          .dw $ff08
000711 6328
000712 6572
000713 7461
000714 2965          .db "(create)"
000715 06ef          .dw VE_HEAD
                     .set VE_HEAD = VE_DOCREATE
                 XT_DOCREATE:
000716 3800          .dw DO_COLON
                 PFA_DOCREATE:
000717 059e          .dw XT_PARSENAME
000718 0871          .dw XT_WLSCOPE
000719 38ab          .dw XT_DUP
00071a 38f9          .dw XT_TO_R
00071b 0856          .dw XT_HEADER
00071c 38f0          .dw XT_R_FROM
                 .dseg
000173           COLON_SMUDGE: .byte 4
                 .cseg
00071d 3837          .dw XT_DOLITERAL
00071e 0175          .dw COLON_SMUDGE+2
00071f 387b          .dw XT_STORE		; save wid
000720 3837          .dw XT_DOLITERAL
000721 0173          .dw COLON_SMUDGE+0
000722 387b          .dw XT_STORE		; save NFA
                 
000723 381a          .dw XT_EXIT
                 .include "words/backslash.asm"
                 
                 ; Compiler
                 ; everything up to the end of the current line is a comment
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BACKSLASH:
000724 0001          .dw $0001
000725 005c          .db $5c,0
000726 0710          .dw VE_HEAD
                     .set VE_HEAD = VE_BACKSLASH
                 XT_BACKSLASH:
000727 3800          .dw DO_COLON
                 PFA_BACKSLASH:
                 .endif
000728 0585          .dw XT_SOURCE
000729 38ea          .dw XT_NIP
00072a 3ecb          .dw XT_TO_IN
00072b 387b          .dw XT_STORE
00072c 381a          .dw XT_EXIT
                 .include "words/l-paren.asm"
                 
                 ; Compiler
                 ; skip everything up to the closing bracket on the same line
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_LPAREN:
00072d 0001          .dw $0001
00072e 0028          .db "(" ,0
00072f 0724          .dw VE_HEAD
                     .set VE_HEAD = VE_LPAREN
                 XT_LPAREN:
000730 3800          .dw DO_COLON
                 PFA_LPAREN:
                 .endif
000731 3837          .dw XT_DOLITERAL
000732 0029          .dw ')'
000733 0570          .dw XT_PARSE
000734 3ebb          .dw XT_2DROP
000735 381a          .dw XT_EXIT
                 
                 .include "words/compile.asm"
                 
                 ; Dictionary
                 ; read the following cell from the dictionary and append it to the current dictionary position.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_COMPILE:
000736 ff07          .dw $ff07
000737 6f63
000738 706d
000739 6c69
00073a 0065          .db "compile",0
00073b 072d          .dw  VE_HEAD
                     .set VE_HEAD = VE_COMPILE
                 XT_COMPILE:
00073c 3800          .dw DO_COLON
                 PFA_COMPILE:
                 .endif
00073d 38f0          .dw XT_R_FROM
00073e 38ab          .dw XT_DUP
00073f 01ae          .dw XT_ICELLPLUS
000740 38f9          .dw XT_TO_R
000741 3bba          .dw XT_FETCHI
000742 0747          .dw XT_COMMA
000743 381a          .dw XT_EXIT
                 .include "words/comma.asm"
                 
                 ; Dictionary
                 ; compile 16 bit into flash at DP
                 VE_COMMA:
000744 ff01          .dw $ff01
000745 002c          .db ',',0 ; ,
000746 0736          .dw VE_HEAD
                     .set VE_HEAD = VE_COMMA
                 XT_COMMA:
000747 3800          .dw DO_COLON
                 PFA_COMMA:
000748 3f01          .dw XT_DP
000749 3b61          .dw XT_STOREI
00074a 3f01          .dw XT_DP
00074b 3a29          .dw XT_1PLUS
00074c 019c          .dw XT_DOTO
00074d 3f02          .dw PFA_DP
00074e 381a          .dw XT_EXIT
                 .include "words/brackettick.asm"
                 
                 ; Compiler
                 ; what ' does in the interpreter mode, do in colon definitions
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BRACKETTICK:
00074f 0003          .dw $0003
000750 275b
000751 005d          .db "[']",0
000752 0744          .dw VE_HEAD
                     .set VE_HEAD = VE_BRACKETTICK
                 XT_BRACKETTICK:
000753 3800          .dw DO_COLON
                 PFA_BRACKETTICK:
                 .endif
000754 0432          .dw XT_TICK
000755 075d          .dw XT_LITERAL
000756 381a          .dw XT_EXIT
                 
                 
                 .include "words/literal.asm"
                 
                 ; Compiler
                 ; compile a literal in colon defintions
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_LITERAL:
000757 0007          .dw $0007
000758 696c
000759 6574
00075a 6172
00075b 006c          .db "literal",0
00075c 074f          .dw VE_HEAD
                     .set VE_HEAD = VE_LITERAL
                 XT_LITERAL:
00075d 3800          .dw DO_COLON
                 PFA_LITERAL:
                 .endif
00075e 073c              .DW XT_COMPILE
00075f 3837              .DW XT_DOLITERAL
000760 0747              .DW XT_COMMA
000761 381a              .DW XT_EXIT
                 .include "words/sliteral.asm"
                 
                 ; String
                 ; compiles a string to flash, at runtime leaves ( -- flash-addr count) on stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SLITERAL:
000762 0008        .dw $0008
000763 6c73
000764 7469
000765 7265
000766 6c61        .db "sliteral"
000767 0757        .dw VE_HEAD
                   .set VE_HEAD = VE_SLITERAL
                 XT_SLITERAL:
000768 3800          .dw DO_COLON
                 PFA_SLITERAL:
                 .endif
000769 073c          .dw XT_COMPILE
00076a 03ba          .dw XT_DOSLITERAL    ; ( -- addr n)
00076b 03c8          .dw XT_SCOMMA
00076c 381a          .dw XT_EXIT
                 .include "words/g-mark.asm"
                 
                 ; Compiler
                 ; places current dictionary position for backward resolves
                 ;VE_GMARK:
                 ;    .dw $ff05
                 ;    .db ">mark"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_GMARK
                 XT_GMARK:
00076d 3800          .dw DO_COLON
                 PFA_GMARK:
00076e 3f01          .dw XT_DP
00076f 073c          .dw XT_COMPILE
000770 ffff          .dw -1           ; ffff does not erase flash
000771 381a          .dw XT_EXIT
                 .include "words/g-resolve.asm"
                 
                 ; Compiler
                 ; resolve backward jumps
                 ;VE_GRESOLVE:
                 ;    .dw $ff08
                 ;    .db ">resolve"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_GRESOLVE
                 XT_GRESOLVE:
000772 3800          .dw DO_COLON
                 PFA_GRESOLVE:
000773 3f7b          .dw XT_QSTACK
000774 3f01          .dw XT_DP
000775 38be          .dw XT_SWAP
000776 3b61          .dw XT_STOREI
000777 381a          .dw XT_EXIT
                 .include "words/l_mark.asm"
                 
                 ; Compiler
                 ; place destination for backward branch
                 ;VE_LMARK:
                 ;    .dw $ff05
                 ;    .db "<mark"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_LMARK
                 XT_LMARK:
000778 3800          .dw DO_COLON
                 PFA_LMARK:
000779 3f01          .dw XT_DP
00077a 381a          .dw XT_EXIT
                 .include "words/l_resolve.asm"
                 
                 ; Compiler
                 ; resolve backward branch
                 ;VE_LRESOLVE:
                 ;    .dw $ff08
                 ;    .db "<resolve"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_LRESOLVE
                 XT_LRESOLVE:
00077b 3800          .dw DO_COLON
                 PFA_LRESOLVE:
00077c 3f7b          .dw XT_QSTACK
00077d 0747          .dw XT_COMMA
00077e 381a          .dw XT_EXIT
                 
                 .include "words/ahead.asm"
                 
                 ; Compiler
                 ; do a unconditional branch
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_AHEAD:
00077f 0005          .dw $0005
000780 6861
000781 6165
000782 0064          .db "ahead",0
000783 0762          .dw VE_HEAD
                     .set VE_HEAD = VE_AHEAD
                 XT_AHEAD:
000784 3800          .dw DO_COLON
                 PFA_AHEAD:
                 .endif
000785 073c          .dw XT_COMPILE
000786 3829          .dw XT_DOBRANCH
000787 076d          .dw XT_GMARK
000788 381a          .dw XT_EXIT
                 .include "words/if.asm"
                 
                 ; Compiler
                 ; start conditional branch
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_IF:
000789 0002          .dw $0002
00078a 6669          .db "if"
00078b 077f          .dw VE_HEAD
                     .set VE_HEAD = VE_IF
                 XT_IF:
00078c 3800          .dw DO_COLON
                 PFA_IF:
                 .endif
00078d 073c          .dw XT_COMPILE
00078e 3830          .dw XT_DOCONDBRANCH
00078f 076d          .dw XT_GMARK
000790 381a          .dw XT_EXIT
                 .include "words/else.asm"
                 
                 ; Compiler
                 ; resolve the forward reference and place a new unresolved forward reference
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ELSE:
000791 0004          .dw $0004
000792 6c65
000793 6573          .db "else"
000794 0789          .dw VE_HEAD
                     .set VE_HEAD = VE_ELSE
                 XT_ELSE:
000795 3800          .dw DO_COLON
                 PFA_ELSE:
                 .endif
000796 073c          .dw XT_COMPILE
000797 3829          .dw XT_DOBRANCH
000798 076d          .dw XT_GMARK
000799 38be          .dw XT_SWAP
00079a 0772          .dw XT_GRESOLVE
00079b 381a          .dw XT_EXIT
                 .include "words/then.asm"
                 
                 ; Compiler
                 ; finish if
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_THEN:
00079c 0004          .dw $0004
00079d 6874
00079e 6e65          .db "then"
00079f 0791          .dw VE_HEAD
                     .set VE_HEAD = VE_THEN
                 XT_THEN:
0007a0 3800          .dw DO_COLON
                 PFA_THEN:
                 .endif
0007a1 0772          .dw XT_GRESOLVE
0007a2 381a          .dw XT_EXIT
                 .include "words/begin.asm"
                 
                 ; Compiler
                 ; put the next location for a transfer of control onto the control flow stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BEGIN:
0007a3 0005          .dw $0005
0007a4 6562
0007a5 6967
0007a6 006e          .db "begin",0
0007a7 079c          .dw VE_HEAD
                     .set VE_HEAD = VE_BEGIN
                 XT_BEGIN:
0007a8 3800          .dw DO_COLON
                 PFA_BEGIN:
                 .endif
0007a9 0778          .dw XT_LMARK
0007aa 381a          .dw XT_EXIT
                 .include "words/while.asm"
                 
                 ; Compiler
                 ; at runtime skip until repeat if non-true
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_WHILE:
0007ab 0005          .dw $0005
0007ac 6877
0007ad 6c69
0007ae 0065          .db "while",0
0007af 07a3          .dw VE_HEAD
                     .set VE_HEAD = VE_WHILE
                 XT_WHILE:
0007b0 3800          .dw DO_COLON
                 PFA_WHILE:
                 .endif
0007b1 078c          .dw XT_IF
0007b2 38be          .dw XT_SWAP
0007b3 381a          .dw XT_EXIT
                 .include "words/repeat.asm"
                 
                 ; Compiler
                 ; continue execution at dest, resolve orig
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_REPEAT:
0007b4 0006          .dw $0006
0007b5 6572
0007b6 6570
0007b7 7461          .db "repeat"
0007b8 07ab          .dw VE_HEAD
                     .set VE_HEAD = VE_REPEAT
                 XT_REPEAT:
0007b9 3800          .dw DO_COLON
                 PFA_REPEAT:
                 .endif
0007ba 07cd          .dw XT_AGAIN
0007bb 07a0          .dw XT_THEN
0007bc 381a          .dw XT_EXIT
                 .include "words/until.asm"
                 
                 ; Compiler
                 ; finish begin with conditional branch, leaves the loop if true flag at runtime
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UNTIL:
0007bd 0005          .dw $0005
0007be 6e75
0007bf 6974
0007c0 006c          .db "until",0
0007c1 07b4          .dw VE_HEAD
                     .set VE_HEAD = VE_UNTIL
                 XT_UNTIL:
0007c2 3800          .dw DO_COLON
                 PFA_UNTIL:
                 .endif
0007c3 3837          .dw XT_DOLITERAL
0007c4 3830          .dw XT_DOCONDBRANCH
0007c5 0747          .dw XT_COMMA
                 
0007c6 077b          .dw XT_LRESOLVE
0007c7 381a          .dw XT_EXIT
                 .include "words/again.asm"
                 
                 ; Compiler
                 ; compile a jump back to dest
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_AGAIN:
0007c8 0005          .dw $0005
0007c9 6761
0007ca 6961
0007cb 006e          .db "again",0
0007cc 07bd          .dw VE_HEAD
                     .set VE_HEAD = VE_AGAIN
                 XT_AGAIN:
0007cd 3800          .dw DO_COLON
                 PFA_AGAIN:
                 .endif
0007ce 073c          .dw XT_COMPILE
0007cf 3829          .dw XT_DOBRANCH
0007d0 077b          .dw XT_LRESOLVE
0007d1 381a          .dw XT_EXIT
                 .include "words/do.asm"
                 
                 ; Compiler
                 ; start do .. [+]loop
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DO:
0007d2 0002          .dw $0002
0007d3 6f64          .db "do"
0007d4 07c8          .dw VE_HEAD
                     .set VE_HEAD = VE_DO
                 XT_DO:
0007d5 3800          .dw DO_COLON
                 PFA_DO:
                 
                 .endif
0007d6 073c          .dw XT_COMPILE
0007d7 3a89          .dw XT_DODO
0007d8 0778          .dw XT_LMARK
0007d9 394e          .dw XT_ZERO
0007da 0830          .dw XT_TO_L
0007db 381a          .dw XT_EXIT
                 .include "words/loop.asm"
                 
                 ; Compiler
                 ; compile (loop) and resolve the backward branch
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_LOOP:
0007dc 0004          .dw $0004
0007dd 6f6c
0007de 706f          .db "loop"
0007df 07d2          .dw VE_HEAD
                     .set VE_HEAD = VE_LOOP
                 XT_LOOP:
0007e0 3800          .dw DO_COLON
                 PFA_LOOP:
                 .endif
0007e1 073c          .dw XT_COMPILE
0007e2 3ab7          .dw XT_DOLOOP
0007e3 0817          .dw XT_ENDLOOP
0007e4 381a          .dw XT_EXIT
                 .include "words/plusloop.asm"
                 
                 ; Compiler
                 ; compile (+loop) and resolve branches
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_PLUSLOOP:
0007e5 0005          .dw $0005
0007e6 6c2b
0007e7 6f6f
0007e8 0070          .db "+loop",0
0007e9 07dc          .dw VE_HEAD
                     .set VE_HEAD = VE_PLUSLOOP
                 XT_PLUSLOOP:
0007ea 3800          .dw DO_COLON
                 PFA_PLUSLOOP:
                 .endif
0007eb 073c          .dw XT_COMPILE
0007ec 3aa8          .dw XT_DOPLUSLOOP
0007ed 0817          .dw XT_ENDLOOP
0007ee 381a          .dw XT_EXIT
                 .include "words/leave.asm"
                 
                 ; Compiler
                 ; immediatly leave the current DO..LOOP
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_LEAVE:
0007ef 0005         .dw $0005
0007f0 656c
0007f1 7661
0007f2 0065         .db "leave",0
0007f3 07e5         .dw VE_HEAD
                    .set VE_HEAD = VE_LEAVE
                 XT_LEAVE:
0007f4 3800          .dw DO_COLON
                 PFA_LEAVE:
                 .endif
0007f5 073c
0007f6 3ac2          .DW XT_COMPILE,XT_UNLOOP
0007f7 0784
0007f8 0830
0007f9 381a          .DW XT_AHEAD,XT_TO_L,XT_EXIT
                 .include "words/qdo.asm"
                 
                 ; Compiler
                 ; start a ?do .. [+]loop control structure
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 VE_QDO:
0007fa 0003          .dw $0003
0007fb 643f
0007fc 006f          .db "?do",0
0007fd 07ef          .dw VE_HEAD
                     .set VE_HEAD = VE_QDO
                 XT_QDO:
0007fe 3800          .dw DO_COLON
                 PFA_QDO:
                 .endif
0007ff 073c          .dw XT_COMPILE
000800 0806          .dw XT_QDOCHECK
000801 078c          .dw XT_IF
000802 07d5          .dw XT_DO
000803 38be          .dw XT_SWAP    ; DO sets a 0 marker on the leave stack
000804 0830          .dw XT_TO_L    ; then follows at the end.
000805 381a          .dw XT_EXIT
                 
                 ; there is no special runtime for ?do, the do runtime
                 ; gets wrapped with the sequence
                 ; ... ?do-check if do ..... loop then
                 ; with
                 ; : ?do-check ( n1 n2 -- n1 n2 true | false )
                 ;   2dup = dup >r if 2drop then r> invert ;
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_QDOCHECK:
000806 3800          .dw DO_COLON
                 PFA_QDOCHECK:
                 .endif
000807 3eb2          .dw XT_2DUP
000808 3fd3          .dw XT_EQUAL
000809 38ab          .dw XT_DUP
00080a 38f9          .dw XT_TO_R
00080b 3830          .dw XT_DOCONDBRANCH
00080c 080e          DEST(PFA_QDOCHECK1)
00080d 3ebb          .dw XT_2DROP
                 PFA_QDOCHECK1:
00080e 38f0          .dw XT_R_FROM
00080f 39f7          .dw XT_INVERT
000810 381a          .dw XT_EXIT
                 .include "words/endloop.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ENDLOOP:
000811 ff07          .dw $ff07
000812 6e65
000813 6c64
000814 6f6f
000815 0070          .db "endloop",0
000816 07fa          .dw VE_HEAD
                     .set VE_HEAD = VE_ENDLOOP
                 XT_ENDLOOP:
000817 3800          .dw DO_COLON
                 PFA_ENDLOOP:
                 .endif
                 ;Z ENDLOOP   adrs xt --   L: 0 a1 a2 .. aN --
                 ;   <resolve                backward loop
                 ;   BEGIN L> ?DUP WHILE POSTPONE THEN REPEAT ;
                 ;                                 resolve LEAVEs
                 ; This is a common factor of LOOP and +LOOP.
                 
000818 077b              .DW XT_LRESOLVE
000819 0824
00081a 38b3
00081b 3830      LOOP1:  .DW XT_L_FROM,XT_QDUP,XT_DOCONDBRANCH
00081c 0820               DEST(LOOP2)
00081d 07a0              .DW XT_THEN
00081e 3829      	.dw XT_DOBRANCH
00081f 0819               DEST(LOOP1)
000820 381a      LOOP2:  .DW XT_EXIT
                 ; leave address stack
                 .include "words/l-from.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_L_FROM:
000821 ff02          .dw $ff02
000822 3e6c          .db "l>"
000823 0811          .dw VE_HEAD
                     .set VE_HEAD = VE_L_FROM
                 XT_L_FROM:
000824 3800          .dw DO_COLON
                 PFA_L_FROM:
                 
                 .endif
                 ;Z L>   -- x   L: x --      move from leave stack
                 ;   LP @ @  -2 LP +! ;
                 
000825 0844          .dw XT_LP
000826 3873          .dw XT_FETCH
000827 3873          .dw XT_FETCH
000828 3837          .dw XT_DOLITERAL
000829 fffe          .dw -2
00082a 0844          .dw XT_LP
00082b 3a53          .dw XT_PLUSSTORE
00082c 381a          .dw XT_EXIT
                 .include "words/to-l.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TO_L:
00082d ff02          .dw $ff02
00082e 6c3e          .db ">l"
00082f 0821          .dw VE_HEAD
                     .set VE_HEAD = VE_TO_L
                 XT_TO_L:
000830 3800          .dw DO_COLON
                 PFA_TO_L:
                 .endif
                 ;Z >L   x --   L: -- x        move to leave stack
                 ;   CELL LP +!  LP @ ! ;      (L stack grows up)
                 
000831 3837              .dw XT_DOLITERAL
000832 0002      	.dw 2
000833 0844      	.dw XT_LP
000834 3a53      	.dw XT_PLUSSTORE
000835 0844      	.dw XT_LP
000836 3873      	.dw XT_FETCH
000837 387b      	.dw XT_STORE
000838 381a      	.dw XT_EXIT
                 .include "words/lp0.asm"
                 
                 ; Stack
                 ; start address of leave stack
                 VE_LP0:
000839 ff03          .dw $ff03
00083a 706c
00083b 0030          .db "lp0",0
00083c 082d          .dw VE_HEAD
                     .set VE_HEAD = VE_LP0
                 XT_LP0:
00083d 3869          .dw PFA_DOVALUE1
                 PFA_LP0:
00083e 0088          .dw EE_LP0
00083f 3d81          .dw XT_EDEFERFETCH
000840 3d8b          .dw XT_EDEFERSTORE
                 .include "words/lp.asm"
                 
                 ; System Variable
                 ; leave stack pointer
                 VE_LP:
000841 ff02          .dw $ff02
000842 706c          .db "lp"
000843 0839          .dw VE_HEAD
                     .set VE_HEAD = VE_LP
                 XT_LP:
000844 3842          .dw PFA_DOVARIABLE
                 PFA_LP:
000845 0177          .dw ram_lp
                 
                 .dseg
000177           ram_lp: .byte 2
                 .cseg
                 
                 
                 .include "words/create.asm"
                 
                 ; Dictionary
                 ; create a dictionary header. XT is (constant), with the address of the data field of name
                 VE_CREATE:
000846 ff06          .dw $ff06
000847 7263
000848 6165
000849 6574          .db "create"
00084a 0841          .dw VE_HEAD
                     .set VE_HEAD = VE_CREATE
                 XT_CREATE:
00084b 3800          .dw DO_COLON
                 PFA_CREATE:
00084c 0716          .dw XT_DOCREATE
00084d 087a          .dw XT_REVEAL
00084e 073c          .dw XT_COMPILE
00084f 384c          .dw PFA_DOCONSTANT
000850 381a          .dw XT_EXIT
                 .include "words/header.asm"
                 
                 ; Compiler
                 ; creates the vocabulary header without XT and data field (PF) in the wordlist wid
                 VE_HEADER:
000851 ff06          .dw $ff06
000852 6568
000853 6461
000854 7265          .db "header"
000855 0846          .dw VE_HEAD
                     .set VE_HEAD = VE_HEADER
                 XT_HEADER:
000856 3800          .dw DO_COLON
                 PFA_HEADER:
000857 3f01          .dw XT_DP           ; the new Name Field
000858 38f9          .dw XT_TO_R
000859 38f9          .dw XT_TO_R		; ( R: NFA WID )
00085a 38ab          .dw XT_DUP    
00085b 3922          .dw XT_GREATERZERO 
00085c 3830          .dw XT_DOCONDBRANCH
00085d 0868          .dw PFA_HEADER1
00085e 38ab          .dw XT_DUP
00085f 3837          .dw XT_DOLITERAL
000860 ff00          .dw $ff00           ; all flags are off (e.g. immediate)
000861 3a16          .dw XT_OR
000862 03cc          .dw XT_DOSCOMMA
                     ; make the link to the previous entry in this wordlist
000863 38f0          .dw XT_R_FROM
000864 3b4d          .dw XT_FETCHE
000865 0747          .dw XT_COMMA
000866 38f0          .dw XT_R_FROM
000867 381a          .dw XT_EXIT
                 
                 PFA_HEADER1:
                     ; -16: attempt to use zero length string as a name
000868 3837          .dw XT_DOLITERAL
000869 fff0          .dw -16
00086a 3d67          .dw XT_THROW
                 
                 .include "words/wlscope.asm"
                 
                 ; Compiler
                 ; dynamically place a word in a wordlist. The word name may be changed.
                 VE_WLSCOPE:
00086b ff07          .dw $ff07
00086c 6c77
00086d 6373
00086e 706f
00086f 0065          .db "wlscope",0
000870 0851          .dw VE_HEAD
                     .set VE_HEAD = VE_WLSCOPE
                 XT_WLSCOPE:
000871 3de0          .dw PFA_DODEFER1
                 PFA_WLSCOPE:
000872 0086          .dw EE_WLSCOPE
000873 3d81          .dw XT_EDEFERFETCH
000874 3d8b          .dw XT_EDEFERSTORE
                 
                 ; wlscope, "wordlist scope" ( addr len -- addr' len' wid ), is a deferred word
                 ; which enables the AmForth application to choose the wordlist ( wid ) for the
                 ; new voc entry based on the input ( addr len ) string. The name of the new voc
                 ; entry ( addr' len' ) may be different from the input string. Note that all
                 ; created voc entry types pass through the wlscope mechanism. The default
                 ; wlscope action passes the input string to the output without modification and
                 ; uses get-current to select the wid.
                 .include "words/reveal.asm"
                 
                 ; Dictionary
                 ; makes an entry in a wordlist visible, if not already done.
                 VE_REVEAL:
000875 ff06          .dw $ff06
000876 6572
000877 6576
000878 6c61          .db "reveal"
000879 086b          .dw VE_HEAD
                     .set VE_HEAD = VE_REVEAL
                 XT_REVEAL:
00087a 3800          .dw DO_COLON
                 PFA_REVEAL:
00087b 3837          .dw XT_DOLITERAL
00087c 0173          .dw COLON_SMUDGE+0
00087d 3873          .dw XT_FETCH
00087e 38b3          .dw XT_QDUP
00087f 3830          .dw XT_DOCONDBRANCH
000880 0889          .dw PFA_REVEAL1
                 ;
000881 3837          .dw XT_DOLITERAL
000882 0175          .dw COLON_SMUDGE+2
000883 3873          .dw XT_FETCH		; ( NFA WID )
000884 3b29          .dw XT_STOREE
                     ; prevent duplicate actions and cooperate with :noname
000885 394e          .dw XT_ZERO
000886 3837          .dw XT_DOLITERAL
000887 0173          .dw COLON_SMUDGE+0
000888 387b          .dw XT_STORE
                 PFA_REVEAL1:
000889 381a          .dw XT_EXIT
                 .include "words/latest.asm"
                 
                 ; System Variable
                 ; system LATEST
                 VE_LATEST:
00088a ff06          .dw $ff06
00088b 616c
00088c 6574
00088d 7473          .db "latest"
00088e 0875          .dw VE_HEAD
                     .set VE_HEAD = VE_LATEST
                 XT_LATEST:
00088f 3842          .dw PFA_DOVARIABLE
                 PFA_LATEST:
000890 0179          .dw ram_LATEST
                 
                 .dseg
000179           ram_LATEST: .byte 2
                 .cseg
                 .include "words/does.asm"
                 
                 ; Compiler
                 ; organize the XT replacement to call other colon code
                 VE_DOES:
000891 0005          .dw $0005
000892 6f64
000893 7365
000894 003e          .db "does>",0
000895 088a          .dw VE_HEAD
                     .set VE_HEAD = VE_DOES
                 XT_DOES:
000896 3800          .dw DO_COLON
                 PFA_DOES:
000897 073c          .dw XT_COMPILE
000898 08a9          .dw XT_DODOES
000899 073c          .dw XT_COMPILE  ; create a code snippet to be used in an embedded XT
00089a 940e          .dw $940e       ; the address of this compiled
00089b 073c          .dw XT_COMPILE  ; code will replace the XT of the 
00089c 089e          .dw DO_DODOES   ; word that CREATE created
00089d 381a          .dw XT_EXIT     ; 
                 
                 DO_DODOES: ; ( -- PFA )
00089e 939a
00089f 938a          savetos
0008a0 01cb          movw tosl, wl
0008a1 9601          adiw tosl, 1
                     ; the following takes the address from a real uC-call
                 .if (pclen==3)
                 .endif
0008a2 917f          pop wh
0008a3 916f          pop wl
                 
0008a4 93bf          push XH
0008a5 93af          push XL
0008a6 01db          movw XL, wl
0008a7 940c 3804     jmp_ DO_NEXT
                 
                 ; ( -- )
                 ; System
                 ; replace the XT written by CREATE to call the code that follows does>
                 ;VE_DODOES:
                 ;   .dw $ff07
                 ;   .db "(does>)"
                 ;   .set VE_HEAD = VE_DODOES
                 XT_DODOES:
0008a9 3800          .dw DO_COLON
                 PFA_DODOES:
0008aa 38f0          .dw XT_R_FROM
0008ab 3837          .dw XT_DOLITERAL
0008ac 0175          .dw COLON_SMUDGE+2
0008ad 3873          .dw XT_FETCH
0008ae 3b4d          .dw XT_FETCHE
0008af 09f7          .dw XT_NFA2LFA
0008b0 3a29          .dw XT_1PLUS   ; lfa>xt
                 
0008b1 3b61          .dw XT_STOREI
0008b2 381a          .dw XT_EXIT
                 .include "words/colon.asm"
                 
                 ; Compiler
                 ; create a named entry in the dictionary, XT is DO_COLON
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_COLON:
0008b3 ff01          .dw $ff01
0008b4 003a          .db ":",0
0008b5 0891          .dw VE_HEAD
                     .set VE_HEAD = VE_COLON
                 XT_COLON:
0008b6 3800          .dw DO_COLON
                 PFA_COLON:
                 .endif
0008b7 0716          .dw XT_DOCREATE
0008b8 08c1          .dw XT_COLONNONAME
0008b9 38d3          .dw XT_DROP
0008ba 381a          .dw XT_EXIT
                 .include "words/colon-noname.asm"
                 
                 ; Compiler
                 ; create an unnamed entry in the dictionary, XT is DO_COLON
                 VE_COLONNONAME:
0008bb ff07          .dw $ff07
0008bc 6e3a
0008bd 6e6f
0008be 6d61
0008bf 0065          .db ":noname",0
0008c0 08b3          .dw VE_HEAD
                     .set VE_HEAD = VE_COLONNONAME
                 XT_COLONNONAME:
0008c1 3800          .dw DO_COLON
                 PFA_COLONNONAME:
0008c2 3f01          .dw XT_DP
0008c3 38ab          .dw XT_DUP
0008c4 088f          .dw XT_LATEST
0008c5 387b          .dw XT_STORE
                 
0008c6 073c          .dw XT_COMPILE
0008c7 3800          .dw DO_COLON
                 
0008c8 08d6          .dw XT_RBRACKET
0008c9 381a          .dw XT_EXIT
                 .include "words/semicolon.asm"
                 
                 ; Compiler
                 ; finish colon defintion, compiles (exit) and returns to interpret state 
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_SEMICOLON:
0008ca 0001          .dw $0001
0008cb 003b          .db $3b,0
0008cc 08bb          .dw VE_HEAD
                     .set VE_HEAD = VE_SEMICOLON
                 XT_SEMICOLON:
0008cd 3800          .dw DO_COLON
                 PFA_SEMICOLON:
                 .endif
0008ce 073c          .dw XT_COMPILE
0008cf 381a          .dw XT_EXIT
0008d0 08df          .dw XT_LBRACKET
0008d1 087a          .dw XT_REVEAL
0008d2 381a          .dw XT_EXIT
                 .include "words/right-bracket.asm"
                 
                 ; Compiler
                 ; enter compiler mode
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_RBRACKET:
0008d3 ff01          .dw $ff01
0008d4 005d          .db "]",0
0008d5 08ca          .dw VE_HEAD
                     .set VE_HEAD = VE_RBRACKET
                 XT_RBRACKET:
0008d6 3800          .dw DO_COLON
                 PFA_RBRACKET:
                 .endif
0008d7 3837          .dw XT_DOLITERAL
0008d8 0001          .dw 1
0008d9 3ea0          .dw XT_STATE
0008da 387b          .dw XT_STORE
0008db 381a          .dw XT_EXIT
                 .include "words/left-bracket.asm"
                 
                 ; Compiler
                 ; enter interpreter mode
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_LBRACKET:
0008dc 0001          .dw $0001
0008dd 005b          .db "[",0
0008de 08d3          .dw VE_HEAD
                     .set VE_HEAD = VE_LBRACKET
                 XT_LBRACKET:
0008df 3800          .dw DO_COLON
                 PFA_LBRACKET:
                 .endif
0008e0 394e          .dw XT_ZERO
0008e1 3ea0          .dw XT_STATE
0008e2 387b          .dw XT_STORE
0008e3 381a          .dw XT_EXIT
                 .include "words/variable.asm"
                 
                 ; Compiler
                 ; create a dictionary entry for a variable and allocate 1 cell RAM
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 VE_VARIABLE:
0008e4 ff08          .dw $ff08
0008e5 6176
0008e6 6972
0008e7 6261
0008e8 656c          .db "variable"
0008e9 08dc          .dw VE_HEAD
                     .set VE_HEAD = VE_VARIABLE
                 XT_VARIABLE:
0008ea 3800          .dw DO_COLON
                 PFA_VARIABLE:
                 .endif
0008eb 3f12          .dw XT_HERE
0008ec 08f7          .dw XT_CONSTANT
0008ed 3837          .dw XT_DOLITERAL
0008ee 0002          .dw 2
0008ef 3f1b          .dw XT_ALLOT
0008f0 381a          .dw XT_EXIT
                 .include "words/constant.asm"
                 
                 ; Compiler
                 ; create a constant in the dictionary
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 VE_CONSTANT:
0008f1 ff08          .dw $ff08
0008f2 6f63
0008f3 736e
0008f4 6174
0008f5 746e          .db "constant"
0008f6 08e4          .dw VE_HEAD
                     .set VE_HEAD = VE_CONSTANT
                 XT_CONSTANT:
0008f7 3800          .dw DO_COLON
                 PFA_CONSTANT:
                 .endif
0008f8 0716          .dw XT_DOCREATE
0008f9 087a          .dw XT_REVEAL
0008fa 073c          .dw XT_COMPILE
0008fb 3842          .dw PFA_DOVARIABLE
0008fc 0747          .dw XT_COMMA
0008fd 381a          .dw XT_EXIT
                 .include "words/user.asm"
                 
                 ; Compiler
                 ; create a dictionary entry for a user variable at offset n
                 VE_USER:
0008fe ff04          .dw $ff04
0008ff 7375
000900 7265          .db "user"
000901 08f1          .dw VE_HEAD
                     .set VE_HEAD = VE_USER
                 XT_USER:
000902 3800          .dw DO_COLON
                 PFA_USER:
000903 0716          .dw XT_DOCREATE
000904 087a          .dw XT_REVEAL
                 
000905 073c          .dw XT_COMPILE
000906 3852          .dw PFA_DOUSER
000907 0747          .dw XT_COMMA
000908 381a          .dw XT_EXIT
                 
                 .include "words/recurse.asm"
                 
                 ; Compiler
                 ; compile the XT of the word currently being defined into the dictionary
                 VE_RECURSE:
000909 0007          .dw $0007
00090a 6572
00090b 7563
00090c 7372
00090d 0065          .db "recurse",0
00090e 08fe          .dw VE_HEAD
                     .set VE_HEAD = VE_RECURSE
                 XT_RECURSE:
00090f 3800          .dw DO_COLON
                 PFA_RECURSE:
000910 088f          .dw XT_LATEST
000911 3873          .dw XT_FETCH
000912 0747          .dw XT_COMMA
000913 381a          .dw XT_EXIT
                 .include "words/immediate.asm"
                 
                 ; Compiler
                 ; set immediate flag for the most recent word definition
                 VE_IMMEDIATE:
000914 ff09          .dw $ff09
000915 6d69
000916 656d
000917 6964
000918 7461
000919 0065          .db "immediate",0
00091a 0909          .dw VE_HEAD
                     .set VE_HEAD = VE_IMMEDIATE
                 XT_IMMEDIATE:
00091b 3800          .dw DO_COLON
                 PFA_IMMEDIATE:
00091c 09b8          .dw XT_GET_CURRENT
00091d 3b4d          .dw XT_FETCHE
00091e 38ab          .dw XT_DUP
00091f 3bba          .dw XT_FETCHI
000920 3837          .dw XT_DOLITERAL
000921 7fff          .dw $7fff
000922 3a0d          .dw XT_AND
000923 38be          .dw XT_SWAP
000924 3b61          .dw XT_STOREI
000925 381a          .dw XT_EXIT
                 
                 .include "words/bracketchar.asm"
                 
                 ; Tools
                 ; skip leading space delimites, place the first character of the word on the stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BRACKETCHAR:
000926 0006          .dw $0006
000927 635b
000928 6168
000929 5d72          .db "[char]"
00092a 0914          .dw VE_HEAD
                     .set VE_HEAD = VE_BRACKETCHAR
                 XT_BRACKETCHAR:
00092b 3800          .dw DO_COLON
                 PFA_BRACKETCHAR:
                 .endif
00092c 073c          .dw XT_COMPILE
00092d 3837          .dw XT_DOLITERAL
00092e 04cd          .dw XT_CHAR
00092f 0747          .dw XT_COMMA
000930 381a          .dw XT_EXIT
                 .include "words/abort-string.asm"
                 
                 ;C         i*x x1 --       R: j*x --      x1<>0
                 ;   POSTPONE IS" POSTPONE ?ABORT ; IMMEDIATE
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ABORTQUOTE:
000931 0006          .dw $0006
000932 6261
000933 726f
000934 2274          .db "abort",'"'
000935 0926          .dw VE_HEAD
                     .set VE_HEAD = VE_ABORTQUOTE
                 XT_ABORTQUOTE:
000936 3800          .dw DO_COLON
                 PFA_ABORTQUOTE:
                 .endif
000937 3e73          .dw XT_SQUOTE
000938 073c          .dw XT_COMPILE
000939 0949          .dw XT_QABORT
00093a 381a          .DW XT_EXIT
                 .include "words/abort.asm"
                 
                 ; Exceptions
                 ; send an exception -1
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ABORT:
00093b ff05          .dw $ff05
00093c 6261
00093d 726f
00093e 0074          .db "abort",0
00093f 0931          .dw VE_HEAD
                     .set VE_HEAD = VE_ABORT
                 XT_ABORT:
000940 3800          .dw DO_COLON
                 PFA_ABORT:
                 .endif
000941 3837          .dw XT_DOLITERAL
000942 ffff          .dw -1
000943 3d67          .dw XT_THROW
                 .include "words/q-abort.asm"
                 
                 ;   ROT IF ITYPE ABORT THEN 2DROP ;
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_QABORT:
000944 ff06          .dw $ff06
000945 613f
000946 6f62
000947 7472          .db "?abort"
000948 093b          .dw VE_HEAD
                     .set VE_HEAD = VE_QABORT
                 XT_QABORT:
000949 3800          .dw DO_COLON
                 PFA_QABORT:
                 
                 .endif
00094a 38db
00094b 3830              .DW XT_ROT,XT_DOCONDBRANCH
00094c 094f              DEST(QABO1)
00094d 03ed
00094e 0940              .DW XT_ITYPE,XT_ABORT
00094f 3ebb
000950 381a      QABO1:  .DW XT_2DROP,XT_EXIT
                 
                 .include "words/get-stack.asm"
                 
                 ; Tools
                 ; Get a stack from EEPROM
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_GET_STACK:
000951 ff09          .dw $ff09
000952 6567
000953 2d74
000954 7473
000955 6361
000956 006b          .db "get-stack",0
000957 0944          .dw VE_HEAD
                     .set VE_HEAD = VE_GET_STACK
                 XT_GET_STACK:
000958 3800          .dw DO_COLON
                 PFA_N_FETCH_E:
                 .endif
000959 38ab          .dw XT_DUP
00095a 3c82          .dw XT_CELLPLUS
00095b 38be          .dw XT_SWAP
00095c 3b4d          .dw XT_FETCHE
00095d 38ab          .dw XT_DUP
00095e 38f9          .dw XT_TO_R
00095f 394e          .dw XT_ZERO
000960 38be          .dw XT_SWAP    ; go from bigger to smaller addresses
000961 0806          .dw XT_QDOCHECK
000962 3830          .dw XT_DOCONDBRANCH
000963 096f          DEST(PFA_N_FETCH_E2)
000964 3a89          .dw XT_DODO
                 PFA_N_FETCH_E1:
                     ; ( ee-addr )
000965 3a9a          .dw XT_I
000966 3a2f          .dw XT_1MINUS
000967 3ead          .dw XT_CELLS ; ( -- ee-addr i*2 )
000968 38c9          .dw XT_OVER  ; ( -- ee-addr i*2 ee-addr )
000969 3997          .dw XT_PLUS  ; ( -- ee-addr ee-addr+i
00096a 3b4d          .dw XT_FETCHE ;( -- ee-addr item_i )
00096b 38be          .dw XT_SWAP   ;( -- item_i ee-addr )
00096c 3945          .dw XT_TRUE  ; shortcut for -1
00096d 3aa8          .dw XT_DOPLUSLOOP
00096e 0965          DEST(PFA_N_FETCH_E1)
                 PFA_N_FETCH_E2:
00096f 3ebb          .dw XT_2DROP
000970 38f0          .dw XT_R_FROM
000971 381a          .dw XT_EXIT
                 
                 .include "words/set-stack.asm"
                 
                 ; Tools
                 ; Write a stack to EEPROM
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SET_STACK:
000972 ff09          .dw $ff09
000973 6573
000974 2d74
000975 7473
000976 6361
000977 006b          .db "set-stack",0
000978 0951          .dw VE_HEAD
                     .set VE_HEAD = VE_SET_STACK
                 XT_SET_STACK:
000979 3800          .dw DO_COLON
                 PFA_SET_STACK:
                 .endif
00097a 3eb2          .dw XT_2DUP
00097b 3b29          .dw XT_STOREE ; ( -- i_n .. i_0 n e-addr )
00097c 38be          .dw XT_SWAP    
00097d 394e          .dw XT_ZERO
00097e 0806          .dw XT_QDOCHECK
00097f 3830          .dw XT_DOCONDBRANCH
000980 0987          DEST(PFA_SET_STACK2)
000981 3a89          .dw XT_DODO
                 PFA_SET_STACK1:
000982 3c82          .dw XT_CELLPLUS ; ( -- i_x e-addr )
000983 3ec3          .dw XT_TUCK      ; ( -- e-addr i_x e-addr
000984 3b29          .dw XT_STOREE
000985 3ab7          .dw XT_DOLOOP
000986 0982          DEST(PFA_SET_STACK1)
                 PFA_SET_STACK2:
000987 38d3          .dw XT_DROP
000988 381a          .dw XT_EXIT
                 
                 .include "words/map-stack.asm"
                 
                 ; Tools
                 ; Iterate over a stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_MAPSTACK:
000989 ff09          .dw $ff09
00098a 616d
00098b 2d70
00098c 7473
00098d 6361
00098e 006b          .db "map-stack",0
00098f 0972          .dw VE_HEAD
                     .set VE_HEAD = VE_MAPSTACK
                 XT_MAPSTACK:
000990 3800          .dw DO_COLON
                 PFA_MAPSTACK:
                 .endif
000991 38ab          .dw XT_DUP
000992 3c82          .dw XT_CELLPLUS
000993 38be          .dw XT_SWAP
000994 3b4d          .dw XT_FETCHE
000995 3ead          .dw XT_CELLS
000996 3f89          .dw XT_BOUNDS
000997 0806          .dw XT_QDOCHECK
000998 3830          .dw XT_DOCONDBRANCH
000999 09ad          DEST(PFA_MAPSTACK3)
00099a 3a89          .dw XT_DODO
                 PFA_MAPSTACK1:
00099b 3a9a            .dw XT_I
00099c 3b4d            .dw XT_FETCHE   ; -- i*x XT id
00099d 38be            .dw XT_SWAP
00099e 38f9            .dw XT_TO_R
00099f 3902            .dw XT_R_FETCH
0009a0 3824            .dw XT_EXECUTE  ; i*x id -- j*y true | i*x false
0009a1 38b3            .dw XT_QDUP
0009a2 3830            .dw XT_DOCONDBRANCH
0009a3 09a8            DEST(PFA_MAPSTACK2)
0009a4 38f0               .dw XT_R_FROM
0009a5 38d3               .dw XT_DROP
0009a6 3ac2               .dw XT_UNLOOP
0009a7 381a               .dw XT_EXIT
                 PFA_MAPSTACK2:
0009a8 38f0            .dw XT_R_FROM
0009a9 3837            .dw XT_DOLITERAL
0009aa 0002            .dw 2
0009ab 3aa8            .dw XT_DOPLUSLOOP
0009ac 099b            DEST(PFA_MAPSTACK1)
                 PFA_MAPSTACK3:
0009ad 38d3          .dw XT_DROP
0009ae 394e          .dw XT_ZERO
0009af 381a          .dw XT_EXIT
                 
                 ;
                 ; : map-stack ( i*x XT e-addr -- j*y )
                 ;     dup cell+ swap @e cells bounds ?do 
                 ;       ( -- i*x XT )
                 ;       i @e swap >r r@ execute
                 ;       ?dup if r> drop unloop exit then
                 ;       r>
                 ;     2 +loop drop 0
                 ;
                 .include "words/get-current.asm"
                 
                 ; Search Order
                 ; get the wid of the current compilation word list
                 VE_GET_CURRENT:
0009b0 ff0b          .dw $ff0b
0009b1 6567
0009b2 2d74
0009b3 7563
0009b4 7272
0009b5 6e65
0009b6 0074          .db "get-current",0
0009b7 0989          .dw VE_HEAD
                     .set VE_HEAD = VE_GET_CURRENT
                 XT_GET_CURRENT:
0009b8 3800          .dw DO_COLON
                 PFA_GET_CURRENT:
0009b9 3837          .dw XT_DOLITERAL
0009ba 0066          .dw EE_CURRENT
0009bb 3b4d          .dw XT_FETCHE
0009bc 381a          .dw XT_EXIT
                 .include "words/get-order.asm"
                 
                 ; Search Order
                 ; Get the current search order word list
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_GET_ORDER:
0009bd ff09          .dw $ff09
0009be 6567
0009bf 2d74
0009c0 726f
0009c1 6564
0009c2 0072          .db "get-order",0
0009c3 09b0          .dw VE_HEAD
                     .set VE_HEAD = VE_GET_ORDER
                 XT_GET_ORDER:
0009c4 3800          .dw DO_COLON
                 PFA_GET_ORDER:
                 .endif
0009c5 3837          .dw XT_DOLITERAL
0009c6 006a          .dw CFG_ORDERLISTLEN
0009c7 0958          .dw XT_GET_STACK
0009c8 381a          .dw XT_EXIT
                 
                 .include "words/compare.asm"
                 
                 ; String
                 ; compares two strings in RAM
                 VE_COMPARE:
0009c9 ff07          .dw $ff07
0009ca 6f63
0009cb 706d
0009cc 7261
0009cd 0065          .db "compare",0
0009ce 09bd          .dw VE_HEAD
                     .set VE_HEAD = VE_COMPARE
                 XT_COMPARE:
0009cf 09d0          .dw PFA_COMPARE
                 PFA_COMPARE:
0009d0 93bf          push xh
0009d1 93af          push xl
0009d2 018c          movw temp0, tosl
0009d3 9189
0009d4 9199          loadtos
0009d5 01dc          movw xl, tosl
0009d6 9189
0009d7 9199          loadtos
0009d8 019c          movw temp2, tosl
0009d9 9189
0009da 9199          loadtos
0009db 01fc          movw zl, tosl
                 PFA_COMPARE_LOOP:
0009dc 90ed          ld temp4, X+
0009dd 90f1          ld temp5, Z+
0009de 14ef          cp temp4, temp5
0009df f451          brne PFA_COMPARE_NOTEQUAL
0009e0 950a          dec temp0
0009e1 f019          breq PFA_COMPARE_ENDREACHED2
0009e2 952a          dec temp2
0009e3 f7c1          brne PFA_COMPARE_LOOP
0009e4 c001          rjmp PFA_COMPARE_ENDREACHED
                 PFA_COMPARE_ENDREACHED2:
0009e5 952a          dec temp2
                 PFA_COMPARE_ENDREACHED:
0009e6 2b02          or temp0, temp2
0009e7 f411          brne PFA_COMPARE_CHECKLASTCHAR
0009e8 2788          clr tosl
0009e9 c002          rjmp PFA_COMPARE_DONE
                 PFA_COMPARE_CHECKLASTCHAR:
                 PFA_COMPARE_NOTEQUAL:
0009ea ef8f          ser tosl
0009eb c000          rjmp PFA_COMPARE_DONE
                 
                 PFA_COMPARE_DONE:
0009ec 2f98          mov tosh, tosl
0009ed 91af          pop xl
0009ee 91bf          pop xh
0009ef 940c 3804     jmp_ DO_NEXT
                 .include "words/nfa2lfa.asm"
                 
                 ; System
                 ; get the link field address from the name field address
                 VE_NFA2LFA:
0009f1 ff07         .dw $ff07
0009f2 666e
0009f3 3e61
0009f4 666c
0009f5 0061         .db "nfa>lfa",0
0009f6 09c9         .dw VE_HEAD
                    .set VE_HEAD = VE_NFA2LFA
                 XT_NFA2LFA:
0009f7 3800          .dw DO_COLON
                 PFA_NFA2LFA:
0009f8 06df          .dw XT_NAME2STRING
0009f9 3a29          .dw XT_1PLUS
0009fa 39fe          .dw XT_2SLASH
0009fb 3997          .dw XT_PLUS
0009fc 381a          .dw XT_EXIT
                 .elif AMFORTH_NRWW_SIZE > 2000
                 .else
                 .endif
                 .include "dict_appl.inc"
                 
                 ; they may be moved to the core dictionary if needed
                 
                 .include "dict/compiler2.inc" ; additional words for the compiler
                 
                 ; included almost independently from each other
                 ; on a include-per-use basis
                 ;
                 .if DICT_COMPILER2 == 0
                 .set DICT_COMPILER2 = 1
                 
                 .include "words/set-current.asm"
                 
                 ; Search Order
                 ; set current word list to the given word list wid
                 VE_SET_CURRENT:
0009fd ff0b          .dw $ff0b
0009fe 6573
0009ff 2d74
000a00 7563
000a01 7272
000a02 6e65
000a03 0074          .db "set-current",0
000a04 09f1          .dw VE_HEAD
                     .set VE_HEAD = VE_SET_CURRENT
                 XT_SET_CURRENT:
000a05 3800          .dw DO_COLON
                 PFA_SET_CURRENT:
000a06 3837          .dw XT_DOLITERAL
000a07 0066          .dw EE_CURRENT
000a08 3b29          .dw XT_STOREE
000a09 381a          .dw XT_EXIT
                 .include "words/wordlist.asm"
                 
                 ; Search Order
                 ; create a new, empty wordlist
                 VE_WORDLIST:
000a0a ff08          .dw $ff08
000a0b 6f77
000a0c 6472
000a0d 696c
000a0e 7473          .db "wordlist"
000a0f 09fd          .dw VE_HEAD
                     .set VE_HEAD = VE_WORDLIST
                 XT_WORDLIST:
000a10 3800          .dw DO_COLON
                 PFA_WORDLIST:
000a11 3f0a          .dw XT_EHERE
000a12 394e          .dw XT_ZERO
000a13 38c9          .dw XT_OVER
000a14 3b29          .dw XT_STOREE
000a15 38ab          .dw XT_DUP
000a16 3c82          .dw XT_CELLPLUS
000a17 019c          .dw XT_DOTO
000a18 3f0b          .dw PFA_EHERE
000a19 381a          .dw XT_EXIT
                 
                 .include "words/only.asm"
                 
                 ; Search Order
                 ; replace the order list with the system default list
                 VE_ONLY:
000a1a ff04          .dw $ff04
000a1b 6e6f
000a1c 796c          .db "only"
000a1d 0a0a          .dw VE_HEAD
                     .set VE_HEAD = VE_ONLY
                 XT_ONLY:
000a1e 3800          .dw DO_COLON
                 PFA_ONLY:
000a1f 3837          .dw XT_DOLITERAL
000a20 0068          .dw EE_FORTHWORDLIST
000a21 3837          .dw XT_DOLITERAL
000a22 0001          .dw 1
000a23 0a39          .dw XT_SET_ORDER
000a24 381a          .dw XT_EXIT
                 .include "words/forth-wordlist.asm"
                 
                 ; Search Order
                 ; get the system default word list
                 VE_FORTH_WORDLIST:
000a25 ff0e          .dw $ff0e
000a26 6f66
000a27 7472
000a28 2d68
000a29 6f77
000a2a 6472
000a2b 696c
000a2c 7473          .db "forth-wordlist"
000a2d 0a1a          .dw VE_HEAD
                     .set VE_HEAD = VE_FORTH_WORDLIST
                 XT_FORTH_WORDLIST:
000a2e 3869          .dw PFA_DOVALUE1
                 PFA_FORTH_WORDLIST:
000a2f 0064          .dw EE_WL_FORTH
000a30 3d81          .dw XT_EDEFERFETCH
000a31 3d8b          .dw XT_EDEFERSTORE
                 .include "words/set-order.asm"
                 
                 ; Search Order
                 ; replace the search order list
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SET_ORDER:
000a32 ff09          .dw $ff09
000a33 6573
000a34 2d74
000a35 726f
000a36 6564
000a37 0072          .db "set-order",0
000a38 0a25          .dw VE_HEAD
                     .set VE_HEAD = VE_SET_ORDER
                 XT_SET_ORDER:
000a39 3800          .dw DO_COLON
                 PFA_SET_ORDER:
                 .endif
000a3a 3837          .dw XT_DOLITERAL
000a3b 006a          .dw CFG_ORDERLISTLEN
000a3c 0979          .dw XT_SET_STACK
000a3d 381a          .dw XT_EXIT
                 
                 .include "words/set-recognizer.asm"
                 
                 ; Interpreter
                 ; replace the recognizer list
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SET_RECOGNIZERS:
000a3e ff0f          .dw $ff0f
000a3f 6573
000a40 2d74
000a41 6572
000a42 6f63
000a43 6e67
000a44 7a69
000a45 7265
000a46 0073          .db "set-recognizers",0
000a47 0a32          .dw VE_HEAD
                     .set VE_HEAD = VE_SET_RECOGNIZERS
                 XT_SET_RECOGNIZERS:
000a48 3800          .dw DO_COLON
                 PFA_SET_RECOGNIZERS:
                 .endif
000a49 3837          .dw XT_DOLITERAL
000a4a 007c          .dw CFG_RECOGNIZERLISTLEN
000a4b 0979          .dw XT_SET_STACK
000a4c 381a          .dw XT_EXIT
                 
                 .include "words/get-recognizer.asm"
                 
                 ; Interpreter
                 ; Get the current recognizer list
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_GET_RECOGNIZERS:
000a4d ff0f          .dw $ff0f
000a4e 6567
000a4f 2d74
000a50 6572
000a51 6f63
000a52 6e67
000a53 7a69
000a54 7265
000a55 0073          .db "get-recognizers",0
000a56 0a3e          .dw VE_HEAD
                     .set VE_HEAD = VE_GET_RECOGNIZERS
                 XT_GET_RECOGNIZERS:
000a57 3800          .dw DO_COLON
                 PFA_GET_RECOGNIZERS:
                 .endif
000a58 3837          .dw XT_DOLITERAL
000a59 007c          .dw CFG_RECOGNIZERLISTLEN
000a5a 0958          .dw XT_GET_STACK
000a5b 381a          .dw XT_EXIT
                 .include "words/code.asm"
                 
                 ; Compiler
                 ; create named entry in the dictionary, XT is the data field
                 VE_CODE:
000a5c ff04          .dw $ff04
000a5d 6f63
000a5e 6564          .db "code"
000a5f 0a4d          .dw VE_HEAD
                     .set VE_HEAD = VE_CODE
                 XT_CODE:
000a60 3800          .dw DO_COLON
                 PFA_CODE:
000a61 0716          .dw XT_DOCREATE
000a62 087a          .dw XT_REVEAL
000a63 3f01          .dw XT_DP
000a64 01ae          .dw XT_ICELLPLUS
000a65 0747          .dw XT_COMMA
000a66 381a          .dw XT_EXIT
                 .include "words/end-code.asm"
                 
                 ; Compiler
                 ; finish a code definition
                 VE_ENDCODE:
000a67 ff08          .dw $ff08
000a68 6e65
000a69 2d64
000a6a 6f63
000a6b 6564          .db "end-code"
000a6c 0a5c          .dw VE_HEAD
                     .set VE_HEAD = VE_ENDCODE
                 XT_ENDCODE:
000a6d 3800          .dw DO_COLON
                 PFA_ENDCODE:
000a6e 073c          .dw XT_COMPILE
000a6f 940c          .dw $940c
000a70 073c          .dw XT_COMPILE
000a71 3804          .dw DO_NEXT
000a72 381a          .dw XT_EXIT
                 .include "words/marker.asm"
                 
                 ; System Value
                 ; The eeprom address until which MARKER saves and restores the eeprom data.
                 VE_MARKER:
000a73 ff08          .dw $ff08
000a74 6d28
000a75 7261
000a76 656b
000a77 2972          .db "(marker)"
000a78 0a67          .dw VE_HEAD
                     .set VE_HEAD = VE_MARKER
                 XT_MARKER:
000a79 3869          .dw PFA_DOVALUE1
                 PFA_MARKER:
000a7a 008a          .dw EE_MARKER
000a7b 3d81          .dw XT_EDEFERFETCH
000a7c 3d8b          .dw XT_EDEFERSTORE
                 .include "words/postpone.asm"
                 
                 ; Compiler
                 ; Append the compilation semantics of "name" to the dictionary
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_POSTPONE:
000a7d 0008          .dw $0008
000a7e 6f70
000a7f 7473
000a80 6f70
000a81 656e          .db "postpone"
000a82 0a73          .dw VE_HEAD
                     .set VE_HEAD = VE_POSTPONE
                 XT_POSTPONE:
000a83 3800          .dw DO_COLON
                 PFA_POSTPONE:
                 .endif
000a84 059e          .dw XT_PARSENAME
000a85 05e0          .dw XT_DORECOGNIZER
000a86 01ae          .dw XT_ICELLPLUS 
000a87 01ae          .dw XT_ICELLPLUS
000a88 3bba          .dw XT_FETCHI
000a89 3824          .dw XT_EXECUTE
000a8a 381a          .dw XT_EXIT
                 .endif
                 
                 .include "words/applturnkey.asm"
                 
                 ; R( -- )
                 ; application specific turnkey action
                 VE_APPLTURNKEY:
000a8b ff0b          .dw $ff0b
000a8c 7061
000a8d 6c70
000a8e 7574
000a8f 6e72
000a90 656b
000a91 0079          .db "applturnkey",0
000a92 0a7d          .dw VE_HEAD
                     .set VE_HEAD = VE_APPLTURNKEY
                 XT_APPLTURNKEY:
000a93 3800          .dw DO_COLON
                 PFA_APPLTURNKEY:
000a94 00d6          .dw XT_USART
000a95 3c89          .dw XT_INTON
000a96 0166          .dw XT_DOT_VER
000a97 3f9e          .dw XT_SPACE
000a98 03ba          .dw XT_DOSLITERAL
000a99 000a          .dw 10
000a9a 6f46
000a9b 7472
000a9c 6468
000a9d 6975
000a9e 6f6e          .db "Forthduino"
000a9f 03ed          .dw XT_ITYPE
                 
000aa0 381a          .dw XT_EXIT
                 
                 
                 .set DPSTART = pc
                 .if(pc>AMFORTH_RO_SEG)
                 .endif
                 
                 .org AMFORTH_RO_SEG
                 .include "amforth-interpreter.asm"
                 
                 
                 DO_COLON:
003800 93bf          push XH
003801 93af          push XL          ; PUSH IP
003802 01db          movw XL, wl
003803 9611          adiw xl, 1
                 DO_NEXT:
003804 f06e          brts DO_INTERRUPT
003805 01fd          movw zl, XL        ; READ IP
003806 0fee
003807 1fff
003808 9165
003809 9175          readflashcell wl, wh
00380a 9611          adiw XL, 1        ; INC IP
                 
                 DO_EXECUTE:
00380b 01fb          movw zl, wl
00380c 0fee
00380d 1fff
00380e 9105
00380f 9115          readflashcell temp0,temp1
003810 01f8          movw zl, temp0
003811 9409          ijmp
                 
                 DO_INTERRUPT:
                     ; here we deal with interrupts the forth way
003812 94e8          clt
003813 eb64          ldi wl, LOW(XT_ISREXEC)
003814 e37c          ldi wh, HIGH(XT_ISREXEC)
003815 cff5          rjmp DO_EXECUTE
                 .include "dict/nrww.inc"
                 
                 ; section together with the forth inner interpreter
                 
                 .include "words/exit.asm"
                 
                 ; Compiler
                 ; end of current colon word
                 VE_EXIT:
003816 ff04          .dw $ff04
003817 7865
003818 7469          .db "exit"
003819 0a8b          .dw VE_HEAD
                     .set VE_HEAD = VE_EXIT
                 XT_EXIT:
00381a 381b          .dw PFA_EXIT
                 PFA_EXIT:
00381b 91af          pop XL
00381c 91bf          pop XH
00381d cfe6          jmp_ DO_NEXT
                 .include "words/execute.asm"
                 
                 ; System
                 ; execute XT
                 VE_EXECUTE:
00381e ff07          .dw $ff07
00381f 7865
003820 6365
003821 7475
003822 0065          .db "execute",0
003823 3816          .dw VE_HEAD
                     .set VE_HEAD = VE_EXECUTE
                 XT_EXECUTE:
003824 3825          .dw PFA_EXECUTE
                 PFA_EXECUTE:
003825 01bc          movw wl, tosl
003826 9189
003827 9199          loadtos
003828 cfe2          jmp_ DO_EXECUTE
                 .include "words/dobranch.asm"
                 
                 ; System
                 ; runtime of branch
                 ;VE_DOBRANCH:
                 ;    .dw $ff08
                 ;    .db "(branch)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOBRANCH
                 XT_DOBRANCH:
003829 382a          .dw PFA_DOBRANCH
                 PFA_DOBRANCH:
00382a 01fd          movw zl, XL
00382b 0fee
00382c 1fff
00382d 91a5
00382e 91b5          readflashcell XL,XH
00382f cfd4          jmp_ DO_NEXT
                 .include "words/docondbranch.asm"
                 
                 ; System
                 ; runtime of ?branch
                 ;VE_DOCONDBRANCH:
                 ;    .dw $ff09
                 ;    .db "(?branch)"
                 ;    .dw  VE_HEAD
                 ;    .set VE_HEAD = VE_DOCONDBRANCH
                 XT_DOCONDBRANCH:
003830 3831          .dw PFA_DOCONDBRANCH
                 PFA_DOCONDBRANCH:
003831 2b98          or tosh, tosl
003832 9189
003833 9199          loadtos
003834 f3a9          brbs 1, PFA_DOBRANCH ; 1 is z flag; if tos is zero (false), do the branch
003835 9611          adiw XL, 1
003836 cfcd          jmp_ DO_NEXT
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/doliteral.asm"
                 
                 ; System
                 ; runtime of literal
                 ;VE_DOLITERAL:
                 ;    .dw $ff09
                 ;    .db "(literal)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOLITERAL
                 XT_DOLITERAL:
003837 3838          .dw PFA_DOLITERAL
                 PFA_DOLITERAL:
003838 939a
003839 938a          savetos
00383a 01fd          movw zl, xl
00383b 0fee
00383c 1fff
00383d 9185
00383e 9195          readflashcell tosl,tosh
00383f 9611          adiw xl, 1
003840 cfc3          jmp_ DO_NEXT
                 
                 .include "words/dovariable.asm"
                 
                 ; System
                 ; puts content of parameter field (1 cell) to TOS
                 ;VE_DOVARIABLE:
                 ;    .dw $ff0a
                 ;    .db "(variable)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOVARIABLE
                 XT_DOVARIABLE:
003841 3842          .dw PFA_DOVARIABLE
                 PFA_DOVARIABLE:
003842 939a
003843 938a          savetos
003844 01fb          movw zl, wl
003845 9631          adiw zl,1
003846 0fee
003847 1fff
003848 9185
003849 9195          readflashcell tosl,tosh
00384a cfb9          jmp_ DO_NEXT
                 .include "words/doconstant.asm"
                 
                 ; System
                 ; place data field address on TOS
                 ;VE_DOCONSTANT:
                 ;    .dw $ff0a
                 ;    .db "(constant)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOCONSTANT
                 XT_DOCONSTANT:
00384b 384c          .dw PFA_DOCONSTANT
                 PFA_DOCONSTANT:
00384c 939a
00384d 938a          savetos
00384e 01cb          movw tosl, wl
00384f 9601          adiw tosl, 1
003850 cfb3          jmp_ DO_NEXT
                 .include "words/douser.asm"
                 
                 ; System
                 ; runtime part of user
                 ;VE_DOUSER:
                 ;    .dw $ff06
                 ;    .db "(user)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOUSER
                 XT_DOUSER:
003851 3852          .dw PFA_DOUSER
                 PFA_DOUSER:
003852 939a
003853 938a          savetos
003854 01fb          movw zl, wl
003855 9631          adiw zl, 1
003856 0fee
003857 1fff
003858 9185
003859 9195          readflashcell tosl,tosh
00385a 0d84          add tosl, upl
00385b 1d95          adc tosh, uph
00385c cfa7          jmp_ DO_NEXT
                 .include "words/do-value.asm"
                 
                 ; System
                 ; runtime of value
                 VE_DOVALUE:
00385d ff07          .dw $ff07
00385e 7628
00385f 6c61
003860 6575
003861 0029          .db "(value)", 0
003862 381e          .dw VE_HEAD
                     .set VE_HEAD = VE_DOVALUE
                 XT_DOVALUE:
003863 3800          .dw DO_COLON
                 PFA_DOVALUE:
003864 0716          .dw XT_DOCREATE
003865 087a          .dw XT_REVEAL
003866 073c          .dw XT_COMPILE
003867 3869          .dw PFA_DOVALUE1
003868 381a          .dw XT_EXIT
                 PFA_DOVALUE1:
003869 940e 089e     call_ DO_DODOES
00386b 38ab          .dw XT_DUP
00386c 01ae          .dw XT_ICELLPLUS
00386d 3bba          .dw XT_FETCHI
00386e 3824          .dw XT_EXECUTE
00386f 381a          .dw XT_EXIT
                 
                 ; : (value) <builds does> dup icell+ @i execute ;
                 .include "words/fetch.asm"
                 
                 ; Memory
                 ; read 1 cell from RAM address
                 VE_FETCH:
003870 ff01          .dw $ff01
003871 0040          .db "@",0
003872 385d          .dw VE_HEAD
                     .set VE_HEAD = VE_FETCH
                 XT_FETCH:
003873 3874          .dw PFA_FETCH
                 PFA_FETCH:
                 .if WANT_UNIFIED == 1
                 .endif
                 PFA_FETCHRAM:
003874 01fc          movw zl, tosl
                     ; low byte is read before the high byte
003875 9181          ld tosl, z+
003876 9191          ld tosh, z+
003877 cf8c          jmp_ DO_NEXT
                 .if WANT_UNIFIED == 1
                 .endif
                 .include "words/store.asm"
                 
                 ; Memory
                 ; write n to RAM memory at addr, low byte first
                 VE_STORE:
003878 ff01          .dw $ff01
003879 0021          .db "!",0
00387a 3870          .dw VE_HEAD
                     .set VE_HEAD = VE_STORE
                 XT_STORE:
00387b 387c          .dw PFA_STORE
                 PFA_STORE:
                 .if WANT_UNIFIED == 1
                 .endif
                 PFA_STORERAM:
00387c 01fc          movw zl, tosl
00387d 9189
00387e 9199          loadtos
                     ; the high byte is written before the low byte
00387f 8391          std Z+1, tosh
003880 8380          std Z+0, tosl
003881 9189
003882 9199          loadtos
003883 cf80          jmp_ DO_NEXT
                 .if WANT_UNIFIED == 1
                 .endif
                 .include "words/cstore.asm"
                 
                 ; Memory
                 ; store a single byte to RAM address
                 VE_CSTORE:
003884 ff02          .dw $ff02
003885 2163          .db "c!"
003886 3878          .dw VE_HEAD
                     .set VE_HEAD = VE_CSTORE
                 XT_CSTORE:
003887 3888          .dw PFA_CSTORE
                 PFA_CSTORE:
003888 01fc          movw zl, tosl
003889 9189
00388a 9199          loadtos
00388b 8380          st Z, tosl
00388c 9189
00388d 9199          loadtos
00388e cf75          jmp_ DO_NEXT
                 .include "words/cfetch.asm"
                 
                 ; Memory
                 ; fetch a single byte from memory mapped locations
                 VE_CFETCH:
00388f ff02          .dw $ff02
003890 4063          .db "c@"
003891 3884          .dw VE_HEAD
                     .set VE_HEAD  = VE_CFETCH
                 XT_CFETCH:
003892 3893          .dw PFA_CFETCH
                 PFA_CFETCH:
003893 01fc          movw zl, tosl
003894 2799          clr tosh
003895 8180          ld tosl, Z
003896 cf6d          jmp_ DO_NEXT
                 .include "words/fetch-u.asm"
                 
                 ; Memory
                 ; read 1 cell from USER area
                 VE_FETCHU:
003897 ff02          .dw $ff02
003898 7540          .db "@u"
003899 388f          .dw VE_HEAD
                     .set VE_HEAD = VE_FETCHU
                 XT_FETCHU:
00389a 3800          .dw DO_COLON
                 PFA_FETCHU:
00389b 3af0          .dw XT_UP_FETCH
00389c 3997          .dw XT_PLUS
00389d 3873          .dw XT_FETCH
00389e 381a          .dw XT_EXIT
                 .include "words/store-u.asm"
                 
                 ; Memory
                 ; write n to USER area at offset
                 VE_STOREU:
00389f ff02          .dw $ff02
0038a0 7521          .db "!u"
0038a1 3897          .dw VE_HEAD
                     .set VE_HEAD = VE_STOREU
                 XT_STOREU:
0038a2 3800          .dw DO_COLON
                 PFA_STOREU:
0038a3 3af0          .dw XT_UP_FETCH
0038a4 3997          .dw XT_PLUS
0038a5 387b          .dw XT_STORE
0038a6 381a          .dw XT_EXIT
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/dup.asm"
                 
                 ; Stack
                 ; duplicate TOS
                 VE_DUP:
0038a7 ff03          .dw $ff03
0038a8 7564
0038a9 0070          .db "dup",0
0038aa 389f          .dw VE_HEAD
                     .set VE_HEAD = VE_DUP
                 XT_DUP:
0038ab 38ac          .dw PFA_DUP
                 PFA_DUP:
0038ac 939a
0038ad 938a          savetos
0038ae cf55          jmp_ DO_NEXT
                 .include "words/qdup.asm"
                 
                 ; Stack
                 ; duplicate TOS if non-zero
                 VE_QDUP:
0038af ff04          .dw $ff04
0038b0 643f
0038b1 7075          .db "?dup"
0038b2 38a7          .dw VE_HEAD
                     .set VE_HEAD = VE_QDUP
                 XT_QDUP:
0038b3 38b4          .dw PFA_QDUP
                 PFA_QDUP:
0038b4 2f08          mov temp0, tosl
0038b5 2b09          or temp0, tosh
0038b6 f011          breq PFA_QDUP1
0038b7 939a
0038b8 938a          savetos
                 PFA_QDUP1:
0038b9 cf4a          jmp_ DO_NEXT
                 .include "words/swap.asm"
                 
                 ; Stack
                 ; swaps the two top level stack cells
                 VE_SWAP:
0038ba ff04          .dw $ff04
0038bb 7773
0038bc 7061          .db "swap"
0038bd 38af          .dw VE_HEAD
                     .set VE_HEAD = VE_SWAP
                 XT_SWAP:
0038be 38bf          .dw PFA_SWAP
                 PFA_SWAP:
0038bf 018c          movw temp0, tosl
0038c0 9189
0038c1 9199          loadtos
0038c2 931a          st -Y, temp1
0038c3 930a          st -Y, temp0
0038c4 cf3f          jmp_ DO_NEXT
                 .include "words/over.asm"
                 
                 ; Stack
                 ; Place a copy of x1 on top of the stack
                 VE_OVER:
0038c5 ff04          .dw $ff04
0038c6 766f
0038c7 7265          .db "over"
0038c8 38ba          .dw VE_HEAD
                     .set VE_HEAD = VE_OVER
                 XT_OVER:
0038c9 38ca          .dw PFA_OVER
                 PFA_OVER:
0038ca 939a
0038cb 938a          savetos
0038cc 818a          ldd tosl, Y+2
0038cd 819b          ldd tosh, Y+3
                 
0038ce cf35          jmp_ DO_NEXT
                 .include "words/drop.asm"
                 
                 ; Stack
                 ; drop TOS
                 VE_DROP:
0038cf ff04          .dw $ff04
0038d0 7264
0038d1 706f          .db "drop"
0038d2 38c5          .dw VE_HEAD
                     .set VE_HEAD = VE_DROP
                 XT_DROP:
0038d3 38d4          .dw PFA_DROP
                 PFA_DROP:
0038d4 9189
0038d5 9199          loadtos
0038d6 cf2d          jmp_ DO_NEXT
                 .include "words/rot.asm"
                 
                 ; Stack
                 ; rotate the three top level cells
                 VE_ROT:
0038d7 ff03          .dw $ff03
0038d8 6f72
0038d9 0074          .db "rot",0
0038da 38cf          .dw VE_HEAD
                     .set VE_HEAD = VE_ROT
                 XT_ROT:
0038db 38dc          .dw PFA_ROT
                 PFA_ROT:
0038dc 018c          movw temp0, tosl
0038dd 9129          ld temp2, Y+
0038de 9139          ld temp3, Y+ 
0038df 9189
0038e0 9199          loadtos
                         
0038e1 933a          st -Y, temp3
0038e2 932a          st -Y, temp2
0038e3 931a          st -Y, temp1
0038e4 930a          st -Y, temp0
                 
0038e5 cf1e          jmp_ DO_NEXT
                 .include "words/nip.asm"
                 
                 ; Stack
                 ; Remove Second of Stack
                 VE_NIP:
0038e6 ff03          .dw $ff03
0038e7 696e
0038e8 0070          .db "nip",0
0038e9 38d7          .dw VE_HEAD
                     .set VE_HEAD = VE_NIP
                 XT_NIP:
0038ea 38eb          .dw PFA_NIP
                 PFA_NIP:
0038eb 9622          adiw yl, 2
0038ec cf17          jmp_ DO_NEXT
                 ;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/r_from.asm"
                 
                 ; Stack
                 ; move TOR to TOS
                 VE_R_FROM:
0038ed ff02          .dw $ff02
0038ee 3e72          .db "r>"
0038ef 38e6          .dw VE_HEAD
                     .set VE_HEAD = VE_R_FROM
                 XT_R_FROM:
0038f0 38f1          .dw PFA_R_FROM
                 PFA_R_FROM:
0038f1 939a
0038f2 938a          savetos
0038f3 918f          pop tosl
0038f4 919f          pop tosh
0038f5 cf0e          jmp_ DO_NEXT
                 .include "words/to_r.asm"
                 
                 ; Stack
                 ; move TOS to TOR
                 VE_TO_R:
0038f6 ff02          .dw $ff02
0038f7 723e          .db ">r"
0038f8 38ed          .dw VE_HEAD
                     .set VE_HEAD = VE_TO_R
                 XT_TO_R:
0038f9 38fa          .dw PFA_TO_R
                 PFA_TO_R:
0038fa 939f          push tosh
0038fb 938f          push tosl
0038fc 9189
0038fd 9199          loadtos
0038fe cf05          jmp_ DO_NEXT
                 .include "words/r_fetch.asm"
                 
                 ; Stack
                 ; fetch content of TOR
                 VE_R_FETCH:
0038ff ff02          .dw $ff02
003900 4072          .db "r@"
003901 38f6          .dw VE_HEAD
                     .set VE_HEAD = VE_R_FETCH
                 XT_R_FETCH:
003902 3903          .dw PFA_R_FETCH
                 PFA_R_FETCH:
003903 939a
003904 938a          savetos
003905 918f          pop tosl
003906 919f          pop tosh
003907 939f          push tosh
003908 938f          push tosl
003909 cefa          jmp_ DO_NEXT
                 
                 
                 .include "words/not-equal.asm"
                 
                 ; Compare
                 ; true if n1 is not equal to n2
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_NOTEQUAL:
00390a ff02          .dw $ff02
00390b 3e3c          .db "<>"
00390c 38ff          .dw VE_HEAD
                     .set VE_HEAD = VE_NOTEQUAL
                 XT_NOTEQUAL:
00390d 3800          .dw DO_COLON
                 PFA_NOTEQUAL:
                 .endif
                 
00390e 3fd3
00390f 3914
003910 381a          .DW XT_EQUAL,XT_ZEROEQUAL,XT_EXIT
                 .include "words/equalzero.asm"
                 
                 ; Compare
                 ; compare with 0 (zero)
                 VE_ZEROEQUAL:
003911 ff02          .dw $ff02
003912 3d30          .db "0="
003913 390a          .dw VE_HEAD
                     .set VE_HEAD = VE_ZEROEQUAL
                 XT_ZEROEQUAL:
003914 3915          .dw PFA_ZEROEQUAL
                 PFA_ZEROEQUAL:
003915 2b98          or tosh, tosl
003916 f5d1          brne PFA_ZERO1
003917 c030          rjmp PFA_TRUE1
                 .include "words/lesszero.asm"
                 
                 ; Compare
                 ; compare with zero
                 VE_ZEROLESS:
003918 ff02          .dw $ff02
003919 3c30          .db "0<"
00391a 3911          .dw VE_HEAD
                     .set VE_HEAD = VE_ZEROLESS
                 XT_ZEROLESS:
00391b 391c          .dw PFA_ZEROLESS
                 PFA_ZEROLESS:
00391c fd97          sbrc tosh,7
00391d c02a          rjmp PFA_TRUE1
00391e c032          rjmp PFA_ZERO1
                 .include "words/greaterzero.asm"
                 
                 ; Compare
                 ; true if n1 is greater than 0
                 VE_GREATERZERO:
00391f ff02          .dw $ff02
003920 3e30          .db "0>"
003921 3918          .dw VE_HEAD
                     .set VE_HEAD = VE_GREATERZERO
                 XT_GREATERZERO:
003922 3923          .dw PFA_GREATERZERO
                 PFA_GREATERZERO:
003923 1582          cp tosl, zerol
003924 0593          cpc tosh, zeroh
003925 f15c          brlt PFA_ZERO1
003926 f151          brbs 1, PFA_ZERO1
003927 c020          rjmp PFA_TRUE1
                 .include "words/d-greaterzero.asm"
                 
                 ; Compare
                 ; compares if a double double cell number is greater 0
                 VE_DGREATERZERO:
003928 ff03          .dw $ff03
003929 3064
00392a 003e          .db "d0>",0
00392b 391f          .dw VE_HEAD
                     .set VE_HEAD = VE_DGREATERZERO
                 XT_DGREATERZERO:
00392c 392d          .dw PFA_DGREATERZERO
                 PFA_DGREATERZERO:
00392d 1582          cp tosl, zerol
00392e 0593          cpc tosh, zeroh
00392f 9189
003930 9199          loadtos
003931 0582          cpc tosl, zerol
003932 0593          cpc tosh, zeroh
003933 f0ec          brlt PFA_ZERO1
003934 f0e1          brbs 1, PFA_ZERO1
003935 c012          rjmp PFA_TRUE1
                 .include "words/d-lesszero.asm"
                 
                 ; Compare
                 ; compares if a double double cell number is less than 0
                 VE_DXT_ZEROLESS:
003936 ff03          .dw $ff03
003937 3064
003938 003c          .db "d0<",0
003939 3928          .dw VE_HEAD
                     .set VE_HEAD = VE_DXT_ZEROLESS
                 XT_DXT_ZEROLESS:
00393a 393b          .dw PFA_DXT_ZEROLESS
                 PFA_DXT_ZEROLESS:
00393b 9622          adiw Y,2
00393c fd97          sbrc tosh,7
00393d 940c 3948     jmp PFA_TRUE1
00393f 940c 3951     jmp PFA_ZERO1
                 
                 .include "words/true.asm"
                 
                 ; Arithmetics
                 ; leaves the value -1 (true) on TOS
                 VE_TRUE:
003941 ff04          .dw $ff04
003942 7274
003943 6575          .db "true"
003944 3936          .dw VE_HEAD
                     .set VE_HEAD = VE_TRUE
                 XT_TRUE:
003945 3946          .dw PFA_TRUE
                 PFA_TRUE:
003946 939a
003947 938a          savetos
                 PFA_TRUE1:
003948 ef8f          ser tosl
003949 ef9f          ser tosh
00394a ceb9          jmp_ DO_NEXT
                 .include "words/zero.asm"
                 
                 ; Arithmetics
                 ; place a value 0 on TOS
                 VE_ZERO:
00394b ff01          .dw $ff01
00394c 0030          .db "0",0
00394d 3941          .dw VE_HEAD
                     .set VE_HEAD = VE_ZERO
                 XT_ZERO:
00394e 394f          .dw PFA_ZERO
                 PFA_ZERO:
00394f 939a
003950 938a          savetos
                 PFA_ZERO1:
003951 01c1          movw tosl, zerol
003952 ceb1          jmp_ DO_NEXT
                 .include "words/uless.asm"
                 
                 ; Compare
                 ; true if u1 < u2 (unsigned)
                 VE_ULESS:
003953 ff02          .dw $ff02
003954 3c75          .db "u<"
003955 394b          .dw VE_HEAD
                     .set VE_HEAD = VE_ULESS
                 XT_ULESS:
003956 3957          .dw PFA_ULESS
                 PFA_ULESS:
003957 9129          ld temp2, Y+
003958 9139          ld temp3, Y+
003959 1782          cp tosl, temp2
00395a 0793          cpc tosh, temp3
00395b f3a8          brlo PFA_ZERO1
00395c f3a1          brbs 1, PFA_ZERO1
00395d cfea          jmp_ PFA_TRUE1
                 .include "words/u-greater.asm"
                 
                 ; Compare
                 ; true if u1 > u2 (unsigned)
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UGREATER:
00395e ff02          .dw $ff02
00395f 3e75          .db "u>"
003960 3953          .dw VE_HEAD
                     .set VE_HEAD = VE_UGREATER
                 XT_UGREATER:
003961 3800          .dw DO_COLON
                 PFA_UGREATER:
                 .endif
003962 38be          .DW XT_SWAP
003963 3956          .dw XT_ULESS
003964 381a          .dw XT_EXIT
                 .include "words/less.asm"
                 
                 ; Compare
                 ; true if n1 is less than n2
                     VE_LESS:
003965 ff01          .dw $ff01
003966 003c          .db "<",0
003967 395e          .dw VE_HEAD
                     .set VE_HEAD = VE_LESS
                 XT_LESS:
003968 3969          .dw PFA_LESS
                 PFA_LESS:
003969 9129          ld temp2, Y+
00396a 9139          ld temp3, Y+
00396b 1728          cp temp2, tosl
00396c 0739          cpc temp3, tosh
                 PFA_LESSDONE:
00396d f71c          brge PFA_ZERO1
00396e cfd9          rjmp PFA_TRUE1
                 .include "words/greater.asm"
                 
                 ; Compare
                 ; flag is true if n1 is greater than n2
                 VE_GREATER:
00396f ff01          .dw $ff01
003970 003e          .db ">",0
003971 3965          .dw VE_HEAD
                     .set VE_HEAD = VE_GREATER
                 XT_GREATER:
003972 3973          .dw PFA_GREATER
                 PFA_GREATER:
003973 9129          ld temp2, Y+
003974 9139          ld temp3, Y+
003975 1728          cp temp2, tosl
003976 0739          cpc temp3, tosh
                 PFA_GREATERDONE:
003977 f2cc          brlt PFA_ZERO1
003978 f2c1          brbs 1, PFA_ZERO1
003979 cfce          rjmp PFA_TRUE1
                 
                 .include "words/log2.asm"
                 
                 ; Arithmetics
                 ; logarithm to base 2 or highest set bitnumber
                 VE_LOG2:
00397a ff04          .dw $ff04
00397b 6f6c
00397c 3267          .db "log2"
00397d 396f          .dw VE_HEAD
                     .set VE_HEAD = VE_LOG2
                 XT_LOG2:
00397e 397f          .dw PFA_LOG2
                 PFA_LOG2:
00397f 01fc          movw zl, tosl
003980 2799          clr tosh
003981 e180          ldi tosl, 16
                 PFA_LOG2_1:
003982 958a          dec tosl
003983 f022          brmi PFA_LOG2_2 ; wrong data
003984 0fee          lsl  zl
003985 1fff          rol  zh
003986 f7d8          brcc PFA_LOG2_1
003987 ce7c          jmp_ DO_NEXT
                 
                 PFA_LOG2_2:
003988 959a          dec tosh
003989 ce7a          jmp_ DO_NEXT
                 .include "words/minus.asm"
                 
                 ; Arithmetics
                 ; subtract n2 from n1
                 VE_MINUS:
00398a ff01          .dw $ff01
00398b 002d          .db "-",0
00398c 397a          .dw VE_HEAD
                     .set VE_HEAD = VE_MINUS
                 XT_MINUS:
00398d 398e          .dw PFA_MINUS
                 PFA_MINUS:
00398e 9109          ld temp0, Y+
00398f 9119          ld temp1, Y+
003990 1b08          sub temp0, tosl
003991 0b19          sbc temp1, tosh
003992 01c8          movw tosl, temp0
003993 ce70          jmp_ DO_NEXT
                 .include "words/plus.asm"
                 
                 ; Arithmetics
                 ; add n1 and n2
                 VE_PLUS:
003994 ff01          .dw $ff01
003995 002b          .db "+",0
003996 398a          .dw VE_HEAD
                     .set VE_HEAD = VE_PLUS
                 XT_PLUS:
003997 3998          .dw PFA_PLUS
                 PFA_PLUS:
003998 9109          ld temp0, Y+
003999 9119          ld temp1, Y+
00399a 0f80          add tosl, temp0
00399b 1f91          adc tosh, temp1
00399c ce67          jmp_ DO_NEXT
                 .include "words/mstar.asm"
                 
                 ; Arithmetics
                 ; multiply 2 cells to a double cell
                 VE_MSTAR:
00399d ff02          .dw $ff02
00399e 2a6d          .db "m*"
00399f 3994          .dw VE_HEAD
                     .set VE_HEAD = VE_MSTAR
                 XT_MSTAR:
0039a0 39a1          .dw PFA_MSTAR
                 PFA_MSTAR:
0039a1 018c          movw temp0, tosl
0039a2 9189
0039a3 9199          loadtos
0039a4 019c          movw temp2, tosl
                     ; high cell ah*bh
0039a5 0231          muls temp3, temp1
0039a6 0170          movw temp4, r0
                     ; low cell  al*bl
0039a7 9f20          mul  temp2, temp0
0039a8 01c0          movw tosl, r0
                     ; signed ah*bl
0039a9 0330          mulsu temp3, temp0
0039aa 08f3          sbc   temp5, zeroh
0039ab 0d90          add   tosh,  r0
0039ac 1ce1          adc   temp4, r1
0039ad 1cf3          adc   temp5, zeroh
                     
                     ; signed al*bh
0039ae 0312          mulsu temp1, temp2
0039af 08f3          sbc   temp5, zeroh
0039b0 0d90          add   tosh,  r0
0039b1 1ce1          adc   temp4, r1
0039b2 1cf3          adc   temp5, zeroh
                 
0039b3 939a
0039b4 938a          savetos
0039b5 01c7          movw tosl, temp4
0039b6 ce4d          jmp_ DO_NEXT
                 .include "words/umslashmod.asm"
                 
                 ; Arithmetics
                 ; unsigned division ud / u2 with remainder
                 VE_UMSLASHMOD:
0039b7 ff06          .dw $ff06
0039b8 6d75
0039b9 6d2f
0039ba 646f          .db "um/mod"
0039bb 399d          .dw VE_HEAD
                     .set VE_HEAD = VE_UMSLASHMOD
                 XT_UMSLASHMOD:
0039bc 39bd          .dw PFA_UMSLASHMOD
                 PFA_UMSLASHMOD:
0039bd 017c          movw temp4, tosl
                 
0039be 9129          ld temp2, Y+
0039bf 9139          ld temp3, Y+
                   
0039c0 9109          ld temp0, Y+
0039c1 9119          ld temp1, Y+
                 
                 ;; unsigned 32/16 -> 16r16 divide
                 
                 PFA_UMSLASHMODmod:
                 
                   ; set loop counter
0039c2 e140          ldi temp6,$10
                 
                 PFA_UMSLASHMODmod_loop:
                     ; shift left, saving high bit
0039c3 2755          clr temp7
0039c4 0f00          lsl temp0
0039c5 1f11          rol temp1
0039c6 1f22          rol temp2
0039c7 1f33          rol temp3
0039c8 1f55          rol temp7
                 
                   ; try subtracting divisor
0039c9 152e          cp temp2, temp4
0039ca 053f          cpc temp3, temp5
0039cb 0552          cpc temp7,zerol
                 
0039cc f018          brcs PFA_UMSLASHMODmod_loop_control
                 
                 PFA_UMSLASHMODmod_subtract:
                     ; dividend is large enough
                     ; do the subtraction for real
                     ; and set lowest bit
0039cd 9503          inc temp0
0039ce 192e          sub temp2, temp4
0039cf 093f          sbc temp3, temp5
                 
                 PFA_UMSLASHMODmod_loop_control:
0039d0 954a          dec  temp6
0039d1 f789          brne PFA_UMSLASHMODmod_loop
                 
                 PFA_UMSLASHMODmod_done:
                     ; put remainder on stack
0039d2 933a          st -Y,temp3
0039d3 932a          st -Y,temp2
                 
                     ; put quotient on stack
0039d4 01c8          movw tosl, temp0
0039d5 ce2e          jmp_ DO_NEXT
                 .include "words/umstar.asm"
                 
                 ; Arithmetics
                 ; multiply 2 unsigned cells to a double cell
                 VE_UMSTAR:
0039d6 ff03          .dw $ff03
0039d7 6d75
0039d8 002a          .db "um*",0
0039d9 39b7          .dw VE_HEAD
                     .set VE_HEAD = VE_UMSTAR
                 XT_UMSTAR:
0039da 39db          .dw PFA_UMSTAR
                 PFA_UMSTAR:
0039db 018c          movw temp0, tosl
0039dc 9189
0039dd 9199          loadtos
                     ; result: (temp3*temp1)* 65536 + (temp3*temp0 + temp1*temp2) * 256 + (temp0 * temp2)
                     ; low bytes
0039de 9f80          mul tosl,temp0
0039df 01f0          movw zl, r0
0039e0 2722          clr temp2
0039e1 2733          clr temp3
                     ; middle bytes
0039e2 9f90          mul tosh, temp0
0039e3 0df0          add zh, r0
0039e4 1d21          adc temp2, r1
0039e5 1d33          adc temp3, zeroh
                         
0039e6 9f81          mul tosl, temp1
0039e7 0df0          add zh, r0
0039e8 1d21          adc temp2, r1
0039e9 1d33          adc temp3, zeroh
                     
0039ea 9f91          mul tosh, temp1
0039eb 0d20          add temp2, r0
0039ec 1d31          adc temp3, r1
0039ed 01cf          movw tosl, zl
0039ee 939a
0039ef 938a          savetos
0039f0 01c9          movw tosl, temp2
0039f1 ce12          jmp_ DO_NEXT
                 
                 .include "words/invert.asm"
                 
                 ; Arithmetics
                 ; 1-complement of TOS
                 VE_INVERT:
0039f2 ff06          .dw $ff06
0039f3 6e69
0039f4 6576
0039f5 7472          .db "invert"
0039f6 39d6          .dw VE_HEAD
                     .set VE_HEAD = VE_INVERT
                 XT_INVERT:
0039f7 39f8          .dw PFA_INVERT
                 PFA_INVERT:
0039f8 9580          com tosl
0039f9 9590          com tosh
0039fa ce09          jmp_ DO_NEXT
                 .include "words/2slash.asm"
                 
                 ; Arithmetics
                 ; arithmetic shift right
                 VE_2SLASH:
0039fb ff02          .dw $ff02
0039fc 2f32          .db "2/"
0039fd 39f2          .dw VE_HEAD
                     .set VE_HEAD = VE_2SLASH
                 XT_2SLASH:
0039fe 39ff          .dw PFA_2SLASH
                 PFA_2SLASH:
0039ff 9595          asr tosh
003a00 9587          ror tosl
003a01 ce02          jmp_ DO_NEXT
                 .include "words/2star.asm"
                 
                 ; Arithmetics
                 ; arithmetic shift left, filling with zero
                 VE_2STAR:
003a02 ff02          .dw $ff02
003a03 2a32          .db "2*"
003a04 39fb          .dw VE_HEAD
                     .set VE_HEAD = VE_2STAR
                 XT_2STAR:
003a05 3a06          .dw PFA_2STAR
                 PFA_2STAR:
003a06 0f88          lsl tosl
003a07 1f99          rol tosh
003a08 cdfb          jmp_ DO_NEXT
                 .include "words/and.asm"
                 
                 ; Logic
                 ; bitwise and
                 VE_AND:
003a09 ff03          .dw $ff03
003a0a 6e61
003a0b 0064          .db "and",0
003a0c 3a02          .dw VE_HEAD
                     .set VE_HEAD = VE_AND
                 XT_AND:
003a0d 3a0e          .dw PFA_AND
                 PFA_AND:
003a0e 9109          ld temp0, Y+
003a0f 9119          ld temp1, Y+
003a10 2380          and tosl, temp0
003a11 2391          and tosh, temp1
003a12 cdf1          jmp_ DO_NEXT
                 .include "words/or.asm"
                 
                 ; Logic
                 ; logical or
                 VE_OR:
003a13 ff02          .dw $ff02
003a14 726f          .db "or"
003a15 3a09          .dw VE_HEAD
                     .set VE_HEAD = VE_OR
                 XT_OR:
003a16 3a17          .dw PFA_OR
                 PFA_OR:
003a17 9109          ld temp0, Y+
003a18 9119          ld temp1, Y+
003a19 2b80          or tosl, temp0
003a1a 2b91          or tosh, temp1
003a1b cde8          jmp_ DO_NEXT
                 
                 .include "words/xor.asm"
                 
                 ; Logic
                 ; exclusive or
                 VE_XOR:
003a1c ff03          .dw $ff03
003a1d 6f78
003a1e 0072          .db "xor",0
003a1f 3a13          .dw VE_HEAD
                     .set VE_HEAD = VE_XOR
                 XT_XOR:
003a20 3a21          .dw PFA_XOR
                 PFA_XOR:
003a21 9109          ld temp0, Y+
003a22 9119          ld temp1, Y+
003a23 2780          eor tosl, temp0
003a24 2791          eor tosh, temp1
003a25 cdde          jmp_ DO_NEXT
                 
                 .include "words/1plus.asm"
                 
                 ; Arithmetics
                 ; optimized increment
                 VE_1PLUS:
003a26 ff02          .dw $ff02
003a27 2b31          .db "1+"
003a28 3a1c          .dw VE_HEAD
                     .set VE_HEAD = VE_1PLUS
                 XT_1PLUS:
003a29 3a2a          .dw PFA_1PLUS
                 PFA_1PLUS:
003a2a 9601          adiw tosl,1
003a2b cdd8          jmp_ DO_NEXT
                 .include "words/1minus.asm"
                 
                 ; Arithmetics
                 ; optimized decrement
                 VE_1MINUS:
003a2c ff02          .dw $ff02 
003a2d 2d31          .db "1-"
003a2e 3a26          .dw VE_HEAD
                     .set VE_HEAD = VE_1MINUS
                 XT_1MINUS:
003a2f 3a30          .dw PFA_1MINUS
                 PFA_1MINUS:
003a30 9701          sbiw tosl, 1
003a31 cdd2          jmp_ DO_NEXT
                 .include "words/lshift.asm"
                 
                 ; Arithmetics
                 ; logically shift n1 left n2 times
                 VE_LSHIFT:
003a32 ff06          .dw $ff06
003a33 736c
003a34 6968
003a35 7466          .db "lshift"
003a36 3a2c          .dw VE_HEAD
                     .set VE_HEAD = VE_LSHIFT
                 XT_LSHIFT:
003a37 3a38          .dw PFA_LSHIFT
                 PFA_LSHIFT:
003a38 01fc          movw zl, tosl
003a39 9189
003a3a 9199          loadtos
                 PFA_LSHIFT1:
003a3b 9731          sbiw zl, 1
003a3c f01a          brmi PFA_LSHIFT2
003a3d 0f88          lsl tosl
003a3e 1f99          rol tosh
003a3f cffb          rjmp PFA_LSHIFT1
                 PFA_LSHIFT2:
003a40 cdc3          jmp_ DO_NEXT
                 
                 .include "words/rshift.asm"
                 
                 ; Arithmetics
                 ; shift n1 n2-times logically right
                 VE_RSHIFT:
003a41 ff06          .dw $ff06
003a42 7372
003a43 6968
003a44 7466          .db "rshift"
003a45 3a32          .dw VE_HEAD
                     .set VE_HEAD = VE_RSHIFT
                 XT_RSHIFT:
003a46 3a47          .dw PFA_RSHIFT
                 PFA_RSHIFT:
003a47 01fc          movw zl, tosl
003a48 9189
003a49 9199          loadtos
                 PFA_RSHIFT1:
003a4a 9731          sbiw zl, 1
003a4b f01a          brmi PFA_RSHIFT2
003a4c 9596          lsr tosh
003a4d 9587          ror tosl
003a4e cffb          rjmp PFA_RSHIFT1
                 PFA_RSHIFT2:
003a4f cdb4          jmp_ DO_NEXT
                 
                 .include "words/plusstore.asm"
                 
                 ; Arithmetics
                 ; add n to content of RAM address a-addr
                 VE_PLUSSTORE:
003a50 ff02          .dw $ff02
003a51 212b          .db "+!"
003a52 3a41          .dw VE_HEAD
                     .set VE_HEAD = VE_PLUSSTORE
                 XT_PLUSSTORE:
003a53 3a54          .dw PFA_PLUSSTORE
                 PFA_PLUSSTORE:
003a54 01fc          movw zl, tosl
003a55 9189
003a56 9199          loadtos
003a57 8120          ldd temp2, Z+0
003a58 8131          ldd temp3, Z+1
003a59 0f82          add tosl, temp2
003a5a 1f93          adc tosh, temp3
003a5b 8380          std Z+0, tosl
003a5c 8391          std Z+1, tosh
003a5d 9189
003a5e 9199          loadtos
003a5f cda4          jmp_ DO_NEXT
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/rpfetch.asm"
                 
                 ; Stack
                 ; current return stack pointer address
                 VE_RP_FETCH:
003a60 ff03          .dw $ff03
003a61 7072
003a62 0040          .db "rp@",0
003a63 3a50          .dw VE_HEAD
                     .set VE_HEAD = VE_RP_FETCH
                 XT_RP_FETCH:
003a64 3a65          .dw PFA_RP_FETCH
                 PFA_RP_FETCH:
003a65 939a
003a66 938a          savetos
003a67 b78d          in tosl, SPL
003a68 b79e          in tosh, SPH
003a69 cd9a          jmp_ DO_NEXT
                 .include "words/rpstore.asm"
                 
                 ; Stack
                 ; set return stack pointer
                 VE_RP_STORE:
003a6a ff03          .dw $ff03
003a6b 7072
003a6c 0021          .db "rp!",0
003a6d 3a60          .dw VE_HEAD
                     .set VE_HEAD = VE_RP_STORE
                 XT_RP_STORE:
003a6e 3a6f          .dw PFA_RP_STORE
                 PFA_RP_STORE:
003a6f b72f          in temp2, SREG
003a70 94f8          cli
003a71 bf8d          out SPL, tosl
003a72 bf9e          out SPH, tosh
003a73 bf2f          out SREG, temp2
003a74 9189
003a75 9199          loadtos
003a76 cd8d          jmp_ DO_NEXT
                 .include "words/spfetch.asm"
                 
                 ; Stack
                 ; current data stack pointer
                 VE_SP_FETCH:
003a77 ff03          .dw $ff03
003a78 7073
003a79 0040          .db "sp@",0
003a7a 3a6a          .dw VE_HEAD
                     .set VE_HEAD = VE_SP_FETCH
                 XT_SP_FETCH:
003a7b 3a7c          .dw PFA_SP_FETCH
                 PFA_SP_FETCH:
003a7c 939a
003a7d 938a          savetos
003a7e 01ce          movw tosl, yl
003a7f cd84          jmp_ DO_NEXT
                 .include "words/spstore.asm"
                 
                 ; Stack
                 ; set data stack pointer to addr
                 VE_SP_STORE:
003a80 ff03          .dw $ff03
003a81 7073
003a82 0021          .db "sp!",0
003a83 3a77          .dw VE_HEAD
                     .set VE_HEAD = VE_SP_STORE
                 XT_SP_STORE:
003a84 3a85          .dw PFA_SP_STORE
                 PFA_SP_STORE:
003a85 01ec          movw yl, tosl
003a86 9189
003a87 9199          loadtos
003a88 cd7b          jmp_ DO_NEXT
                 
                 .include "words/dodo.asm"
                 
                 ; System
                 ; runtime of do
                 ;VE_DODO:
                 ;    .dw $ff04
                 ;    .db "(do)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DODO
                 XT_DODO:
003a89 3a8a          .dw PFA_DODO
                 PFA_DODO:
003a8a 9129          ld temp2, Y+
003a8b 9139          ld temp3, Y+  ; limit
                 PFA_DODO1:
003a8c e8e0          ldi zl, $80
003a8d 0f3e          add temp3, zl
003a8e 1b82          sub  tosl, temp2
003a8f 0b93          sbc  tosh, temp3
                 
003a90 933f          push temp3
003a91 932f          push temp2    ; limit  ( --> limit + $8000)
003a92 939f          push tosh
003a93 938f          push tosl     ; start -> index ( --> index - (limit - $8000)
003a94 9189
003a95 9199          loadtos
003a96 cd6d          jmp_ DO_NEXT
                 .include "words/i.asm"
                 
                 ; Compiler
                 ; current loop counter
                 VE_I:
003a97 ff01          .dw $FF01
003a98 0069          .db "i",0
003a99 3a80          .dw VE_HEAD
                     .set VE_HEAD = VE_I
                 XT_I:
003a9a 3a9b          .dw PFA_I
                 PFA_I:
003a9b 939a
003a9c 938a          savetos
003a9d 918f          pop tosl
003a9e 919f          pop tosh  ; index
003a9f 91ef          pop zl
003aa0 91ff          pop zh    ; limit
003aa1 93ff          push zh
003aa2 93ef          push zl
003aa3 939f          push tosh
003aa4 938f          push tosl
003aa5 0f8e          add tosl, zl
003aa6 1f9f          adc tosh, zh
003aa7 cd5c          jmp_ DO_NEXT
                 .include "words/doplusloop.asm"
                 
                 ; System
                 ; runtime of +loop
                 ;VE_DOPLUSLOOP:
                 ;    .dw $ff07
                 ;    .db "(+loop)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOPLUSLOOP
                 XT_DOPLUSLOOP:
003aa8 3aa9          .dw PFA_DOPLUSLOOP
                 PFA_DOPLUSLOOP:
003aa9 91ef          pop zl
003aaa 91ff          pop zh
003aab 0fe8          add zl, tosl
003aac 1ff9          adc zh, tosh
003aad 9189
003aae 9199          loadtos
003aaf f01b          brvs PFA_DOPLUSLOOP_LEAVE
                     ; next cycle
                 PFA_DOPLUSLOOP_NEXT:
                     ; next iteration
003ab0 93ff          push zh
003ab1 93ef          push zl
003ab2 cd77          rjmp PFA_DOBRANCH ; read next cell from dictionary and jump to its destination
                 PFA_DOPLUSLOOP_LEAVE:
003ab3 910f          pop  temp0
003ab4 911f          pop  temp1  ; remove limit
003ab5 9611          adiw xl, 1  ; skip branch-back address
003ab6 cd4d          jmp_ DO_NEXT
                 .include "words/doloop.asm"
                 
                 ; System
                 ; runtime of loop
                 ;VE_DOLOOP:
                 ;    .dw $ff06
                 ;    .db "(loop)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOLOOP
                 XT_DOLOOP:
003ab7 3ab8          .dw PFA_DOLOOP
                 PFA_DOLOOP:
003ab8 91ef          pop zl
003ab9 91ff          pop zh
003aba 9631          adiw zl,1
003abb f3bb          brvs PFA_DOPLUSLOOP_LEAVE
003abc cff3          jmp_ PFA_DOPLUSLOOP_NEXT
                 .include "words/unloop.asm"
                 
                 ; Compiler
                 ; remove loop-sys, exit the loop and continue execution after it
                 VE_UNLOOP:
003abd ff06          .dw $ff06
003abe 6e75
003abf 6f6c
003ac0 706f          .db "unloop"
003ac1 3a97          .dw VE_HEAD
                     .set VE_HEAD = VE_UNLOOP
                 XT_UNLOOP:
003ac2 3ac3          .dw PFA_UNLOOP
                 PFA_UNLOOP:
003ac3 911f          pop temp1
003ac4 910f          pop temp0
003ac5 911f          pop temp1
003ac6 910f          pop temp0
003ac7 cd3c          jmp_ DO_NEXT
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
                 .include "words/cmove_g.asm"
                 
                 ; Memory
                 ; copy data in RAM from higher to lower addresses.
                 VE_CMOVE_G:
003ac8 ff06          .dw $ff06
003ac9 6d63
003aca 766f
003acb 3e65          .db "cmove>"
003acc 3abd          .dw VE_HEAD
                     .set VE_HEAD  = VE_CMOVE_G
                 XT_CMOVE_G:
003acd 3ace          .dw PFA_CMOVE_G
                 PFA_CMOVE_G:
003ace 93bf          push xh
003acf 93af          push xl
003ad0 91e9          ld zl, Y+
003ad1 91f9          ld zh, Y+ ; addr-to
003ad2 91a9          ld xl, Y+
003ad3 91b9          ld xh, Y+ ; addr-from
003ad4 2f09          mov temp0, tosh
003ad5 2b08          or temp0, tosl
003ad6 f041          brbs 1, PFA_CMOVE_G1
003ad7 0fe8          add zl, tosl
003ad8 1ff9          adc zh, tosh
003ad9 0fa8          add xl, tosl
003ada 1fb9          adc xh, tosh
                 PFA_CMOVE_G2:
003adb 911e          ld temp1, -X
003adc 9312          st -Z, temp1
003add 9701          sbiw tosl, 1
003ade f7e1          brbc 1, PFA_CMOVE_G2
                 PFA_CMOVE_G1:
003adf 91af          pop xl
003ae0 91bf          pop xh
003ae1 9189
003ae2 9199          loadtos
003ae3 cd20          jmp_ DO_NEXT
                 .include "words/byteswap.asm"
                 
                 ; Arithmetics
                 ; exchange the bytes of the TOS
                 VE_BYTESWAP:
003ae4 ff02          .dw $ff02
003ae5 3c3e          .db "><"
003ae6 3ac8          .dw VE_HEAD
                     .set VE_HEAD = VE_BYTESWAP
                 XT_BYTESWAP:
003ae7 3ae8          .dw PFA_BYTESWAP
                 PFA_BYTESWAP:
003ae8 2f09          mov temp0, tosh
003ae9 2f98          mov tosh, tosl
003aea 2f80          mov tosl, temp0
003aeb cd18          jmp_ DO_NEXT
                 .include "words/up.asm"
                 
                 ; System Variable
                 ; get user area pointer
                 VE_UP_FETCH:
003aec ff03          .dw $ff03
003aed 7075
003aee 0040          .db "up@",0
003aef 3ae4          .dw VE_HEAD
                     .set VE_HEAD = VE_UP_FETCH
                 XT_UP_FETCH:
003af0 3af1          .dw PFA_UP_FETCH
                 PFA_UP_FETCH:
003af1 939a
003af2 938a          savetos
003af3 01c2          movw tosl, upl
003af4 cd0f          jmp_ DO_NEXT
                 
                 ; ( addr -- ) 
                 ; System Variable
                 ; set user area pointer
                 VE_UP_STORE:
003af5 ff03          .dw $ff03
003af6 7075
003af7 0021          .db "up!",0
003af8 3aec          .dw VE_HEAD
                     .set VE_HEAD = VE_UP_STORE
                 XT_UP_STORE:
003af9 3afa          .dw PFA_UP_STORE
                 PFA_UP_STORE:
003afa 012c          movw upl, tosl
003afb 9189
003afc 9199          loadtos
003afd cd06          jmp_ DO_NEXT
                 .include "words/1ms.asm"
                 
                 ; Time
                 ; busy waits (almost) exactly 1 millisecond
                 VE_1MS:
003afe ff03          .dw $ff03
003aff 6d31
003b00 0073          .db "1ms",0
003b01 3af5          .dw VE_HEAD
                     .set VE_HEAD = VE_1MS
                 XT_1MS:
003b02 3b03          .dw PFA_1MS
                 PFA_1MS:
003b03 eae0
003b04 e0ff
003b05 9731
003b06 f7f1          delay 1000
003b07 ccfc          jmp_ DO_NEXT
                 .include "words/2to_r.asm"
                 
                 ; Stack
                 ; move DTOS to TOR
                 VE_2TO_R:
003b08 ff03          .dw $ff03
003b09 3e32
003b0a 0072          .db "2>r",0
003b0b 3afe          .dw VE_HEAD
                     .set VE_HEAD = VE_2TO_R
                 XT_2TO_R:
003b0c 3b0d          .dw PFA_2TO_R
                 PFA_2TO_R:
003b0d 01fc          movw zl, tosl
003b0e 9189
003b0f 9199          loadtos
003b10 939f          push tosh
003b11 938f          push tosl
003b12 93ff          push zh
003b13 93ef          push zl
003b14 9189
003b15 9199          loadtos
003b16 cced          jmp_ DO_NEXT
                 .include "words/2r_from.asm"
                 
                 ; Stack
                 ; move DTOR to TOS
                 VE_2R_FROM:
003b17 ff03          .dw $ff03
003b18 7232
003b19 003e          .db "2r>",0
003b1a 3b08          .dw VE_HEAD
                     .set VE_HEAD = VE_2R_FROM
                 XT_2R_FROM:
003b1b 3b1c          .dw PFA_2R_FROM
                 PFA_2R_FROM:
003b1c 939a
003b1d 938a          savetos
003b1e 91ef          pop zl
003b1f 91ff          pop zh
003b20 918f          pop tosl
003b21 919f          pop tosh
003b22 939a
003b23 938a          savetos
003b24 01cf          movw tosl, zl
003b25 ccde          jmp_ DO_NEXT
                 
                 .include "words/store-e.asm"
                 
                 ; Memory
                 ; write n (2bytes) to eeprom address
                 VE_STOREE:
003b26 ff02          .dw $ff02
003b27 6521          .db "!e"
003b28 3b17          .dw VE_HEAD
                     .set VE_HEAD = VE_STOREE
                 XT_STOREE:
003b29 3b2a          .dw PFA_STOREE
                 PFA_STOREE:
                 .if WANT_UNIFIED == 1
                 .endif
                 PFA_STOREE0:
003b2a 01fc          movw zl, tosl
003b2b 9189
003b2c 9199          loadtos
003b2d b72f          in_ temp2, SREG
003b2e 94f8          cli
003b2f d028          rcall PFA_FETCHE2
003b30 b500          in_  temp0, EEDR
003b31 1708          cp temp0,tosl
003b32 f009          breq PFA_STOREE3
003b33 d00b          rcall PFA_STOREE1
                 PFA_STOREE3:
003b34 9631          adiw zl,1
003b35 d022          rcall PFA_FETCHE2
003b36 b500          in_  temp0, EEDR
003b37 1709          cp temp0,tosh
003b38 f011          breq PFA_STOREE4
003b39 2f89          mov tosl, tosh
003b3a d004          rcall PFA_STOREE1
                 PFA_STOREE4:
003b3b bf2f          out_ SREG, temp2
003b3c 9189
003b3d 9199          loadtos
003b3e ccc5          jmp_ DO_NEXT
                     
                 PFA_STOREE1:
003b3f 99f9          sbic EECR, EEPE
003b40 cffe          rjmp PFA_STOREE1
                 
                 PFA_STOREE2: ; estore_wait_low_spm:
003b41 b707          in_ temp0, SPMCSR
003b42 fd00          sbrc temp0,SPMEN
003b43 cffd          rjmp PFA_STOREE2
                 
003b44 bdf2          out_ EEARH,zh
003b45 bde1          out_ EEARL,zl
003b46 bd80          out_ EEDR, tosl
003b47 9afa          sbi EECR,EEMPE
003b48 9af9          sbi EECR,EEPE
                 
003b49 9508          ret
                 .if WANT_UNIFIED == 1
                 .endif
                 .include "words/fetch-e.asm"
                 
                 ; Memory
                 ; read 1 cell from eeprom
                 VE_FETCHE:
003b4a ff02          .dw $ff02
003b4b 6540          .db "@e"
003b4c 3b26          .dw VE_HEAD
                     .set VE_HEAD = VE_FETCHE
                 XT_FETCHE:
003b4d 3b4e          .dw PFA_FETCHE
                 PFA_FETCHE:
                 .if WANT_UNIFIED == 1
                 .endif
                 PFA_FETCHE1:
003b4e b72f          in_ temp2, SREG
003b4f 94f8          cli
003b50 01fc          movw zl, tosl
003b51 d006          rcall PFA_FETCHE2
003b52 b580          in_ tosl, EEDR
                 
003b53 9631          adiw zl,1
                 
003b54 d003          rcall PFA_FETCHE2
003b55 b590          in_  tosh, EEDR
003b56 bf2f          out_ SREG, temp2
003b57 ccac          jmp_ DO_NEXT
                 
                 PFA_FETCHE2:
003b58 99f9          sbic EECR, EEPE
003b59 cffe          rjmp PFA_FETCHE2
                 
003b5a bdf2          out_ EEARH,zh
003b5b bde1          out_ EEARL,zl
                 
003b5c 9af8          sbi EECR,EERE
003b5d 9508          ret
                 
                 .if WANT_UNIFIED == 1
                 .endif
                 .include "words/store-i.asm"
                 
                 ; System Value
                 ; Deferred action to write a single 16bit cell to flash
                 VE_STOREI:
003b5e ff02          .dw $ff02
003b5f 6921          .db "!i"
003b60 3b4a          .dw VE_HEAD
                     .set VE_HEAD = VE_STOREI
                 XT_STOREI:
003b61 3de0          .dw PFA_DODEFER1
                 PFA_STOREI:
003b62 0060          .dw EE_STOREI
003b63 3d81          .dw XT_EDEFERFETCH
003b64 3d8b          .dw XT_EDEFERSTORE
                 .if FLASHEND > $10000
                 .else
                   .include "words/store-i_nrww.asm"
                 
                 ; Memory
                 ; writes n to flash memory using assembly code (code to be placed in boot loader section)
                 VE_DO_STOREI_NRWW:
003b65 ff09          .dw $ff09
003b66 2128
003b67 2d69
003b68 726e
003b69 7777
003b6a 0029          .db "(!i-nrww)",0
003b6b 3b5e          .dw VE_HEAD
                     .set VE_HEAD = VE_DO_STOREI_NRWW
                 XT_DO_STOREI:
003b6c 3b6d          .dw PFA_DO_STOREI_NRWW
                 PFA_DO_STOREI_NRWW:
                   ; store status register
003b6d b71f        in temp1,SREG
003b6e 931f        push temp1
003b6f 94f8        cli
                 
003b70 019c        movw temp2, tosl ; save the (word) address
003b71 9189
003b72 9199        loadtos          ; get the new value for the flash cell
003b73 93af        push xl
003b74 93bf        push xh
003b75 93cf        push yl
003b76 93df        push yh
003b77 d009        rcall DO_STOREI_atmega
003b78 91df        pop yh
003b79 91cf        pop yl
003b7a 91bf        pop xh
003b7b 91af        pop xl
                   ; finally clear the stack
003b7c 9189
003b7d 9199        loadtos
003b7e 911f        pop temp1
                   ; restore status register (and interrupt enable flag)
003b7f bf1f        out SREG,temp1
                 
003b80 cc83        jmp_ DO_NEXT
                 
                 ; 
                 DO_STOREI_atmega:
                   ; write data to temp page buffer
                   ; use the values in tosl/tosh at the
                   ; appropiate place
003b81 d011        rcall pageload
                 
                   ; erase page if needed
                   ; it is needed if a bit goes from 0 to 1
003b82 94e0        com temp4
003b83 94f0        com temp5
003b84 218e        and tosl, temp4
003b85 219f        and tosh, temp5
003b86 2b98        or tosh, tosl
003b87 f021        breq DO_STOREI_writepage 
003b88 94b3          inc erase_counter
003b89 01f9          movw zl, temp2
003b8a e002          ldi temp0,(1<<PGERS)
003b8b d020          rcall dospm
                 
                 DO_STOREI_writepage:
                   ; write page
003b8c 01f9        movw zl, temp2
003b8d e004        ldi temp0,(1<<PGWRT)
003b8e d01d        rcall dospm
                 
                   ; reenable RWW section
003b8f 01f9        movw zl, temp2
003b90 e100        ldi temp0,(1<<RWWSRE)
003b91 d01a        rcall dospm
003b92 9508        ret
                 
                 ; load the desired page
                 .equ pagemask = ~ ( PAGESIZE - 1 )
                 pageload:
003b93 01f9        movw zl, temp2
                   ; get the beginning of page
003b94 7ce0        andi zl,low(pagemask)
003b95 7fff        andi zh,high(pagemask)
003b96 01ef        movw y, z
                   ; loop counter (in words)
003b97 e4a0        ldi xl,low(pagesize)
003b98 e0b0        ldi xh,high(pagesize)
                 pageload_loop:
                   ; we need the current flash value anyways
003b99 01fe        movw z, y
003b9a 0fee
003b9b 1fff
003b9c 9145
003b9d 9155        readflashcell temp6, temp7 ; destroys Z
                   ; now check: if Z points to the same cell as temp2/3, we want the new data
003b9e 01fe        movw z, y
003b9f 17e2        cp zl, temp2
003ba0 07f3        cpc zh, temp3
003ba1 f011        breq pageload_newdata
003ba2 010a          movw r0, temp6
003ba3 c002          rjmp pageload_cont
                 pageload_newdata:
003ba4 017a          movw temp4, temp6
003ba5 010c          movw r0, tosl
                 pageload_cont:
003ba6 2700        clr temp0
003ba7 d004        rcall dospm
003ba8 9621        adiw y, 1
003ba9 9711        sbiw x, 1
003baa f771        brne pageload_loop
                 
                 pageload_done:
003bab 9508        ret
                 
                 
                 ;; dospm
                 ;;
                 ;; execute spm instruction
                 ;;   temp0 holds the value for SPMCR
                 
                 dospm:
                 dospm_wait_ee:
003bac 99f9        sbic EECR, EEPE
003bad cffe        rjmp dospm_wait_ee
                 dospm_wait_spm:
003bae b717        in_  temp1, SPMCSR
003baf fd10        sbrc temp1, SPMEN
003bb0 cffd        rjmp dospm_wait_spm
                 
                   ; turn the word addres into a byte address
003bb1 0fee
003bb2 1fff        writeflashcell
                   ; execute spm
003bb3 6001        ori temp0, (1<<SPMEN)
003bb4 bf07        out_ SPMCSR,temp0
003bb5 95e8        spm
003bb6 9508        ret
                 .endif
                 .include "words/fetch-i.asm"
                 
                 ; Memory
                 ; read 1 cell from flash
                 VE_FETCHI:
003bb7 ff02          .dw $ff02
003bb8 6940          .db "@i"
003bb9 3b65          .dw VE_HEAD
                     .set VE_HEAD = VE_FETCHI
                 XT_FETCHI:
003bba 3bbb          .dw PFA_FETCHI
                 PFA_FETCHI:
003bbb 01fc          movw zl, tosl
003bbc 0fee
003bbd 1fff
003bbe 9185
003bbf 9195          readflashcell tosl,tosh
003bc0 cc43          jmp_ DO_NEXT
                 
                 .if AMFORTH_NRWW_SIZE>8000
                 .elif AMFORTH_NRWW_SIZE>4000
                 .include "dict/core_4k.inc"
                 
                 ; in a short distance to DO_NEXT
                 .include "words/n_to_r.asm"
                 
                 ; Stack
                 ; move n items from data stack to return stack
                 VE_N_TO_R:
003bc1 ff03          .dw $ff03
003bc2 3e6e
003bc3 0072          .db "n>r",0
003bc4 3bb7          .dw VE_HEAD
                     .set VE_HEAD = VE_N_TO_R
                 XT_N_TO_R:
003bc5 3bc6          .dw PFA_N_TO_R
                 PFA_N_TO_R:
003bc6 01fc          movw zl, tosl
003bc7 2f08          mov  temp0, tosl
                 PFA_N_TO_R1:
003bc8 9189
003bc9 9199          loadtos
003bca 939f          push tosh
003bcb 938f          push tosl
003bcc 950a          dec temp0
003bcd f7d1          brne PFA_N_TO_R1
003bce 93ef          push zl
003bcf 93ff          push zh
003bd0 9189
003bd1 9199          loadtos
003bd2 cc31          jmp_ DO_NEXT
                 .include "words/n_r_from.asm"
                 
                 ; Stack
                 ; move n items from return stack to data stack
                 VE_N_R_FROM:
003bd3 ff03          .dw $ff03
003bd4 726e
003bd5 003e          .db "nr>",0
003bd6 3bc1          .dw VE_HEAD
                     .set VE_HEAD = VE_N_R_FROM
                 XT_N_R_FROM:
003bd7 3bd8          .dw PFA_N_R_FROM
                 PFA_N_R_FROM:
003bd8 939a
003bd9 938a          savetos
003bda 91ff          pop zh
003bdb 91ef          pop zl
003bdc 2f0e          mov  temp0, zl
                 PFA_N_R_FROM1:
003bdd 918f          pop tosl
003bde 919f          pop tosh
003bdf 939a
003be0 938a          savetos
003be1 950a          dec temp0
003be2 f7d1          brne PFA_N_R_FROM1
003be3 01cf          movw tosl, zl
003be4 cc1f          jmp_ DO_NEXT
                 .include "words/d-2star.asm"
                 
                 ; Arithmetics
                 ; shift a double cell left
                 VE_D2STAR:
003be5 ff03          .dw $ff03
003be6 3264
003be7 002a          .db "d2*",0
003be8 3bd3          .dw VE_HEAD
                     .set VE_HEAD = VE_D2STAR
                 XT_D2STAR:
003be9 3bea          .dw PFA_D2STAR
                 PFA_D2STAR:
003bea 9109          ld temp0, Y+
003beb 9119          ld temp1, Y+
003bec 0f00          lsl temp0
003bed 1f11          rol temp1
003bee 1f88          rol tosl
003bef 1f99          rol tosh
003bf0 931a          st -Y, temp1
003bf1 930a          st -Y, temp0
003bf2 cc11          jmp_ DO_NEXT
                 .include "words/d-2slash.asm"
                 
                 ; Arithmetics
                 ; shift a double cell value right
                 VE_D2SLASH:
003bf3 ff03          .dw $ff03
003bf4 3264
003bf5 002f          .db "d2/",0
003bf6 3be5          .dw VE_HEAD
                     .set VE_HEAD = VE_D2SLASH
                 XT_D2SLASH:
003bf7 3bf8          .dw PFA_D2SLASH
                 PFA_D2SLASH:
003bf8 9109          ld temp0, Y+
003bf9 9119          ld temp1, Y+
003bfa 9595          asr tosh
003bfb 9587          ror tosl
003bfc 9517          ror temp1
003bfd 9507          ror temp0
003bfe 931a          st -Y, temp1
003bff 930a          st -Y, temp0
003c00 cc03          jmp_ DO_NEXT
                 .include "words/d-plus.asm"
                 
                 ; Arithmetics
                 ; add 2 double cell values
                 VE_DPLUS:
003c01 ff02          .dw $ff02
003c02 2b64          .db "d+"
003c03 3bf3          .dw VE_HEAD
                     .set VE_HEAD = VE_DPLUS
                 XT_DPLUS:
003c04 3c05          .dw PFA_DPLUS
                 PFA_DPLUS:
003c05 9129          ld temp2, Y+
003c06 9139          ld temp3, Y+
                 
003c07 90e9          ld temp4, Y+
003c08 90f9          ld temp5, Y+
003c09 9149          ld temp6, Y+
003c0a 9159          ld temp7, Y+
                 
003c0b 0f24          add temp2, temp6
003c0c 1f35          adc temp3, temp7
003c0d 1d8e          adc tosl, temp4
003c0e 1d9f          adc tosh, temp5
                     
003c0f 933a          st -Y, temp3
003c10 932a          st -Y, temp2
003c11 cbf2          jmp_ DO_NEXT
                 .include "words/d-minus.asm"
                 
                 ; Arithmetics
                 ; subtract d2 from d1 
                 VE_DMINUS:
003c12 ff02          .dw $ff02
003c13 2d64          .db "d-"
003c14 3c01          .dw VE_HEAD
                     .set VE_HEAD = VE_DMINUS
                 XT_DMINUS:
003c15 3c16          .dw PFA_DMINUS
                 PFA_DMINUS:
003c16 9129          ld temp2, Y+
003c17 9139          ld temp3, Y+
                 
003c18 90e9          ld temp4, Y+
003c19 90f9          ld temp5, Y+
003c1a 9149          ld temp6, Y+
003c1b 9159          ld temp7, Y+
                 
003c1c 1b42          sub temp6, temp2
003c1d 0b53          sbc temp7, temp3
003c1e 0ae8          sbc temp4, tosl
003c1f 0af9          sbc temp5, tosh
                 
003c20 935a          st -Y, temp7
003c21 934a          st -Y, temp6
003c22 01c7          movw tosl, temp4
003c23 cbe0          jmp_ DO_NEXT
                 .include "words/d-invert.asm"
                 
                 ; Arithmetics
                 ; invert all bits in the double cell value
                 VE_DINVERT:
003c24 ff07          .dw $ff07
003c25 6964
003c26 766e
003c27 7265
003c28 0074          .db "dinvert",0
003c29 3c12          .dw VE_HEAD
                     .set VE_HEAD = VE_DINVERT
                 XT_DINVERT:
003c2a 3c2b          .dw PFA_DINVERT
                 PFA_DINVERT:
003c2b 9109          ld temp0, Y+
003c2c 9119          ld temp1, Y+
003c2d 9580          com tosl
003c2e 9590          com tosh
003c2f 9500          com temp0
003c30 9510          com temp1
003c31 931a          st -Y, temp1
003c32 930a          st -Y, temp0
003c33 cbd0          jmp_ DO_NEXT
                 .include "words/slashmod.asm"
                 
                 ; Arithmetics
                 ; signed division n1/n2 with remainder and quotient
                 VE_SLASHMOD:
003c34 ff04          .dw $ff04
003c35 6d2f
003c36 646f          .db "/mod"
003c37 3c24          .dw VE_HEAD
                     .set VE_HEAD = VE_SLASHMOD
                 XT_SLASHMOD:
003c38 3c39          .dw PFA_SLASHMOD
                 PFA_SLASHMOD:
003c39 019c          movw temp2, tosl
                     
003c3a 9109          ld temp0, Y+
003c3b 9119          ld temp1, Y+
                 
003c3c 2f41          mov	temp6,temp1	;move dividend High to sign register
003c3d 2743          eor	temp6,temp3	;xor divisor High with sign register
003c3e ff17          sbrs	temp1,7	;if MSB in dividend set
003c3f c004          rjmp	PFA_SLASHMOD_1
003c40 9510          com	temp1		;    change sign of dividend
003c41 9500          com	temp0		
003c42 5f0f          subi	temp0,low(-1)
003c43 4f1f          sbci	temp1,high(-1)
                 PFA_SLASHMOD_1:	
003c44 ff37          sbrs	temp3,7	;if MSB in divisor set
003c45 c004          rjmp	PFA_SLASHMOD_2
003c46 9530          com	temp3		;    change sign of divisor
003c47 9520          com	temp2		
003c48 5f2f          subi	temp2,low(-1)
003c49 4f3f          sbci	temp3,high(-1)
003c4a 24ee      PFA_SLASHMOD_2:	clr	temp4	;clear remainder Low byte
003c4b 18ff          sub	temp5,temp5;clear remainder High byte and carry
003c4c e151          ldi	temp7,17	;init loop counter
                 
003c4d 1f00      PFA_SLASHMOD_3:	rol	temp0		;shift left dividend
003c4e 1f11          rol	temp1
003c4f 955a          dec	temp7		;decrement counter
003c50 f439          brne	PFA_SLASHMOD_5		;if done
003c51 ff47          sbrs	temp6,7		;    if MSB in sign register set
003c52 c004          rjmp	PFA_SLASHMOD_4
003c53 9510          com	temp1	;        change sign of result
003c54 9500          com	temp0
003c55 5f0f          subi	temp0,low(-1)
003c56 4f1f          sbci	temp1,high(-1)
003c57 c00b      PFA_SLASHMOD_4:	rjmp PFA_SLASHMODmod_done			;    return
003c58 1cee      PFA_SLASHMOD_5:	rol	temp4	;shift dividend into remainder
003c59 1cff          rol	temp5
003c5a 1ae2          sub	temp4,temp2	;remainder = remainder - divisor
003c5b 0af3          sbc	temp5,temp3	;
003c5c f420          brcc	PFA_SLASHMOD_6		;if result negative
003c5d 0ee2          add	temp4,temp2	;    restore remainder
003c5e 1ef3          adc	temp5,temp3
003c5f 9488          clc			;    clear carry to be shifted into result
003c60 cfec          rjmp	PFA_SLASHMOD_3		;else
003c61 9408      PFA_SLASHMOD_6:	sec			;    set carry to be shifted into result
003c62 cfea          rjmp	PFA_SLASHMOD_3
                 
                 PFA_SLASHMODmod_done:
                     ; put remainder on stack
003c63 92fa          st -Y,temp5
003c64 92ea          st -Y,temp4
                 
                     ; put quotient on stack
003c65 01c8          movw tosl, temp0
003c66 cb9d          jmp_ DO_NEXT
                 .include "words/abs.asm"
                 
                 ; Arithmetics
                 ; get the absolute value
                 VE_ABS:
003c67 ff03          .dw $ff03
003c68 6261
003c69 0073          .db "abs",0
003c6a 3c34          .dw VE_HEAD
                     .set VE_HEAD = VE_ABS
                 XT_ABS:
003c6b 3c6c          .dw PFA_ABS
                 PFA_ABS:
003c6c 2399          tst tosh
003c6d f41a          brpl PFA_ABS1
003c6e 9580          com tosl
003c6f 9590          com tosh
003c70 9601          adiw tosl, 1
                 PFA_ABS1:
003c71 cb92          jmp_ do_next
                 .include "words/pick.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_PICK:
003c72 ff04          .dw $ff04
003c73 6970
003c74 6b63          .db "pick"
003c75 3c67          .dw VE_HEAD
                     .set VE_HEAD = VE_PICK
                 XT_PICK:
003c76 3800          .dw DO_COLON
                 PFA_PICK:
                 .endif
003c77 3a29          .dw XT_1PLUS
003c78 3ead          .dw XT_CELLS
003c79 3a7b          .dw XT_SP_FETCH
003c7a 3997          .dw XT_PLUS
003c7b 3873          .dw XT_FETCH
003c7c 381a          .dw XT_EXIT
                 .include "words/cellplus.asm"
                 
                 ; Arithmetics
                 ; add the size of an address-unit to a-addr1
                 VE_CELLPLUS:
003c7d ff05          .dw $ff05
003c7e 6563
003c7f 6c6c
003c80 002b          .db "cell+",0
003c81 3c72          .dw VE_HEAD
                     .set VE_HEAD = VE_CELLPLUS
                 XT_CELLPLUS:
003c82 3c83          .dw PFA_CELLPLUS
                 PFA_CELLPLUS:
003c83 9602          adiw tosl, CELLSIZE
003c84 cb7f          jmp_ DO_NEXT
                 .include "dict/interrupt.inc"
                 
                 .include "words/int-on.asm"
                 
                 ; Interrupt
                 ; turns on all interrupts
                 VE_INTON:
003c85 ff04          .dw $ff04
003c86 692b
003c87 746e          .db "+int"
003c88 3c7d          .dw VE_HEAD
                     .set VE_HEAD = VE_INTON
                 XT_INTON:
003c89 3c8a          .dw PFA_INTON
                 PFA_INTON:
003c8a 9478          sei
003c8b cb78          jmp_ DO_NEXT
                 .include "words/int-off.asm"
                 
                 ; Interrupt
                 ; turns off all interrupts 
                 VE_INTOFF:
003c8c ff04          .dw $ff04
003c8d 692d
003c8e 746e          .db "-int"
003c8f 3c85          .dw VE_HEAD
                     .set VE_HEAD = VE_INTOFF
                 XT_INTOFF:
003c90 3c91          .dw PFA_INTOFF
                 PFA_INTOFF:
003c91 94f8          cli
003c92 cb71          jmp_ DO_NEXT
                 .include "words/int-store.asm"
                 
                 ; Interrupt
                 ; stores XT as interrupt vector i
                 VE_INTSTORE:
003c93 ff04          .dw $ff04
003c94 6e69
003c95 2174          .db "int!"
003c96 3c8c          .dw VE_HEAD
                     .set VE_HEAD = VE_INTSTORE
                 XT_INTSTORE:
003c97 3800          .dw DO_COLON
                 PFA_INTSTORE:
003c98 3837          .dw XT_DOLITERAL
003c99 0000          .dw intvec
003c9a 3997          .dw XT_PLUS
003c9b 3b29          .dw XT_STOREE
003c9c 381a          .dw XT_EXIT
                 .include "words/int-fetch.asm"
                 
                 ; Interrupt
                 ; fetches XT from interrupt vector i
                 VE_INTFETCH:
003c9d ff04          .dw $ff04
003c9e 6e69
003c9f 4074          .db "int@"
003ca0 3c93          .dw VE_HEAD
                     .set VE_HEAD = VE_INTFETCH
                 XT_INTFETCH:
003ca1 3800          .dw DO_COLON
                 PFA_INTFETCH:
003ca2 3837          .dw XT_DOLITERAL
003ca3 0000          .dw intvec
003ca4 3997          .dw XT_PLUS
003ca5 3b4d          .dw XT_FETCHE
003ca6 381a          .dw XT_EXIT
                 .include "words/int-trap.asm"
                 
                 ; Interrupt
                 ; trigger an interrupt
                 VE_INTTRAP:
003ca7 ff08          .dw $ff08
003ca8 6e69
003ca9 2d74
003caa 7274
003cab 7061          .db "int-trap"
003cac 3c9d          .dw VE_HEAD
                     .set VE_HEAD = VE_INTTRAP
                 XT_INTTRAP:
003cad 3cae          .dw PFA_INTTRAP
                 PFA_INTTRAP:
003cae 9380 0116     sts intcur, tosl
003cb0 9189
003cb1 9199          loadtos
003cb2 9468          set ; set the interrupt flag for the inner interpreter
003cb3 cb50          jmp_ DO_NEXT
                 
                 .include "words/isr-exec.asm"
                 
                 ; Interrupt
                 ; executes an interrupt service routine
                 ;VE_ISREXEC:
                 ;    .dw $ff08
                 ;    .db "isr-exec"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_ISREXEC
                 XT_ISREXEC:
003cb4 3800          .dw DO_COLON
                 PFA_ISREXEC:
003cb5 3837          .dw XT_DOLITERAL
003cb6 0116          .dw intcur
003cb7 3892          .dw XT_CFETCH
003cb8 3837          .dw XT_DOLITERAL
003cb9 0000          .dw intvec
003cba 3997          .dw XT_PLUS
003cbb 3b4d          .dw XT_FETCHE
003cbc 3824          .dw XT_EXECUTE
003cbd 3cbf          .dw XT_ISREND
003cbe 381a          .dw XT_EXIT
                 .include "words/isr-end.asm"
                 
                 ; Interrupt
                 ; re-enables interrupts in an ISR
                 ;VE_ISREND:
                 ;    .dw $ff07
                 ;    .db "isr-end",0
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_ISREND
                 XT_ISREND:
003cbf 3cc0          .dw PFA_ISREND
                 PFA_ISREND:
003cc0 d001          rcall PFA_ISREND1 ; clear the interrupt flag for the controller
003cc1 cb42          jmp_ DO_NEXT
                 PFA_ISREND1:
003cc2 9518          reti
                 
                 ; now the relocatable colon words
                 .include "words/prompt-ok.asm"
                 
                 ; System
                 ; send the READY prompt to the command line
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 ;VE_PROMPTOK:
                 ;    .dw $ff02
                 ;    .db "ok"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_PROMPTOK
                 XT_PROMPTOK:
003cc3 3800          .dw DO_COLON
                 PFA_PROMPTOK:
003cc4 03ba          .dw XT_DOSLITERAL
003cc5 0003          .dw 3
003cc6 6f20
003cc7 006b          .db " ok",0
                 .endif
003cc8 03ed          .dw XT_ITYPE
003cc9 381a          .dw XT_EXIT
                 .include "words/prompt-ready.asm"
                 
                 ; System
                 ; process the error prompt
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 ;VE_PROMPTRDY:
                 ;    .dw $ff04
                 ;    .db "p_er"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_PROMPTRDY
                 XT_PROMPTREADY:
003cca 3800          .dw DO_COLON
                 PFA_PROMPTREADY:
003ccb 03ba          .dw XT_DOSLITERAL
003ccc 0002          .dw 2
003ccd 203e          .db "> "
                 .endif
003cce 3f91          .dw XT_CR
003ccf 03ed          .dw XT_ITYPE
003cd0 381a          .dw XT_EXIT
                 .include "words/prompt-error.asm"
                 
                 ; System
                 ; process the error prompt
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 ;VE_PROMPTERROR:
                 ;    .dw $ff04
                 ;    .db "p_er"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_PROMPTERROR
                 XT_PROMPTERROR:
003cd1 3800          .dw DO_COLON
                 PFA_PROMPTERROR:
003cd2 03ba      	.dw XT_DOSLITERAL
003cd3 0004          .dw 4
003cd4 3f20
003cd5 203f          .db " ?? "
                 .endif
003cd6 03ed          .dw XT_ITYPE
003cd7 3ea6          .dw XT_BASE
003cd8 3873          .dw XT_FETCH
003cd9 38f9          .dw XT_TO_R
003cda 3f31          .dw XT_DECIMAL
003cdb 036f          .dw XT_DOT
003cdc 3ecb          .dw XT_TO_IN
003cdd 3873          .dw XT_FETCH
003cde 036f          .dw XT_DOT
003cdf 38f0          .dw XT_R_FROM
003ce0 3ea6          .dw XT_BASE
003ce1 387b          .dw XT_STORE
003ce2 381a          .dw XT_EXIT
                 
                 .include "words/quit.asm"
                 
                 ; System
                 ; main loop of amforth. accept - interpret in an endless loop
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_QUIT:
003ce3 ff04          .dw $ff04
003ce4 7571
003ce5 7469          .db "quit"
003ce6 3ca7          .dw VE_HEAD
                     .set VE_HEAD = VE_QUIT
                 XT_QUIT:
003ce7 3800          .dw DO_COLON
                 PFA_QUIT:
                 .endif
                 PFA_QUIT1:
003ce8 083d
003ce9 0844
003cea 387b          .dw XT_LP0,XT_LP,XT_STORE
003ceb 05b8          .dw XT_SP0
003cec 3a84          .dw XT_SP_STORE
003ced 05c5          .dw XT_RP0
003cee 3a6e          .dw XT_RP_STORE
003cef 08df          .dw XT_LBRACKET
                 
                 PFA_QUIT2:
003cf0 3ea0          .dw XT_STATE
003cf1 3873          .dw XT_FETCH
003cf2 3914          .dw XT_ZEROEQUAL
003cf3 3830          .dw XT_DOCONDBRANCH
003cf4 3cf6          DEST(PFA_QUIT4)
003cf5 3cca          .dw XT_PROMPTREADY
                 PFA_QUIT4:
003cf6 04c5          .dw XT_REFILL
003cf7 3830          .dw XT_DOCONDBRANCH
003cf8 3cf0          DEST(PFA_QUIT2)
003cf9 3837          .dw XT_DOLITERAL
003cfa 0608          .dw XT_INTERPRET
003cfb 3d51          .dw XT_CATCH
003cfc 38b3          .dw XT_QDUP
003cfd 3830          .dw XT_DOCONDBRANCH
003cfe 3d08          DEST(PFA_QUIT3)
003cff 38ab      	.dw XT_DUP
003d00 3837      	.dw XT_DOLITERAL
003d01 fffe      	.dw -2
003d02 3968      	.dw XT_LESS
003d03 3830      	.dw XT_DOCONDBRANCH
003d04 3d06      	DEST(PFA_QUIT5)
003d05 3cd1      	.dw XT_PROMPTERROR
                 PFA_QUIT5:
003d06 3829      	.dw XT_DOBRANCH
003d07 3ce8      	DEST(PFA_QUIT1)
                 PFA_QUIT3:
003d08 3cc3          .dw XT_PROMPTOK
003d09 3829          .dw XT_DOBRANCH
003d0a 3cf0          DEST(PFA_QUIT2)
003d0b 381a          .dw XT_EXIT ; never reached
                 
                 .include "words/pause.asm"
                 
                 ; Multitasking
                 ; Fetch pause vector and execute it. may make a context/task switch
                 VE_PAUSE:
003d0c ff05          .dw $ff05
003d0d 6170
003d0e 7375
003d0f 0065          .db "pause",0
003d10 3ce3          .dw VE_HEAD
                     .set VE_HEAD = VE_PAUSE
                 XT_PAUSE:
003d11 3de0          .dw PFA_DODEFER1
                 PFA_PAUSE:
003d12 017b          .dw ram_pause
003d13 3d95          .dw XT_RDEFERFETCH
003d14 3d9f          .dw XT_RDEFERSTORE
                 
                 .dseg
00017b           ram_pause: .byte 2
                 .cseg
                 .include "words/cold.asm"
                 
                 ; System
                 ; start up amforth.
                 VE_COLD:
003d15 ff04          .dw $ff04
003d16 6f63
003d17 646c          .db "cold"
003d18 3d0c          .dw VE_HEAD
                     .set VE_HEAD = VE_COLD
                 XT_COLD:
003d19 3d1a          .dw PFA_COLD
                 PFA_COLD:
003d1a b6a4          in_ mcu_boot, MCUSR
003d1b 2422          clr zerol
003d1c 2433          clr zeroh
003d1d be24          out_ MCUSR, zerol
                     ; clear RAM
003d1e e0e0          ldi zl, low(ramstart)
003d1f e0f1          ldi zh, high(ramstart)
                 clearloop:
003d20 9221          st Z+, zerol
003d21 30e0          cpi zl, low(sram_size+ramstart)
003d22 f7e9          brne clearloop
003d23 30fb          cpi zh, high(sram_size+ramstart)
003d24 f7d9          brne clearloop
                     ; init first user data area
                     ; allocate space for User Area
                 .dseg
00017d           ram_user1: .byte SYSUSERSIZE + APPUSERSIZE
                 .cseg
003d25 e7ed          ldi zl, low(ram_user1)
003d26 e0f1          ldi zh, high(ram_user1)
003d27 012f          movw upl, zl
                     ; init return stack pointer
003d28 ef0f          ldi temp0,low(rstackstart)
003d29 bf0d          out_ SPL,temp0
003d2a 8304          std Z+4, temp0
003d2b e01a          ldi temp1,high(rstackstart)
003d2c bf1e          out_ SPH,temp1
003d2d 8315          std Z+5, temp1
                 
                     ; init parameter stack pointer
003d2e eacf          ldi yl,low(stackstart)
003d2f 83c6          std Z+6, yl
003d30 e0da          ldi yh,high(stackstart)
003d31 83d7          std Z+7, yh
                 
                     ; load Forth IP with starting word
003d32 e3aa          ldi XL, low(PFA_WARM)
003d33 e3bd          ldi XH, high(PFA_WARM)
                     ; its a far jump...
003d34 cacf          jmp_ DO_NEXT
                 .include "words/warm.asm"
                 
                 ; System
                 ; initialize amforth further. executes turnkey operation and go to quit
                 VE_WARM:
003d35 ff04          .dw $ff04
003d36 6177
003d37 6d72          .db "warm"
003d38 3d15          .dw VE_HEAD
                     .set VE_HEAD = VE_WARM
                 XT_WARM:
003d39 3800          .dw DO_COLON
                 PFA_WARM:
003d3a 028c          .dw XT_INITUSER
003d3b 3837          .dw XT_DOLITERAL
003d3c 0181          .dw XT_NOOP
003d3d 3837          .dw XT_DOLITERAL
003d3e 3d11          .dw XT_PAUSE
003d3f 3dc0          .dw XT_DEFERSTORE
003d40 08df          .dw XT_LBRACKET
003d41 3f4c          .dw XT_TURNKEY
003d42 3ce7          .dw XT_QUIT
003d43 381a          .dw XT_EXIT
                 
                 .include "words/handler.asm"
                 
                 ; Exceptions
                 ; USER variable used by catch/throw
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_HANDLER:
003d44 ff07          .dw $ff07
003d45 6168
003d46 646e
003d47 656c
003d48 0072          .db "handler",0
003d49 3d35          .dw VE_HEAD
                     .set VE_HEAD = VE_HANDLER
                 XT_HANDLER:
003d4a 3852          .dw PFA_DOUSER
                 PFA_HANDLER:
                 .endif
003d4b 000a          .dw USER_HANDLER
                 .include "words/catch.asm"
                 
                 ; Exceptions
                 ; execute XT and check for exceptions.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_CATCH:
003d4c ff05          .dw $ff05
003d4d 6163
003d4e 6374
003d4f 0068          .db "catch",0
003d50 3d44          .dw VE_HEAD
                     .set VE_HEAD = VE_CATCH
                 XT_CATCH:
003d51 3800          .dw DO_COLON
                 PFA_CATCH:
                 .endif
                 
                     ; sp@ >r
003d52 3a7b          .dw XT_SP_FETCH
003d53 38f9          .dw XT_TO_R
                     ; handler @ >r
003d54 3d4a          .dw XT_HANDLER
003d55 3873          .dw XT_FETCH
003d56 38f9          .dw XT_TO_R
                     ; rp@ handler !
003d57 3a64          .dw XT_RP_FETCH
003d58 3d4a          .dw XT_HANDLER
003d59 387b          .dw XT_STORE
003d5a 3824          .dw XT_EXECUTE
                     ; r> handler !
003d5b 38f0          .dw XT_R_FROM
003d5c 3d4a          .dw XT_HANDLER
003d5d 387b          .dw XT_STORE
003d5e 38f0          .dw XT_R_FROM
003d5f 38d3          .dw XT_DROP
003d60 394e          .dw XT_ZERO
003d61 381a          .dw XT_EXIT
                 .include "words/throw.asm"
                 
                 ; Exceptions
                 ; throw an exception
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_THROW:
003d62 ff05          .dw $ff05
003d63 6874
003d64 6f72
003d65 0077          .db "throw",0
003d66 3d4c          .dw VE_HEAD
                     .set VE_HEAD = VE_THROW
                 XT_THROW:
003d67 3800          .dw DO_COLON
                 PFA_THROW:
                 .endif
003d68 38ab          .dw XT_DUP
003d69 3914          .dw XT_ZEROEQUAL
003d6a 3830          .dw XT_DOCONDBRANCH
003d6b 3d6e          DEST(PFA_THROW1)
003d6c 38d3      	.dw XT_DROP
003d6d 381a      	.dw XT_EXIT
                 PFA_THROW1:
003d6e 3d4a          .dw XT_HANDLER
003d6f 3873          .dw XT_FETCH
003d70 3a6e          .dw XT_RP_STORE
003d71 38f0          .dw XT_R_FROM
003d72 3d4a          .dw XT_HANDLER
003d73 387b          .dw XT_STORE
003d74 38f0          .dw XT_R_FROM
003d75 38be          .dw XT_SWAP
003d76 38f9          .dw XT_TO_R
003d77 3a84          .dw XT_SP_STORE
003d78 38d3          .dw XT_DROP
003d79 38f0          .dw XT_R_FROM    
003d7a 381a          .dw XT_EXIT
                 
                 
                 
                 .include "words/edefer-fetch.asm"
                 
                 ; System
                 ; does the real defer@ for eeprom defers
                 VE_EDEFERFETCH:
003d7b ff07          .dw $ff07
003d7c 6445
003d7d 6665
003d7e 7265
003d7f 0040          .db "Edefer@",0
003d80 3d62          .dw VE_HEAD
                     .set VE_HEAD = VE_EDEFERFETCH
                 XT_EDEFERFETCH:
003d81 3800          .dw DO_COLON
                 PFA_EDEFERFETCH:
003d82 3bba          .dw XT_FETCHI
003d83 3b4d          .dw XT_FETCHE
003d84 381a          .dw XT_EXIT
                 .include "words/edefer-store.asm"
                 
                 ; System
                 ; does the real defer! for eeprom defers
                 VE_EDEFERSTORE:
003d85 ff07          .dw $ff07
003d86 6445
003d87 6665
003d88 7265
003d89 0021          .db "Edefer!",0
003d8a 3d7b          .dw VE_HEAD
                     .set VE_HEAD = VE_EDEFERSTORE
                 XT_EDEFERSTORE:
003d8b 3800          .dw DO_COLON
                 PFA_EDEFERSTORE:
003d8c 3bba          .dw XT_FETCHI
003d8d 3b29          .dw XT_STOREE
003d8e 381a          .dw XT_EXIT
                 .include "words/rdefer-fetch.asm"
                 
                 ; System
                 ; The defer@ for ram defers
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_RDEFERFETCH:
003d8f ff07          .dw $ff07
003d90 6452
003d91 6665
003d92 7265
003d93 0040          .db "Rdefer@",0
003d94 3d85          .dw VE_HEAD
                     .set VE_HEAD = VE_RDEFERFETCH
                 XT_RDEFERFETCH:
003d95 3800          .dw DO_COLON
                 PFA_RDEFERFETCH:
                 .endif
003d96 3bba          .dw XT_FETCHI
003d97 3873          .dw XT_FETCH
003d98 381a          .dw XT_EXIT
                 .include "words/rdefer-store.asm"
                 
                 ; System
                 ; The defer! for ram defers
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_RDEFERSTORE:
003d99 ff07          .dw $ff07
003d9a 6452
003d9b 6665
003d9c 7265
003d9d 0021          .db "Rdefer!",0
003d9e 3d8f          .dw VE_HEAD
                     .set VE_HEAD = VE_RDEFERSTORE
                 XT_RDEFERSTORE:
003d9f 3800          .dw DO_COLON
                 PFA_RDEFERSTORE:
                 .endif
003da0 3bba          .dw XT_FETCHI
003da1 387b          .dw XT_STORE
003da2 381a          .dw XT_EXIT
                 
                 .include "words/udefer-fetch.asm"
                 
                 ; System
                 ; does the real defer@ for user based defers
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UDEFERFETCH:
003da3 ff07          .dw $ff07
003da4 6455
003da5 6665
003da6 7265
003da7 0040          .db "Udefer@",0
003da8 3d99          .dw VE_HEAD
                     .set VE_HEAD = VE_UDEFERFETCH
                 XT_UDEFERFETCH:
003da9 3800          .dw DO_COLON
                 PFA_UDEFERFETCH:
                 .endif
003daa 3bba          .dw XT_FETCHI
003dab 3af0          .dw XT_UP_FETCH
003dac 3997          .dw XT_PLUS
003dad 3873          .dw XT_FETCH
003dae 381a          .dw XT_EXIT
                 .include "words/udefer-store.asm"
                 
                 ; System
                 ; does the real defer! for user based defers
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UDEFERSTORE:
003daf ff07          .dw $ff07
003db0 6455
003db1 6665
003db2 7265
003db3 0021          .db "Udefer!",0
003db4 3da3          .dw VE_HEAD
                     .set VE_HEAD = VE_UDEFERSTORE
                 XT_UDEFERSTORE:
003db5 3800          .dw DO_COLON
                 PFA_UDEFERSTORE:
                 .endif
                 
003db6 3bba          .dw XT_FETCHI
003db7 3af0          .dw XT_UP_FETCH
003db8 3997          .dw XT_PLUS
003db9 387b          .dw XT_STORE
003dba 381a          .dw XT_EXIT
                 
                 .include "words/defer-store.asm"
                 
                 ; System
                 ; stores xt1 as the xt to be executed when xt2 is called
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DEFERSTORE:
003dbb ff06          .dw $ff06
003dbc 6564
003dbd 6566
003dbe 2172          .db "defer!"
003dbf 3daf          .dw VE_HEAD
                     .set VE_HEAD = VE_DEFERSTORE
                 XT_DEFERSTORE:
003dc0 3800          .dw DO_COLON
                 PFA_DEFERSTORE:
                 .endif
003dc1 3fc0          .dw XT_TO_BODY
003dc2 38ab          .dw XT_DUP
003dc3 01ae          .dw XT_ICELLPLUS
003dc4 01ae          .dw XT_ICELLPLUS
003dc5 3bba          .dw XT_FETCHI
003dc6 3824          .dw XT_EXECUTE
003dc7 381a          .dw XT_EXIT
                 
                 .include "words/defer-fetch.asm"
                 
                 ; System
                 ; returns the XT associated with the given XT
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DEFERFETCH:
003dc8 ff06          .dw $ff06
003dc9 6564
003dca 6566
003dcb 4072          .db "defer@"
003dcc 3dbb          .dw VE_HEAD
                     .set VE_HEAD = VE_DEFERFETCH
                 XT_DEFERFETCH:
003dcd 3800          .dw DO_COLON
                 PFA_DEFERFETCH:
                 .endif
003dce 3fc0          .dw XT_TO_BODY 
003dcf 38ab          .dw XT_DUP
003dd0 01ae          .dw XT_ICELLPLUS
003dd1 3bba          .dw XT_FETCHI
003dd2 3824          .dw XT_EXECUTE
003dd3 381a          .dw XT_EXIT
                 .include "words/do-defer.asm"
                 
                 ; System
                 ; runtime of defer
                 VE_DODEFER:
003dd4 ff07          .dw $ff07
003dd5 6428
003dd6 6665
003dd7 7265
003dd8 0029          .db "(defer)", 0
003dd9 3dc8          .dw VE_HEAD
                     .set VE_HEAD = VE_DODEFER
                 XT_DODEFER:
003dda 3800          .dw DO_COLON
                 PFA_DODEFER:
003ddb 0716          .dw XT_DOCREATE
003ddc 087a          .dw XT_REVEAL
003ddd 073c          .dw XT_COMPILE
003dde 3de0          .dw PFA_DODEFER1
003ddf 381a          .dw XT_EXIT
                 PFA_DODEFER1:
003de0 940e 089e     call_ DO_DODOES
003de2 38ab          .dw XT_DUP
003de3 01ae          .dw XT_ICELLPLUS
003de4 3bba          .dw XT_FETCHI
003de5 3824          .dw XT_EXECUTE 
003de6 3824          .dw XT_EXECUTE
003de7 381a          .dw XT_EXIT
                 
                 ; : (defer) <builds does> dup i-cell+ @i execute execute ;
                 
                 
                 .include "words/d-equal.asm"
                 
                 ; Compare
                 ; compares two double cell values
                 VE_DEQUAL:
003de8 ff02          .dw $ff02
003de9 3d64          .db "d="
003dea 3dd4          .dw VE_HEAD
                     .set VE_HEAD = VE_DEQUAL
                 XT_DEQUAL:
003deb 3800          .dw DO_COLON
                 PFA_DEQUAL:
003dec 3c15          .dw XT_DMINUS
003ded 3a16          .dw XT_OR
003dee 3914          .dw XT_ZEROEQUAL
003def 381a          .dw XT_EXIT
                 .include "words/u-dot.asm"
                 
                 ; Numeric IO
                 ; unsigned PNO with single cell numbers
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UDOT:
003df0 ff02          .dw $ff02
003df1 2e75          .db "u."
003df2 3de8          .dw VE_HEAD
                     .set VE_HEAD = VE_UDOT
                 XT_UDOT:
003df3 3800          .dw DO_COLON
                 PFA_UDOT:
                 .endif
003df4 394e          .dw XT_ZERO
003df5 0377          .dw XT_UDDOT
003df6 381a          .dw XT_EXIT
                 ; : u.        ( us -- )    0 ud. ;
                 .include "words/u-dot-r.asm"
                 
                 ; Numeric IO
                 ; unsigned PNO with single cells numbers, right aligned in width w
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_UDOTR:
003df7 ff03          .dw $ff03
003df8 2e75
003df9 0072          .db "u.r",0
003dfa 3df0          .dw VE_HEAD
                     .set VE_HEAD = VE_UDOTR
                 XT_UDOTR:
003dfb 3800          .dw DO_COLON
                 PFA_UDOTR:
                 .endif
003dfc 394e          .dw XT_ZERO
003dfd 38be          .dw XT_SWAP
003dfe 0380          .dw XT_UDDOTR
003dff 381a          .dw XT_EXIT
                 ; : u.r       ( s n -- )   0 swap ud.r ;
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/uslashmod.asm"
                 
                 ; Arithmetics
                 ; unsigned division with remainder
                 VE_USLASHMOD:
003e00 ff05          .dw $ff05
003e01 2f75
003e02 6f6d
003e03 0064          .db "u/mod",0
003e04 3df7          .dw VE_HEAD
                     .set VE_HEAD = VE_USLASHMOD
                 XT_USLASHMOD:
003e05 3800          .dw DO_COLON
                 PFA_USLASHMOD:
003e06 38f9          .dw XT_TO_R
003e07 394e          .dw XT_ZERO
003e08 38f0          .dw XT_R_FROM
003e09 39bc          .dw XT_UMSLASHMOD
003e0a 381a          .dw XT_EXIT
                 .include "words/negate.asm"
                 
                 ; Logic
                 ; 2-complement
                 VE_NEGATE:
003e0b ff06          .dw $ff06
003e0c 656e
003e0d 6167
003e0e 6574          .db "negate"
003e0f 3e00          .dw VE_HEAD
                     .set VE_HEAD = VE_NEGATE
                 XT_NEGATE:
003e10 3800          .dw DO_COLON
                 PFA_NEGATE:
003e11 39f7          .dw XT_INVERT
003e12 3a29          .dw XT_1PLUS
003e13 381a          .dw XT_EXIT
                 .include "words/slash.asm"
                 
                 ; Arithmetics
                 ; divide n1 by n2. giving the quotient
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_SLASH:
003e14 ff01          .dw $ff01
003e15 002f          .db "/",0
003e16 3e0b          .dw VE_HEAD
                     .set VE_HEAD = VE_SLASH
                 XT_SLASH:
003e17 3800          .dw DO_COLON
                 PFA_SLASH:
                 .endif
003e18 3c38          .dw XT_SLASHMOD
003e19 38ea          .dw XT_NIP
003e1a 381a          .dw XT_EXIT
                 
                 .include "words/mod.asm"
                 
                 ; Arithmetics
                 ; divide n1 by n2 giving the remainder n3
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_MOD:
003e1b ff03          .dw $ff03
003e1c 6f6d
003e1d 0064          .db "mod",0
003e1e 3e14          .dw VE_HEAD
                     .set VE_HEAD = VE_MOD
                 XT_MOD:
003e1f 3800          .dw DO_COLON
                 PFA_MOD:
                 .endif
003e20 3c38          .dw XT_SLASHMOD
003e21 38d3          .dw XT_DROP
003e22 381a          .dw XT_EXIT
                 
                 .include "words/min.asm"
                 
                 ; Compare
                 ; compare two values leave the smaller one
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_MIN:
003e23 ff03          .dw $ff03
003e24 696d
003e25 006e          .db "min",0
003e26 3e1b          .dw VE_HEAD
                     .set VE_HEAD = VE_MIN
                 XT_MIN:
003e27 3800          .dw DO_COLON
                 PFA_MIN:
                 .endif
003e28 3eb2          .dw XT_2DUP
003e29 3972          .dw XT_GREATER
003e2a 3830          .dw XT_DOCONDBRANCH
003e2b 3e2d          DEST(PFA_MIN1)
003e2c 38be          .dw XT_SWAP
                 PFA_MIN1:
003e2d 38d3          .dw XT_DROP
003e2e 381a          .dw XT_EXIT
                 .include "words/max.asm"
                 
                 ; Compare
                 ; compare two values, leave the bigger one
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_MAX:
003e2f ff03          .dw $ff03
003e30 616d
003e31 0078          .db "max",0
003e32 3e23          .dw VE_HEAD
                     .set VE_HEAD = VE_MAX
                 XT_MAX:
003e33 3800          .dw DO_COLON
                 PFA_MAX:
                 
                 .endif
003e34 3eb2          .dw XT_2DUP
003e35 3968          .dw XT_LESS
003e36 3830          .dw XT_DOCONDBRANCH
003e37 3e39          DEST(PFA_MAX1)
003e38 38be          .dw XT_SWAP
                 PFA_MAX1:
003e39 38d3          .dw XT_DROP
003e3a 381a          .dw XT_EXIT
                 .include "words/within.asm"
                 
                 ; Compare
                 ; check if n is within min..max
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_WITHIN:
003e3b ff06          .dw $ff06
003e3c 6977
003e3d 6874
003e3e 6e69          .db "within"
003e3f 3e2f          .dw VE_HEAD
                     .set VE_HEAD = VE_WITHIN
                 XT_WITHIN:
003e40 3800          .dw DO_COLON
                 PFA_WITHIN:
                 .endif
003e41 38c9          .dw XT_OVER
003e42 398d          .dw XT_MINUS
003e43 38f9          .dw XT_TO_R
003e44 398d          .dw XT_MINUS
003e45 38f0          .dw XT_R_FROM
003e46 3956          .dw XT_ULESS
003e47 381a          .dw XT_EXIT
                 
                 .include "words/show-wordlist.asm"
                 
                 ; Tools
                 ; prints the name of the words in a wordlist
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SHOWWORDLIST:
003e48 ff0d          .dw $ff0d
003e49 6873
003e4a 776f
003e4b 772d
003e4c 726f
003e4d 6c64
003e4e 7369
003e4f 0074          .db "show-wordlist",0
003e50 3e3b          .dw VE_HEAD
                     .set VE_HEAD = VE_SHOWWORDLIST
                 XT_SHOWWORDLIST:
003e51 3800          .dw DO_COLON
                 PFA_SHOWWORDLIST:
                 .endif
003e52 3837          .dw XT_DOLITERAL
003e53 3e57          .dw XT_SHOWWORD
003e54 38be          .dw XT_SWAP
003e55 06c4          .dw XT_TRAVERSEWORDLIST
003e56 381a          .dw XT_EXIT
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_SHOWWORD:
003e57 3800          .dw DO_COLON
                 PFA_SHOWWORD:
                 .endif
003e58 06df          .dw XT_NAME2STRING
003e59 03ed          .dw XT_ITYPE
003e5a 3f9e          .dw XT_SPACE         ; ( -- addr n)
003e5b 3945          .dw XT_TRUE
003e5c 381a          .dw XT_EXIT
                 .include "words/words.asm"
                 
                 ; Tools
                 ; prints a list of all (visible) words in the dictionary
                 VE_WORDS:
003e5d ff05          .dw $ff05
003e5e 6f77
003e5f 6472
003e60 0073          .db "words",0
003e61 3e48          .dw VE_HEAD
                     .set VE_HEAD = VE_WORDS
                 XT_WORDS:
003e62 3800          .dw DO_COLON
                 PFA_WORDS:
003e63 3837          .dw XT_DOLITERAL
003e64 006c          .dw CFG_ORDERLIST
003e65 3b4d          .dw XT_FETCHE
003e66 3e51          .dw XT_SHOWWORDLIST
003e67 381a          .dw XT_EXIT
                 
                 .include "words/dot-quote.asm"
                 
                 ; Compiler
                 ; compiles string into dictionary to be printed at runtime
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_DOTSTRING:
003e68 0002          .dw $0002
003e69 222e          .db ".",$22
003e6a 3e5d          .dw VE_HEAD
                     .set VE_HEAD = VE_DOTSTRING
                 XT_DOTSTRING:
003e6b 3800          .dw DO_COLON
                 PFA_DOTSTRING:
                 .endif
003e6c 3e73          .dw XT_SQUOTE
003e6d 073c          .dw XT_COMPILE
003e6e 03ed          .dw XT_ITYPE
003e6f 381a          .dw XT_EXIT
                 .include "words/squote.asm"
                 
                 ; Compiler
                 ; compiles a string to flash, at runtime leaves ( -- flash-addr count) on stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SQUOTE:
003e70 0002        .dw $0002
003e71 2273        .db "s",$22
003e72 3e68        .dw VE_HEAD
                   .set VE_HEAD = VE_SQUOTE
                 XT_SQUOTE:
003e73 3800          .dw DO_COLON
                 PFA_SQUOTE:
                 .endif
003e74 3837          .dw XT_DOLITERAL
003e75 0022          .dw 34   ; 0x22 
003e76 0570          .dw XT_PARSE       ; ( -- addr n)
003e77 3ea0          .dw XT_STATE
003e78 3873          .dw XT_FETCH
003e79 3830          .dw XT_DOCONDBRANCH
003e7a 3e7c          DEST(PFA_SQUOTE1)
003e7b 0768            .dw XT_SLITERAL
                 PFA_SQUOTE1:
003e7c 381a          .dw XT_EXIT
                 .include "words/fill.asm"
                 
                 ; Memory
                 ; fill u bytes memory beginning at a-addr with character c
                 VE_FILL:
003e7d ff04          .dw $ff04
003e7e 6966
003e7f 6c6c          .db "fill"
003e80 3e70          .dw VE_HEAD
                     .set VE_HEAD = VE_FILL
                 XT_FILL:
003e81 3800          .dw DO_COLON
                 PFA_FILL:
003e82 38db          .dw XT_ROT
003e83 38db          .dw XT_ROT
003e84 38b3
003e85 3830          .dw XT_QDUP,XT_DOCONDBRANCH
003e86 3e8e          DEST(PFA_FILL2)
003e87 3f89          .dw XT_BOUNDS
003e88 3a89          .dw XT_DODO
                 PFA_FILL1:
003e89 38ab          .dw XT_DUP
003e8a 3a9a          .dw XT_I
003e8b 3887          .dw XT_CSTORE  ; ( -- c c-addr)
003e8c 3ab7          .dw XT_DOLOOP
003e8d 3e89          .dw PFA_FILL1
                 PFA_FILL2:
003e8e 38d3          .dw XT_DROP
003e8f 381a          .dw XT_EXIT
                 
                 .include "words/f_cpu.asm"
                 
                 ; System
                 ; put the cpu frequency in Hz on stack
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_F_CPU:
003e90 ff05          .dw $ff05
003e91 5f66
003e92 7063
003e93 0075          .db "f_cpu",0
003e94 3e7d          .dw VE_HEAD
                     .set VE_HEAD = VE_F_CPU
                 XT_F_CPU:
003e95 3800          .dw DO_COLON
                 PFA_F_CPU:
                 .endif
003e96 3837          .dw XT_DOLITERAL
003e97 2400          .dw (F_CPU % 65536)
003e98 3837          .dw XT_DOLITERAL
003e99 00f4          .dw (F_CPU / 65536)
003e9a 381a          .dw XT_EXIT
                 .include "words/state.asm"
                 
                 ; System Variable
                 ; system state
                 VE_STATE:
003e9b ff05          .dw $ff05
003e9c 7473
003e9d 7461
003e9e 0065          .db "state",0
003e9f 3e90          .dw VE_HEAD
                     .set VE_HEAD = VE_STATE
                 XT_STATE:
003ea0 3842          .dw PFA_DOVARIABLE
                 PFA_STATE:
003ea1 01a3          .dw ram_state
                 
                 .dseg
0001a3           ram_state: .byte 2
                 .include "words/base.asm"
                 
                 ; Numeric IO
                 ; location of the cell containing the number conversion radix
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BASE:
003ea2 ff04          .dw $ff04
003ea3 6162
003ea4 6573          .db "base"
003ea5 3e9b          .dw VE_HEAD
                     .set VE_HEAD = VE_BASE
                 XT_BASE:
003ea6 3852          .dw PFA_DOUSER
                 PFA_BASE:
                 .endif
003ea7 000c          .dw USER_BASE
                 
                 .include "words/cells.asm"
                 
                 ; Arithmetics
                 ; n2 is the size in address units of n1 cells
                 VE_CELLS:
003ea8 ff05          .dw $ff05
003ea9 6563
003eaa 6c6c
003eab 0073          .db "cells",0
003eac 3ea2          .dw VE_HEAD
                     .set VE_HEAD = VE_CELLS
                 XT_CELLS:
003ead 3a06          .dw PFA_2STAR
                 
                 .include "words/2dup.asm"
                 
                 ; Stack
                 ; Duplicate the 2 top elements
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_2DUP:
003eae ff04          .dw $ff04
003eaf 6432
003eb0 7075          .db "2dup"
003eb1 3ea8          .dw VE_HEAD
                     .set VE_HEAD = VE_2DUP
                 XT_2DUP:
003eb2 3800          .dw DO_COLON
                 PFA_2DUP:
                 .endif
                 
003eb3 38c9          .dw XT_OVER
003eb4 38c9          .dw XT_OVER
003eb5 381a          .dw XT_EXIT
                 .include "words/2drop.asm"
                 
                 ; Stack
                 ; Remove the 2 top elements
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_2DROP:
003eb6 ff05          .dw $ff05
003eb7 6432
003eb8 6f72
003eb9 0070          .db "2drop",0
003eba 3eae          .dw VE_HEAD
                     .set VE_HEAD = VE_2DROP
                 XT_2DROP:
003ebb 3800          .dw DO_COLON
                 PFA_2DROP:
                 .endif
003ebc 38d3          .dw XT_DROP
003ebd 38d3          .dw XT_DROP
003ebe 381a          .dw XT_EXIT
                 .include "words/tuck.asm"
                 
                 ; Stack
                 ; Copy the first (top) stack item below the second stack item. 
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TUCK:
003ebf ff04          .dw $ff04
003ec0 7574
003ec1 6b63          .db "tuck"
003ec2 3eb6          .dw VE_HEAD
                     .set VE_HEAD = VE_TUCK
                 XT_TUCK:
003ec3 3800          .dw DO_COLON
                 PFA_TUCK:
                 .endif
003ec4 38be          .dw XT_SWAP
003ec5 38c9          .dw XT_OVER
003ec6 381a          .dw XT_EXIT
                 
                 .include "words/to-in.asm"
                 
                 ; System Variable
                 ; pointer to current read position in input buffer
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TO_IN:
003ec7 ff03          .dw $ff03
003ec8 693e
003ec9 006e          .db ">in",0
003eca 3ebf          .dw VE_HEAD
                     .set VE_HEAD = VE_TO_IN
                 XT_TO_IN:
003ecb 3852          .dw PFA_DOUSER
                 PFA_TO_IN:
                 .endif
003ecc 0018          .dw USER_TO_IN
                 .include "words/sharptib.asm"
                 
                 ; System Variable
                 ; variable holding the number of characters in TIB
                 VE_NUMBERTIB:
003ecd ff04          .dw $ff04
003ece 7423
003ecf 6269          .db "#tib"
003ed0 3ec7          .dw VE_HEAD
                     .set VE_HEAD  = VE_NUMBERTIB
                 XT_NUMBERTIB:
003ed1 3842          .dw PFA_DOVARIABLE
                 PFA_NUMBERTIB:
003ed2 01a5          .dw ram_sharptib
                 
                 .dseg
0001a5           ram_sharptib: .byte 2
                 .cseg
                  
                 .include "words/pad.asm"
                 
                 ; System Variable
                 ; Address of the temporary scratch buffer.
                 VE_PAD:
003ed3 ff03          .dw $ff03
003ed4 6170
003ed5 0064          .db "pad",0
003ed6 3ecd          .dw VE_HEAD
                     .set VE_HEAD = VE_PAD
                 XT_PAD:
003ed7 3800          .dw DO_COLON
                 PFA_PAD:
003ed8 3f12          .dw XT_HERE
003ed9 3837          .dw XT_DOLITERAL
003eda 0064          .dw 100
003edb 3997          .dw XT_PLUS
003edc 381a          .dw XT_EXIT
                 .include "words/emit.asm"
                 
                 ; Character IO
                 ; fetch the emit vector and execute it. should emit a character from TOS
                 VE_EMIT:
003edd ff04          .dw $ff04
003ede 6d65
003edf 7469          .db "emit"
003ee0 3ed3          .dw VE_HEAD
                     .set VE_HEAD = VE_EMIT
                 XT_EMIT:
003ee1 3de0          .dw PFA_DODEFER1
                 PFA_EMIT:
003ee2 000e          .dw USER_EMIT
003ee3 3da9          .dw XT_UDEFERFETCH
003ee4 3db5          .dw XT_UDEFERSTORE
                 .include "words/emitq.asm"
                 
                 ; Character IO
                 ; fetch emit? vector and execute it. should return the ready-to-send condition
                 VE_EMITQ:
003ee5 ff05          .dw $ff05
003ee6 6d65
003ee7 7469
003ee8 003f          .db "emit?",0
003ee9 3edd          .dw VE_HEAD
                     .set VE_HEAD = VE_EMITQ
                 XT_EMITQ:
003eea 3de0          .dw PFA_DODEFER1
                 PFA_EMITQ:
003eeb 0010          .dw USER_EMITQ
003eec 3da9          .dw XT_UDEFERFETCH
003eed 3db5          .dw XT_UDEFERSTORE
                 .include "words/key.asm"
                 
                 ; Character IO
                 ; fetch key vector and execute it, should leave a single character on TOS
                 VE_KEY:
003eee ff03          .dw $ff03
003eef 656b
003ef0 0079          .db "key",0
003ef1 3ee5          .dw VE_HEAD
                     .set VE_HEAD = VE_KEY
                 XT_KEY:
003ef2 3de0          .dw PFA_DODEFER1
                 PFA_KEY:
003ef3 0012          .dw USER_KEY
003ef4 3da9          .dw XT_UDEFERFETCH
003ef5 3db5          .dw XT_UDEFERSTORE
                 .include "words/keyq.asm"
                 
                 ; Character IO
                 ; fetch key? vector and execute it. should turn on key sender, if it is disabled/stopped
                 VE_KEYQ:
003ef6 ff04          .dw $ff04
003ef7 656b
003ef8 3f79          .db "key?"
003ef9 3eee          .dw VE_HEAD
                     .set VE_HEAD = VE_KEYQ
                 XT_KEYQ:
003efa 3de0          .dw PFA_DODEFER1
                 PFA_KEYQ:
003efb 0014          .dw USER_KEYQ
003efc 3da9          .dw XT_UDEFERFETCH
003efd 3db5          .dw XT_UDEFERSTORE
                 
                 .include "words/dp.asm"
                 
                 ; System Value
                 ; address of the next free dictionary cell
                 VE_DP:
003efe ff02          .dw $ff02
003eff 7064          .db "dp"
003f00 3ef6          .dw VE_HEAD
                     .set VE_HEAD = VE_DP
                 XT_DP:
003f01 3869          .dw PFA_DOVALUE1
                 PFA_DP:
003f02 0058          .dw EE_DP
003f03 3d81          .dw XT_EDEFERFETCH
003f04 3d8b          .dw XT_EDEFERSTORE
                 .include "words/ehere.asm"
                 
                 ; System Value
                 ; address of the next free address in eeprom
                 VE_EHERE:
003f05 ff05          .dw $ff05
003f06 6865
003f07 7265
003f08 0065          .db "ehere",0
003f09 3efe          .dw VE_HEAD
                     .set VE_HEAD = VE_EHERE
                 XT_EHERE:
003f0a 3869          .dw PFA_DOVALUE1
                 PFA_EHERE:
003f0b 005c          .dw EE_EHERE
003f0c 3d81          .dw XT_EDEFERFETCH
003f0d 3d8b          .dw XT_EDEFERSTORE
                 .include "words/here.asm"
                 
                 ; System Value
                 ; address of the next free data space (RAM) cell
                 VE_HERE:
003f0e ff04          .dw $ff04
003f0f 6568
003f10 6572          .db "here"
003f11 3f05          .dw VE_HEAD
                     .set VE_HEAD = VE_HERE
                 XT_HERE:
003f12 3869          .dw PFA_DOVALUE1
                 PFA_HERE:
003f13 005a          .dw EE_HERE
003f14 3d81          .dw XT_EDEFERFETCH
003f15 3d8b          .dw XT_EDEFERSTORE
                 .include "words/allot.asm"
                 
                 ; System
                 ; allocate or release memory in RAM
                 VE_ALLOT:
003f16 ff05          .dw $ff05
003f17 6c61
003f18 6f6c
003f19 0074          .db "allot",0
003f1a 3f0e          .dw VE_HEAD
                     .set VE_HEAD = VE_ALLOT
                 XT_ALLOT:
003f1b 3800          .dw DO_COLON
                 PFA_ALLOT:
003f1c 3f12          .dw XT_HERE
003f1d 3997          .dw XT_PLUS
003f1e 019c          .dw XT_DOTO
003f1f 3f13          .dw PFA_HERE
003f20 381a          .dw XT_EXIT
                 
                 .include "words/bin.asm"
                 
                 ; Numeric IO
                 ; set base for numeric conversion to 10
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BIN:
003f21 ff03          .dw $ff03
003f22 6962
003f23 006e          .db "bin",0
003f24 3f16          .dw VE_HEAD
                     .set VE_HEAD = VE_BIN
                 XT_BIN:
003f25 3800          .dw DO_COLON
                 PFA_BIN:
                 .endif
003f26 3837          .dw XT_DOLITERAL
003f27 0002          .dw 2
003f28 3ea6          .dw XT_BASE
003f29 387b          .dw XT_STORE
003f2a 381a          .dw XT_EXIT
                 .include "words/decimal.asm"
                 
                 ; Numeric IO
                 ; set base for numeric conversion to 10
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DECIMAL:
003f2b ff07          .dw $ff07
003f2c 6564
003f2d 6963
003f2e 616d
003f2f 006c          .db "decimal",0
003f30 3f21          .dw VE_HEAD
                     .set VE_HEAD = VE_DECIMAL
                 XT_DECIMAL:
003f31 3800          .dw DO_COLON
                 PFA_DECIMAL:
                 .endif
003f32 3837          .dw XT_DOLITERAL
003f33 000a          .dw 10
003f34 3ea6          .dw XT_BASE
003f35 387b          .dw XT_STORE
003f36 381a          .dw XT_EXIT
                 .include "words/hex.asm"
                 
                 ; Numeric IO
                 ; set base for numeric conversion to 10
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_HEX:
003f37 ff03          .dw $ff03
003f38 6568
003f39 0078          .db "hex",0
003f3a 3f2b          .dw VE_HEAD
                     .set VE_HEAD = VE_HEX
                 XT_HEX:
003f3b 3800          .dw DO_COLON
                 PFA_HEX:
                 .endif
003f3c 3837          .dw XT_DOLITERAL
003f3d 0010          .dw 16
003f3e 3ea6          .dw XT_BASE
003f3f 387b          .dw XT_STORE
003f40 381a          .dw XT_EXIT
                 .include "words/bl.asm"
                 
                 ; Character IO
                 ; put ascii code of the blank to the stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BL:
003f41 ff02          .dw $ff02
003f42 6c62          .db "bl"
003f43 3f37          .dw VE_HEAD
                     .set VE_HEAD = VE_BL
                 XT_BL:
003f44 3842          .dw PFA_DOVARIABLE
                 PFA_BL:
                 .endif
003f45 0020          .dw 32
                 
                 .include "words/turnkey.asm"
                 
                 ; System Value
                 ; Deferred action during startup/reset
                 VE_TURNKEY:
003f46 ff07          .dw $ff07
003f47 7574
003f48 6e72
003f49 656b
003f4a 0079          .db "turnkey",0
003f4b 3f41          .dw VE_HEAD
                     .set VE_HEAD = VE_TURNKEY
                 XT_TURNKEY:
003f4c 3de0          .dw PFA_DODEFER1
                 PFA_TURNKEY:
003f4d 005e          .dw EE_TURNKEY
003f4e 3d81          .dw XT_EDEFERFETCH
003f4f 3d8b          .dw XT_EDEFERSTORE
                 .include "words/to-upper.asm"
                 
                 ; String
                 ; if c is a lowercase letter convert it to uppercase
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TOUPPER:
003f50 ff07          .dw $ff07 
003f51 6f74
003f52 7075
003f53 6570
003f54 0072          .db "toupper",0
003f55 3f46          .dw VE_HEAD
                     .set VE_HEAD = VE_TOUPPER
                 XT_TOUPPER:
003f56 3800          .dw DO_COLON 
                 PFA_TOUPPER:
                 .endif
003f57 38ab          .dw XT_DUP 
003f58 3837          .dw XT_DOLITERAL 
003f59 0061          .dw 'a' 
003f5a 3837          .dw XT_DOLITERAL 
003f5b 007b          .dw 'z'+1
003f5c 3e40          .dw XT_WITHIN 
003f5d 3830          .dw XT_DOCONDBRANCH
003f5e 3f62          DEST(PFA_TOUPPER0)
003f5f 3837          .dw XT_DOLITERAL
003f60 00df          .dw 223 ; inverse of 0x20: 0xdf
003f61 3a0d          .dw XT_AND 
                 PFA_TOUPPER0:
003f62 381a          .dw XT_EXIT 
                 .include "words/to-lower.asm"
                 
                 ; String
                 ; if C is an uppercase letter convert it to lowercase
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_TOLOWER:
003f63 ff07          .dw $ff07
003f64 6f74
003f65 6f6c
003f66 6577
003f67 0072          .db "tolower",0
003f68 3f50          .dw VE_HEAD
                     .set VE_HEAD = VE_TOLOWER
                 XT_TOLOWER:
003f69 3800          .dw DO_COLON
                 PFA_TOLOWER:
                 .endif
003f6a 38ab          .dw XT_DUP
003f6b 3837          .dw XT_DOLITERAL
003f6c 0041          .dw 'A'
003f6d 3837          .dw XT_DOLITERAL
003f6e 005b          .dw 'Z'+1
003f6f 3e40          .dw XT_WITHIN
003f70 3830          .dw XT_DOCONDBRANCH
003f71 3f75          DEST(PFA_TOLOWER0)
003f72 3837          .dw XT_DOLITERAL
003f73 0020          .dw 32
003f74 3a16          .dw XT_OR 
                 PFA_TOLOWER0:
003f75 381a          .dw XT_EXIT 
                 
                 .include "words/q-stack.asm"
                 
                 ; Tools
                 ; check data stack depth and exit to quit if underrun
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_QSTACK:
003f76 ff06          .dw $ff06
003f77 733f
003f78 6174
003f79 6b63          .db "?stack"
003f7a 3f63          .dw VE_HEAD
                     .set VE_HEAD = VE_QSTACK
                 XT_QSTACK:
003f7b 3800          .dw DO_COLON
                 PFA_QSTACK:
                 .endif
003f7c 05d0          .dw XT_DEPTH
003f7d 391b          .dw XT_ZEROLESS
003f7e 3830          .dw XT_DOCONDBRANCH
003f7f 3f83          DEST(PFA_QSTACK1)
003f80 3837            .dw XT_DOLITERAL
003f81 fffc            .dw -4
003f82 3d67            .dw XT_THROW
                 PFA_QSTACK1:
003f83 381a          .dw XT_EXIT
                 .include "words/bounds.asm"
                 
                 ; Tools
                 ; convert a string to an address range
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BOUNDS:
003f84 ff06          .dw $ff06
003f85 6f62
003f86 6e75
003f87 7364          .db "bounds"
003f88 3f76          .dw VE_HEAD
                     .set VE_HEAD = VE_BOUNDS
                 XT_BOUNDS:
003f89 3800          .dw DO_COLON
                 PFA_BOUNDS:
                 .endif
003f8a 38c9          .dw XT_OVER
003f8b 3997          .dw XT_PLUS
003f8c 38be          .dw XT_SWAP
003f8d 381a          .dw XT_EXIT
                 .include "words/cr.asm"
                 
                 ; Character IO
                 ; cause subsequent output appear at the beginning of the next line
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_CR:
003f8e ff02          .dw 0xff02
003f8f 7263          .db "cr"
003f90 3f84          .dw VE_HEAD
                     .set VE_HEAD = VE_CR
                 XT_CR:
003f91 3800          .dw DO_COLON
                 PFA_CR:
                 .endif
                 
003f92 3837          .dw XT_DOLITERAL
003f93 000d          .dw 13
003f94 3ee1          .dw XT_EMIT
003f95 3837          .dw XT_DOLITERAL
003f96 000a          .dw 10
003f97 3ee1          .dw XT_EMIT
003f98 381a          .dw XT_EXIT
                 .include "words/space.asm"
                 
                 ; Character IO
                 ; emits a space (bl)
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SPACE:
003f99 ff05          .dw $ff05
003f9a 7073
003f9b 6361
003f9c 0065          .db "space",0
003f9d 3f8e          .dw VE_HEAD
                     .set VE_HEAD = VE_SPACE
                 XT_SPACE:
003f9e 3800          .dw DO_COLON
                 PFA_SPACE:
                 .endif
003f9f 3f44          .dw XT_BL
003fa0 3ee1          .dw XT_EMIT
003fa1 381a          .dw XT_EXIT
                 .include "words/spaces.asm"
                 
                 ; Character IO
                 ; emits n space(s) (bl)
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SPACES:
003fa2 ff06          .dw $ff06
003fa3 7073
003fa4 6361
003fa5 7365          .db "spaces"
003fa6 3f99          .dw VE_HEAD
                     .set VE_HEAD = VE_SPACES
                 XT_SPACES:
003fa7 3800          .dw DO_COLON
                 PFA_SPACES:
                 
                 .endif
                 ;C SPACES   n --            output n spaces
                 ;   BEGIN DUP 0> WHILE SPACE 1- REPEAT DROP ;
003fa8 394e
003fa9 3e33      	.DW XT_ZERO, XT_MAX
003faa 38ab
003fab 3830      SPCS1:  .DW XT_DUP,XT_DOCONDBRANCH
003fac 3fb1              DEST(SPCS2)
003fad 3f9e
003fae 3a2f
003faf 3829              .DW XT_SPACE,XT_1MINUS,XT_DOBRANCH
003fb0 3faa              DEST(SPCS1)
003fb1 38d3
003fb2 381a      SPCS2:  .DW XT_DROP,XT_EXIT
                 .include "words/s-to-d.asm"
                 
                 ; Conversion
                 ; extend (signed) single cell value to double cell
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_S2D:
003fb3 ff03          .dw $ff03
003fb4 3e73
003fb5 0064          .db "s>d",0
003fb6 3fa2          .dw VE_HEAD
                     .set VE_HEAD = VE_S2D
                 XT_S2D:
003fb7 3800          .dw DO_COLON
                 PFA_S2D:
                 .endif
003fb8 38ab          .dw XT_DUP
003fb9 391b          .dw XT_ZEROLESS
003fba 381a          .dw XT_EXIT
                 .include "words/to-body.asm"
                 
                 ; Core
                 ; get body from XT
                 VE_TO_BODY:
003fbb ff05          .dw $ff05
003fbc 623e
003fbd 646f
003fbe 0079          .db ">body",0
003fbf 3fb3          .dw VE_HEAD
                     .set VE_HEAD = VE_TO_BODY
                 XT_TO_BODY:
003fc0 3a2a          .dw PFA_1PLUS
                 .elif AMFORTH_NRWW_SIZE>2000
                 .else
                 .endif
                 ; now colon words
                 ;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/2literal.asm"
                 
                 ; Compiler
                 ; compile a cell pair literal in colon definitions
                 VE_2LITERAL:
003fc1 0008          .dw $0008
003fc2 6c32
003fc3 7469
003fc4 7265
003fc5 6c61          .db "2literal"
003fc6 3fbb          .dw VE_HEAD
                     .set VE_HEAD = VE_2LITERAL
                 XT_2LITERAL:
003fc7 3800          .dw DO_COLON
                 PFA_2LITERAL:
003fc8 38be          .dw XT_SWAP
003fc9 073c          .dw XT_COMPILE
003fca 3837          .dw XT_DOLITERAL
003fcb 0747          .dw XT_COMMA
003fcc 073c          .dw XT_COMPILE
003fcd 3837          .dw XT_DOLITERAL
003fce 0747          .dw XT_COMMA
                     
003fcf 381a          .dw XT_EXIT
                 .include "words/equal.asm"
                 
                 ; Compare
                 ; compares two values for equality
                 VE_EQUAL:
003fd0 ff01          .dw $ff01
003fd1 003d          .db "=",0
003fd2 3fc1          .dw VE_HEAD
                     .set VE_HEAD = VE_EQUAL
                 XT_EQUAL:
003fd3 3800          .dw DO_COLON
                 PFA_EQUAL:
003fd4 398d          .dw XT_MINUS
003fd5 3914          .dw XT_ZEROEQUAL
003fd6 381a          .dw XT_EXIT
                 .include "words/num-constants.asm"
                 
                 .endif
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ONE:
003fd7 ff01          .dw $ff01
003fd8 0031          .db "1",0
003fd9 3fd0          .dw VE_HEAD
                     .set VE_HEAD = VE_ONE
                 XT_ONE:
003fda 3842          .dw PFA_DOVARIABLE
                 PFA_ONE:
                 .endif
003fdb 0001              .DW 1
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TWO:
003fdc ff01          .dw $ff01
003fdd 0032          .db "2",0
003fde 3fd7          .dw VE_HEAD
                     .set VE_HEAD = VE_TWO
                 XT_TWO:
003fdf 3842          .dw PFA_DOVARIABLE
                 PFA_TWO:
                 .endif
003fe0 0002              .DW 2
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_MINUSONE:
003fe1 ff02          .dw $ff02
003fe2 312d          .db "-1"
003fe3 3fdc          .dw VE_HEAD
                     .set VE_HEAD = VE_MINUSONE
                 XT_MINUSONE:
003fe4 3842          .dw PFA_DOVARIABLE
                 PFA_MINUSONE:
                 .endif
003fe5 ffff              .DW -1
                 .include "dict_appl_core.inc"
                 
                 ; do not delete it!
                 
                 .set flashlast = pc
                 .if (pc>FLASHEND)
                 .endif
                 
                 .dseg
                 ; define a label for the 1st free ram address
                 HERESTART:
                 .eseg
                 .include "amforth-eeprom.inc"
000056 ff ff     
                 EE_DP:
000058 a1 0a         .dw DPSTART      ; Dictionary Pointer
                 EE_HERE:
00005a a7 01         .dw HERESTART    ; Memory Allocation
                 EE_EHERE:
00005c aa 00         .dw EHERESTART     ; EEProm Memory Allocation
                 EE_TURNKEY:
00005e 93 0a         .dw XT_APPLTURNKEY  ; TURNKEY
                 EE_STOREI:
000060 6c 3b         .dw XT_DO_STOREI  ; Store a cell into flash
                 
                 EE_ENVIRONMENT:
000062 e9 02         .dw VE_ENVHEAD   ; environmental queries
                 EE_WL_FORTH:
000064 68 00         .dw EE_FORTHWORDLIST; forth-wordlist
                 EE_CURRENT:
000066 68 00         .dw EE_FORTHWORDLIST
                 EE_FORTHWORDLIST:
000068 e1 3f         .dw VE_HEAD      ; pre-defined (compiled in) wordlist
                 CFG_ORDERLISTLEN:
00006a 01 00         .dw 1
                 CFG_ORDERLIST: ; list of wordlist id, exactly numwordlist entries
00006c 68 00         .dw EE_FORTHWORDLIST      ; get/set-order
00006e               .byte  (NUMWORDLISTS-1)*CELLSIZE ; one slot is already used
                 CFG_RECOGNIZERLISTLEN:
00007c 02 00         .dw 2
                 CFG_RECOGNIZERLIST:
00007e 53 06         .dw XT_REC_WORD
000080 3e 06         .dw XT_REC_NUM
000082               .byte  (NUMRECOGNIZERS-2)*CELLSIZE ; two slots are already used
                 
                 EE_WLSCOPE:
000086 b8 09         .dw XT_GET_CURRENT  ; default wordlist scope
                 
                 ; LEAVE stack is between data stack and return stack.
                 EE_LP0:
000088 b0 0a         .dw stackstart+1
                 
                 ; MARKER saves everything up to here. Nothing beyond gets saved
                 EE_MARKER:
00008a 8a 00         .dw EE_MARKER
                 
                 ; default user area
                 EE_INITUSER:
00008c 00 00         .dw 0  ; USER_STATE
00008e 00 00         .dw 0  ; USER_FOLLOWER
000090 ff 0a         .dw rstackstart  ; USER_RP
000092 af 0a         .dw stackstart   ; USER_SP0
000094 af 0a         .dw stackstart   ; USER_SP
                     
000096 00 00         .dw 0  ; USER_HANDLER
000098 0a 00         .dw 10 ; USER_BASE
                     
00009a b2 00         .dw XT_TX  ; USER_EMIT
00009c c0 00         .dw XT_TXQ ; USER_EMITQ
00009e 88 00         .dw XT_RX  ; USER_KEY
0000a0 a2 00         .dw XT_RXQ ; USER_KEYQ
0000a2 6c 02         .dw XT_SOURCETIB ; USER_SKEY
0000a4 00 00         .dw 0            ; USER_G_IN
0000a6 59 02         .dw XT_REFILLTIB ; USER_REFILL  
                 
                 ; calculate baud rate error
                 .equ UBRR_VAL   = ((F_CPU+BAUD*8)/(BAUD*16)-1)  ; smart round
                 .equ BAUD_REAL  = (F_CPU/(16*(UBRR_VAL+1)))     ; effective baud rate
                 .equ BAUD_ERROR = ((BAUD_REAL*1000)/BAUD-1000)  ; error in pro mille
                 
                 .if ((BAUD_ERROR>BAUD_MAXERROR) || (BAUD_ERROR<-BAUD_MAXERROR))       
                 .endif
                 EE_UBRRVAL:
0000a8 19 00         .dw UBRR_VAL     ; BAUDRATE
                 ; 1st free address in EEPROM.
                 EHERESTART:
                 .cseg


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32U4" register use summary:
r0 :  20 r1 :   5 r2 :   8 r3 :  11 r4 :   4 r5 :   1 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   1 r11:   1 r12:   0 r13:   0 r14:  22 r15:  20 
r16:  76 r17:  52 r18:  52 r19:  37 r20:  13 r21:  11 r22:  11 r23:   3 
r24: 185 r25: 132 r26:  39 r27:  21 r28:   7 r29:   4 r30:  76 r31:  38 
x  :   4 y  : 199 z  :  39 
Registers used: 29 out of 35 (82.9%)

"ATmega32U4" instruction use summary:
.lds  :   0 .sts  :   0 adc   :  21 add   :  16 adiw  :  18 and   :   4 
andi  :   3 asr   :   2 bclr  :   0 bld   :   0 brbc  :   2 brbs  :   7 
brcc  :   2 brcs  :   1 break :   0 breq  :   6 brge  :   1 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   3 brmi  :   3 
brne  :  12 brpl  :   1 brsh  :   0 brtc  :   0 brts  :   1 brvc  :   0 
brvs  :   2 bset  :   0 bst   :   0 call  :   2 cbi   :   0 cbr   :   0 
clc   :   1 clh   :   0 cli   :   5 cln   :   0 clr   :  10 cls   :   0 
clt   :   1 clv   :   0 clz   :   0 com   :  16 cp    :  10 cpc   :  10 
cpi   :   2 cpse  :   0 dec   :  10 eor   :   3 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   1 in    :  15 inc   :   3 jmp   :   7 
ld    : 133 ldd   :   4 ldi   :  25 lds   :   2 lpm   :  16 lsl   :  14 
lsr   :   1 mov   :  11 movw  :  65 mul   :   5 muls  :   1 mulsu :   2 
neg   :   0 nop   :   0 or    :   9 ori   :   1 out   :  17 pop   :  48 
push  :  42 rcall :  55 ret   :   6 reti  :   2 rjmp  : 105 rol   :  23 
ror   :   5 sbc   :   9 sbci  :   3 sbi   :   3 sbic  :   3 sbis  :   0 
sbiw  :   7 sbr   :   0 sbrc  :   4 sbrs  :   3 sec   :   1 seh   :   0 
sei   :   1 sen   :   0 ser   :   3 ses   :   0 set   :   2 sev   :   0 
sez   :   0 sleep :   0 spm   :   2 st    :  71 std   :   8 sts   :   3 
sub   :   6 subi  :   3 swap  :   0 tst   :   1 wdr   :   0 
Instructions used: 75 out of 113 (66.4%)

"ATmega32U4" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x007fcc   1880  11570  13450   32768  41.0%
[.dseg] 0x000100 0x0001a7      0    167    167    2560   6.5%
[.eseg] 0x000000 0x0000aa      0    170    170    1024  16.6%

Assembly complete, 0 errors, 5 warnings
