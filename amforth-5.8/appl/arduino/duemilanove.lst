
AVRASM ver. 2.1.52  duemilanove.asm Wed Mar 25 21:24:35 2015

duemilanove.asm(5): Including file '../../avr8\preamble.inc'
../../avr8\preamble.inc(2): Including file '../../avr8\macros.asm'
../../avr8\macros.asm(6): Including file '../../avr8\user.inc'
../../avr8\preamble.inc(6): Including file '../../avr8/devices/atmega328p\device.asm'
../../avr8/devices/atmega328p\device.asm(5): Including file '../../avr8/Atmel/Appnotes2\m328Pdef.inc'
duemilanove.asm(11): Including file '../../avr8\drivers/usart_0.asm'
../../avr8\drivers/usart_0.asm(32): Including file '../../avr8\drivers/usart_common.asm'
../../avr8\drivers/usart_common.asm(5): Including file '../../avr8\drivers/usart-isr-rx.asm'
../../avr8\drivers/usart_common.asm(17): Including file '../../avr8\words/usart-tx-poll.asm'
../../avr8\drivers/usart_common.asm(22): Including file '../../avr8\words/ubrr.asm'
../../avr8\drivers/usart_common.asm(23): Including file '../../avr8\words/usart.asm'
duemilanove.asm(13): Including file '../../avr8\amforth.asm'
../../avr8\amforth.asm(12): Including file '../../avr8\drivers/generic-isr.asm'
../../avr8\amforth.asm(14): Including file '../../avr8\dict/rww.inc'
../../avr8\dict/rww.inc(1): Including file '../../avr8\words/mplus.asm'
../../avr8\dict/rww.inc(2): Including file '../../common\words/ud-star.asm'
../../avr8\dict/rww.inc(3): Including file '../../common\words/umax.asm'
../../avr8\dict/rww.inc(4): Including file '../../common\words/umin.asm'
../../avr8\dict/rww.inc(5): Including file '../../avr8\words/immediate-q.asm'
../../avr8\dict/rww.inc(6): Including file '../../avr8\words/name2flags.asm'
../../avr8\dict/rww.inc(11): Including file '../../avr8\dict/appl_4k.inc'
../../avr8\dict/appl_4k.inc(1): Including file '../../common\words/ver.asm'
../../avr8\dict/appl_4k.inc(4): Including file '../../avr8\words/noop.asm'
../../avr8\dict/appl_4k.inc(5): Including file '../../avr8\words/unused.asm'
../../avr8\dict/appl_4k.inc(6): Including file '../../avr8\words/to.asm'
../../avr8\dict/appl_4k.inc(7): Including file '../../avr8\words/icompare.asm'
../../avr8\dict/appl_4k.inc(8): Including file '../../common\words/star.asm'
../../avr8\dict/appl_4k.inc(9): Including file '../../avr8\words/j.asm'
../../avr8\dict/appl_4k.inc(10): Including file '../../avr8\words/dabs.asm'
../../avr8\dict/appl_4k.inc(11): Including file '../../avr8\words/dnegate.asm'
../../avr8\dict/appl_4k.inc(12): Including file '../../avr8\words/cmove.asm'
../../avr8\dict/appl_4k.inc(13): Including file '../../common\words/2swap.asm'
../../avr8\dict/appl_4k.inc(14): Including file '../../avr8\words/tib.asm'
../../avr8\dict/appl_4k.inc(15): Including file '../../avr8\words/init-user.asm'
../../avr8\dict/appl_4k.inc(19): Including file '../../avr8\words/environment.asm'
../../avr8\dict/appl_4k.inc(20): Including file '../../avr8\words/env-wordlists.asm'
../../avr8\dict/appl_4k.inc(21): Including file '../../avr8\words/env-slashpad.asm'
../../avr8\dict/appl_4k.inc(22): Including file '../../avr8\words/env-slashhold.asm'
../../avr8\dict/appl_4k.inc(23): Including file '../../common\words/env-forthname.asm'
../../avr8\dict/appl_4k.inc(24): Including file '../../common\words/env-forthversion.asm'
../../avr8\dict/appl_4k.inc(25): Including file '../../common\words/env-cpu.asm'
../../avr8\dict/appl_4k.inc(26): Including file '../../avr8\words/env-mcuinfo.asm'
../../avr8\dict/appl_4k.inc(27): Including file '../../avr8\words/env-usersize.asm'
../../avr8\dict/appl_4k.inc(29): Including file '../../avr8\words/hld.asm'
../../avr8\dict/appl_4k.inc(30): Including file '../../common\words/hold.asm'
../../avr8\dict/appl_4k.inc(31): Including file '../../common\words/less-sharp.asm'
../../avr8\dict/appl_4k.inc(32): Including file '../../common\words/sharp.asm'
../../avr8\dict/appl_4k.inc(33): Including file '../../common\words/sharp-s.asm'
../../avr8\dict/appl_4k.inc(34): Including file '../../common\words/sharp-greater.asm'
../../avr8\dict/appl_4k.inc(35): Including file '../../common\words/sign.asm'
../../avr8\dict/appl_4k.inc(36): Including file '../../common\words/d-dot-r.asm'
../../avr8\dict/appl_4k.inc(37): Including file '../../common\words/dot-r.asm'
../../avr8\dict/appl_4k.inc(38): Including file '../../common\words/d-dot.asm'
../../avr8\dict/appl_4k.inc(39): Including file '../../common\words/dot.asm'
../../avr8\dict/appl_4k.inc(40): Including file '../../common\words/ud-dot.asm'
../../avr8\dict/appl_4k.inc(41): Including file '../../common\words/ud-dot-r.asm'
../../avr8\dict/appl_4k.inc(42): Including file '../../common\words/ud-slash-mod.asm'
../../avr8\dict/appl_4k.inc(43): Including file '../../common\words/digit-q.asm'
../../avr8\dict/appl_4k.inc(45): Including file '../../avr8\words/do-sliteral.asm'
../../avr8\dict/appl_4k.inc(46): Including file '../../avr8\words/scomma.asm'
../../avr8\dict/appl_4k.inc(47): Including file '../../avr8\words/itype.asm'
../../avr8\dict/appl_4k.inc(48): Including file '../../avr8\words/icount.asm'
../../avr8\dict/appl_4k.inc(49): Including file '../../common\words/type.asm'
../../avr8\dict/appl_4k.inc(50): Including file '../../common\words/tick.asm'
../../avr8\dict/appl_4k.inc(52): Including file '../../common\words/cskip.asm'
../../avr8\dict/appl_4k.inc(53): Including file '../../common\words/cscan.asm'
../../avr8\dict/appl_4k.inc(54): Including file '../../common\words/accept.asm'
../../avr8\dict/appl_4k.inc(55): Including file '../../avr8\words/refill.asm'
../../avr8\dict/appl_4k.inc(56): Including file '../../common\words/char.asm'
../../avr8\dict/appl_4k.inc(57): Including file '../../common\words/number.asm'
../../avr8\dict/appl_4k.inc(58): Including file '../../common\words/q-sign.asm'
../../avr8\dict/appl_4k.inc(59): Including file '../../common\words/set-base.asm'
../../avr8\dict/appl_4k.inc(60): Including file '../../common\words/to-number.asm'
../../avr8\dict/appl_4k.inc(61): Including file '../../common\words/parse.asm'
../../avr8\dict/appl_4k.inc(62): Including file '../../avr8\words/source.asm'
../../avr8\dict/appl_4k.inc(63): Including file '../../common\words/slash-string.asm'
../../avr8\dict/appl_4k.inc(64): Including file '../../common\words/parse-name.asm'
../../avr8\dict/appl_4k.inc(65): Including file '../../avr8\words/sp0.asm'
../../avr8\dict/appl_4k.inc(66): Including file '../../avr8\words/rp0.asm'
../../avr8\dict/appl_4k.inc(67): Including file '../../common\words/depth.asm'
../../avr8\dict/appl_4k.inc(68): Including file '../../common\words/do-recognizer.asm'
../../avr8\dict/appl_4k.inc(69): Including file '../../common\words/interpret.asm'
../../avr8\dict/appl_4k.inc(70): Including file '../../common\words/r-intnumber.asm'
../../avr8\dict/appl_4k.inc(71): Including file '../../common\words/r-word.asm'
../../avr8\dict/appl_4k.inc(72): Including file '../../common\words/r-fail.asm'
../../avr8\dict/appl_4k.inc(73): Including file '../../common\words/search-wordlist.asm'
../../avr8\dict/appl_4k.inc(74): Including file '../../common\words/traverse-wordlist.asm'
../../avr8\dict/appl_4k.inc(75): Including file '../../common\words/name2string.asm'
../../avr8\dict/appl_4k.inc(76): Including file '../../avr8\words/nfa2cfa.asm'
../../avr8\dict/appl_4k.inc(77): Including file '../../common\words/find-name.asm'
../../avr8\dict/appl_4k.inc(79): Including file '../../avr8\dict/compiler1.inc'
../../avr8\dict/compiler1.inc(2): Including file '../../avr8\words/docreate.asm'
../../avr8\dict/compiler1.inc(3): Including file '../../common\words/backslash.asm'
../../avr8\dict/compiler1.inc(4): Including file '../../common\words/l-paren.asm'
../../avr8\dict/compiler1.inc(6): Including file '../../common\words/compile.asm'
../../avr8\dict/compiler1.inc(7): Including file '../../avr8\words/comma.asm'
../../avr8\dict/compiler1.inc(8): Including file '../../common\words/brackettick.asm'
../../avr8\dict/compiler1.inc(11): Including file '../../common\words/literal.asm'
../../avr8\dict/compiler1.inc(12): Including file '../../common\words/sliteral.asm'
../../avr8\dict/compiler1.inc(13): Including file '../../avr8\words/g-mark.asm'
../../avr8\dict/compiler1.inc(14): Including file '../../avr8\words/g-resolve.asm'
../../avr8\dict/compiler1.inc(15): Including file '../../avr8\words/l_mark.asm'
../../avr8\dict/compiler1.inc(16): Including file '../../avr8\words/l_resolve.asm'
../../avr8\dict/compiler1.inc(18): Including file '../../common\words/ahead.asm'
../../avr8\dict/compiler1.inc(19): Including file '../../common\words/if.asm'
../../avr8\dict/compiler1.inc(20): Including file '../../common\words/else.asm'
../../avr8\dict/compiler1.inc(21): Including file '../../common\words/then.asm'
../../avr8\dict/compiler1.inc(22): Including file '../../common\words/begin.asm'
../../avr8\dict/compiler1.inc(23): Including file '../../common\words/while.asm'
../../avr8\dict/compiler1.inc(24): Including file '../../common\words/repeat.asm'
../../avr8\dict/compiler1.inc(25): Including file '../../common\words/until.asm'
../../avr8\dict/compiler1.inc(26): Including file '../../common\words/again.asm'
../../avr8\dict/compiler1.inc(27): Including file '../../common\words/do.asm'
../../avr8\dict/compiler1.inc(28): Including file '../../common\words/loop.asm'
../../avr8\dict/compiler1.inc(29): Including file '../../common\words/plusloop.asm'
../../avr8\dict/compiler1.inc(30): Including file '../../common\words/leave.asm'
../../avr8\dict/compiler1.inc(31): Including file '../../common\words/qdo.asm'
../../avr8\dict/compiler1.inc(32): Including file '../../common\words/endloop.asm'
../../avr8\dict/compiler1.inc(34): Including file '../../common\words/l-from.asm'
../../avr8\dict/compiler1.inc(35): Including file '../../common\words/to-l.asm'
../../avr8\dict/compiler1.inc(36): Including file '../../avr8\words/lp0.asm'
../../avr8\dict/compiler1.inc(37): Including file '../../avr8\words/lp.asm'
../../avr8\dict/compiler1.inc(39): Including file '../../avr8\words/create.asm'
../../avr8\dict/compiler1.inc(40): Including file '../../avr8\words/header.asm'
../../avr8\dict/compiler1.inc(41): Including file '../../avr8\words/wlscope.asm'
../../avr8\dict/compiler1.inc(42): Including file '../../avr8\words/reveal.asm'
../../avr8\dict/compiler1.inc(43): Including file '../../avr8\words/latest.asm'
../../avr8\dict/compiler1.inc(44): Including file '../../avr8\words/does.asm'
../../avr8\dict/compiler1.inc(45): Including file '../../common\words/colon.asm'
../../avr8\dict/compiler1.inc(46): Including file '../../avr8\words/colon-noname.asm'
../../avr8\dict/compiler1.inc(47): Including file '../../common\words/semicolon.asm'
../../avr8\dict/compiler1.inc(48): Including file '../../common\words/right-bracket.asm'
../../avr8\dict/compiler1.inc(49): Including file '../../common\words/left-bracket.asm'
../../avr8\dict/compiler1.inc(50): Including file '../../common\words/variable.asm'
../../avr8\dict/compiler1.inc(51): Including file '../../common\words/constant.asm'
../../avr8\dict/compiler1.inc(52): Including file '../../avr8\words/user.asm'
../../avr8\dict/compiler1.inc(54): Including file '../../avr8\words/recurse.asm'
../../avr8\dict/compiler1.inc(55): Including file '../../avr8\words/immediate.asm'
../../avr8\dict/compiler1.inc(57): Including file '../../common\words/bracketchar.asm'
../../avr8\dict/compiler1.inc(58): Including file '../../common\words/abort-string.asm'
../../avr8\dict/compiler1.inc(59): Including file '../../common\words/abort.asm'
../../avr8\dict/compiler1.inc(60): Including file '../../common\words/q-abort.asm'
../../avr8\dict/compiler1.inc(62): Including file '../../common\words/get-stack.asm'
../../avr8\dict/compiler1.inc(63): Including file '../../common\words/set-stack.asm'
../../avr8\dict/compiler1.inc(64): Including file '../../common\words/map-stack.asm'
../../avr8\dict/compiler1.inc(65): Including file '../../avr8\words/get-current.asm'
../../avr8\dict/compiler1.inc(66): Including file '../../common\words/get-order.asm'
../../avr8\dict/compiler1.inc(68): Including file '../../avr8\words/compare.asm'
../../avr8\dict/compiler1.inc(69): Including file '../../avr8\words/nfa2lfa.asm'
../../avr8\amforth.asm(15): Including file 'dict_appl.inc'
dict_appl.inc(4): Including file '../../avr8\dict/compiler2.inc'
../../avr8\dict/compiler2.inc(8): Including file '../../avr8\words/set-current.asm'
../../avr8\dict/compiler2.inc(9): Including file '../../avr8\words/wordlist.asm'
../../avr8\dict/compiler2.inc(11): Including file '../../avr8\words/only.asm'
../../avr8\dict/compiler2.inc(12): Including file '../../avr8\words/forth-wordlist.asm'
../../avr8\dict/compiler2.inc(13): Including file '../../common\words/set-order.asm'
../../avr8\dict/compiler2.inc(14): Including file '../../common\words/set-recognizer.asm'
../../avr8\dict/compiler2.inc(15): Including file '../../common\words/get-recognizer.asm'
../../avr8\dict/compiler2.inc(16): Including file '../../avr8\words/code.asm'
../../avr8\dict/compiler2.inc(17): Including file '../../avr8\words/end-code.asm'
../../avr8\dict/compiler2.inc(18): Including file '../../avr8\words/marker.asm'
../../avr8\dict/compiler2.inc(19): Including file '../../common\words/postpone.asm'
../../avr8\dict/compiler2.inc(20): Including file '../../avr8\words/i-cellplus.asm'
dict_appl.inc(6): Including file 'words/applturnkey.asm'
../../avr8\amforth.asm(23): Including file '../../avr8\amforth-interpreter.asm'
../../avr8\amforth.asm(24): Including file '../../avr8\dict/nrww.inc'
../../avr8\dict/nrww.inc(4): Including file '../../avr8\words/exit.asm'
../../avr8\dict/nrww.inc(5): Including file '../../avr8\words/execute.asm'
../../avr8\dict/nrww.inc(6): Including file '../../avr8\words/dobranch.asm'
../../avr8\dict/nrww.inc(7): Including file '../../avr8\words/docondbranch.asm'
../../avr8\dict/nrww.inc(10): Including file '../../avr8\words/doliteral.asm'
../../avr8\dict/nrww.inc(11): Including file '../../avr8\words/dovariable.asm'
../../avr8\dict/nrww.inc(12): Including file '../../avr8\words/doconstant.asm'
../../avr8\dict/nrww.inc(13): Including file '../../avr8\words/douser.asm'
../../avr8\dict/nrww.inc(14): Including file '../../avr8\words/do-value.asm'
../../avr8\dict/nrww.inc(15): Including file '../../avr8\words/fetch.asm'
../../avr8\dict/nrww.inc(16): Including file '../../avr8\words/store.asm'
../../avr8\dict/nrww.inc(17): Including file '../../avr8\words/cstore.asm'
../../avr8\dict/nrww.inc(18): Including file '../../avr8\words/cfetch.asm'
../../avr8\dict/nrww.inc(19): Including file '../../avr8\words/fetch-u.asm'
../../avr8\dict/nrww.inc(20): Including file '../../avr8\words/store-u.asm'
../../avr8\dict/nrww.inc(23): Including file '../../avr8\words/dup.asm'
../../avr8\dict/nrww.inc(24): Including file '../../avr8\words/qdup.asm'
../../avr8\dict/nrww.inc(25): Including file '../../avr8\words/swap.asm'
../../avr8\dict/nrww.inc(26): Including file '../../avr8\words/over.asm'
../../avr8\dict/nrww.inc(27): Including file '../../avr8\words/drop.asm'
../../avr8\dict/nrww.inc(28): Including file '../../avr8\words/rot.asm'
../../avr8\dict/nrww.inc(29): Including file '../../avr8\words/nip.asm'
../../avr8\dict/nrww.inc(31): Including file '../../avr8\words/r_from.asm'
../../avr8\dict/nrww.inc(32): Including file '../../avr8\words/to_r.asm'
../../avr8\dict/nrww.inc(33): Including file '../../avr8\words/r_fetch.asm'
../../avr8\dict/nrww.inc(36): Including file '../../common\words/not-equal.asm'
../../avr8\dict/nrww.inc(37): Including file '../../avr8\words/equalzero.asm'
../../avr8\dict/nrww.inc(38): Including file '../../avr8\words/lesszero.asm'
../../avr8\dict/nrww.inc(39): Including file '../../avr8\words/greaterzero.asm'
../../avr8\dict/nrww.inc(40): Including file '../../avr8\words/d-greaterzero.asm'
../../avr8\dict/nrww.inc(41): Including file '../../avr8\words/d-lesszero.asm'
../../avr8\dict/nrww.inc(43): Including file '../../avr8\words/true.asm'
../../avr8\dict/nrww.inc(44): Including file '../../avr8\words/zero.asm'
../../avr8\dict/nrww.inc(45): Including file '../../avr8\words/uless.asm'
../../avr8\dict/nrww.inc(46): Including file '../../common\words/u-greater.asm'
../../avr8\dict/nrww.inc(47): Including file '../../avr8\words/less.asm'
../../avr8\dict/nrww.inc(48): Including file '../../avr8\words/greater.asm'
../../avr8\dict/nrww.inc(50): Including file '../../avr8\words/log2.asm'
../../avr8\dict/nrww.inc(51): Including file '../../avr8\words/minus.asm'
../../avr8\dict/nrww.inc(52): Including file '../../avr8\words/plus.asm'
../../avr8\dict/nrww.inc(53): Including file '../../avr8\words/mstar.asm'
../../avr8\dict/nrww.inc(54): Including file '../../avr8\words/umslashmod.asm'
../../avr8\dict/nrww.inc(55): Including file '../../avr8\words/umstar.asm'
../../avr8\dict/nrww.inc(57): Including file '../../avr8\words/invert.asm'
../../avr8\dict/nrww.inc(58): Including file '../../avr8\words/2slash.asm'
../../avr8\dict/nrww.inc(59): Including file '../../avr8\words/2star.asm'
../../avr8\dict/nrww.inc(60): Including file '../../avr8\words/and.asm'
../../avr8\dict/nrww.inc(61): Including file '../../avr8\words/or.asm'
../../avr8\dict/nrww.inc(62): Including file '../../avr8\words/xor.asm'
../../avr8\dict/nrww.inc(64): Including file '../../avr8\words/1plus.asm'
../../avr8\dict/nrww.inc(65): Including file '../../avr8\words/1minus.asm'
../../avr8\dict/nrww.inc(66): Including file '../../avr8\words/lshift.asm'
../../avr8\dict/nrww.inc(67): Including file '../../avr8\words/rshift.asm'
../../avr8\dict/nrww.inc(68): Including file '../../avr8\words/plusstore.asm'
../../avr8\dict/nrww.inc(70): Including file '../../avr8\words/rpfetch.asm'
../../avr8\dict/nrww.inc(71): Including file '../../avr8\words/rpstore.asm'
../../avr8\dict/nrww.inc(72): Including file '../../avr8\words/spfetch.asm'
../../avr8\dict/nrww.inc(73): Including file '../../avr8\words/spstore.asm'
../../avr8\dict/nrww.inc(75): Including file '../../avr8\words/dodo.asm'
../../avr8\dict/nrww.inc(76): Including file '../../avr8\words/i.asm'
../../avr8\dict/nrww.inc(77): Including file '../../avr8\words/doplusloop.asm'
../../avr8\dict/nrww.inc(78): Including file '../../avr8\words/doloop.asm'
../../avr8\dict/nrww.inc(79): Including file '../../avr8\words/unloop.asm'
../../avr8\dict/nrww.inc(83): Including file '../../avr8\words/cmove_g.asm'
../../avr8\dict/nrww.inc(84): Including file '../../avr8\words/byteswap.asm'
../../avr8\dict/nrww.inc(85): Including file '../../avr8\words/up.asm'
../../avr8\dict/nrww.inc(86): Including file '../../avr8\words/1ms.asm'
../../avr8\dict/nrww.inc(87): Including file '../../avr8\words/2to_r.asm'
../../avr8\dict/nrww.inc(88): Including file '../../avr8\words/2r_from.asm'
../../avr8\dict/nrww.inc(90): Including file '../../avr8\words/store-e.asm'
../../avr8\dict/nrww.inc(91): Including file '../../avr8\words/fetch-e.asm'
../../avr8\dict/nrww.inc(92): Including file '../../avr8\words/store-i.asm'
../../avr8\dict/nrww.inc(96): Including file '../../avr8\words/store-i_nrww.asm'
../../avr8\dict/nrww.inc(98): Including file '../../avr8\words/fetch-i.asm'
../../avr8\dict/nrww.inc(103): Including file '../../avr8\dict/core_4k.inc'
../../avr8\dict/core_4k.inc(3): Including file '../../avr8\words/n_to_r.asm'
../../avr8\dict/core_4k.inc(4): Including file '../../avr8\words/n_r_from.asm'
../../avr8\dict/core_4k.inc(5): Including file '../../avr8\words/d-2star.asm'
../../avr8\dict/core_4k.inc(6): Including file '../../avr8\words/d-2slash.asm'
../../avr8\dict/core_4k.inc(7): Including file '../../avr8\words/d-plus.asm'
../../avr8\dict/core_4k.inc(8): Including file '../../avr8\words/d-minus.asm'
../../avr8\dict/core_4k.inc(9): Including file '../../avr8\words/d-invert.asm'
../../avr8\dict/core_4k.inc(10): Including file '../../avr8\words/slashmod.asm'
../../avr8\dict/core_4k.inc(11): Including file '../../avr8\words/abs.asm'
../../avr8\dict/core_4k.inc(12): Including file '../../common\words/pick.asm'
../../avr8\dict/core_4k.inc(13): Including file '../../avr8\words/cellplus.asm'
../../avr8\dict/core_4k.inc(14): Including file '../../avr8\dict/interrupt.inc'
../../avr8\dict/interrupt.inc(2): Including file '../../avr8\words/int-on.asm'
../../avr8\dict/interrupt.inc(3): Including file '../../avr8\words/int-off.asm'
../../avr8\dict/interrupt.inc(4): Including file '../../avr8\words/int-store.asm'
../../avr8\dict/interrupt.inc(5): Including file '../../avr8\words/int-fetch.asm'
../../avr8\dict/interrupt.inc(6): Including file '../../avr8\words/int-trap.asm'
../../avr8\dict/interrupt.inc(8): Including file '../../avr8\words/isr-exec.asm'
../../avr8\dict/interrupt.inc(9): Including file '../../avr8\words/isr-end.asm'
../../avr8\dict/core_4k.inc(17): Including file '../../common\words/prompt-ok.asm'
../../avr8\dict/core_4k.inc(18): Including file '../../common\words/prompt-ready.asm'
../../avr8\dict/core_4k.inc(19): Including file '../../common\words/prompt-error.asm'
../../avr8\dict/core_4k.inc(21): Including file '../../common\words/quit.asm'
../../avr8\dict/core_4k.inc(22): Including file '../../avr8\words/pause.asm'
../../avr8\dict/core_4k.inc(23): Including file '../../avr8\words/cold.asm'
../../avr8\dict/core_4k.inc(24): Including file '../../avr8\words/warm.asm'
../../avr8\dict/core_4k.inc(26): Including file '../../common\words/handler.asm'
../../avr8\dict/core_4k.inc(27): Including file '../../common\words/catch.asm'
../../avr8\dict/core_4k.inc(28): Including file '../../common\words/throw.asm'
../../avr8\dict/core_4k.inc(31): Including file '../../avr8\words/edefer-fetch.asm'
../../avr8\dict/core_4k.inc(32): Including file '../../avr8\words/edefer-store.asm'
../../avr8\dict/core_4k.inc(33): Including file '../../avr8\words/rdefer-fetch.asm'
../../avr8\dict/core_4k.inc(34): Including file '../../avr8\words/rdefer-store.asm'
../../avr8\dict/core_4k.inc(35): Including file '../../avr8\words/udefer-fetch.asm'
../../avr8\dict/core_4k.inc(36): Including file '../../avr8\words/udefer-store.asm'
../../avr8\dict/core_4k.inc(37): Including file '../../avr8\words/defer-store.asm'
../../avr8\dict/core_4k.inc(38): Including file '../../avr8\words/defer-fetch.asm'
../../avr8\dict/core_4k.inc(39): Including file '../../avr8\words/do-defer.asm'
../../avr8\dict/core_4k.inc(41): Including file '../../avr8\words/d-equal.asm'
../../avr8\dict/core_4k.inc(42): Including file '../../common\words/u-dot.asm'
../../avr8\dict/core_4k.inc(43): Including file '../../common\words/u-dot-r.asm'
../../avr8\dict/core_4k.inc(46): Including file '../../avr8\words/uslashmod.asm'
../../avr8\dict/core_4k.inc(47): Including file '../../avr8\words/negate.asm'
../../avr8\dict/core_4k.inc(48): Including file '../../common\words/slash.asm'
../../avr8\dict/core_4k.inc(49): Including file '../../common\words/mod.asm'
../../avr8\dict/core_4k.inc(51): Including file '../../common\words/min.asm'
../../avr8\dict/core_4k.inc(52): Including file '../../common\words/max.asm'
../../avr8\dict/core_4k.inc(53): Including file '../../common\words/within.asm'
../../avr8\dict/core_4k.inc(55): Including file '../../common\words/show-wordlist.asm'
../../avr8\dict/core_4k.inc(56): Including file '../../avr8\words/words.asm'
../../avr8\dict/core_4k.inc(58): Including file '../../common\words/dot-quote.asm'
../../avr8\dict/core_4k.inc(59): Including file '../../common\words/squote.asm'
../../avr8\dict/core_4k.inc(60): Including file '../../avr8\words/fill.asm'
../../avr8\dict/core_4k.inc(62): Including file '../../common\words/f_cpu.asm'
../../avr8\dict/core_4k.inc(63): Including file '../../avr8\words/state.asm'
../../avr8\dict/core_4k.inc(64): Including file '../../common\words/base.asm'
../../avr8\dict/core_4k.inc(66): Including file '../../avr8\words/cells.asm'
../../avr8\dict/core_4k.inc(68): Including file '../../common\words/2dup.asm'
../../avr8\dict/core_4k.inc(69): Including file '../../common\words/2drop.asm'
../../avr8\dict/core_4k.inc(70): Including file '../../common\words/tuck.asm'
../../avr8\dict/core_4k.inc(72): Including file '../../common\words/to-in.asm'
../../avr8\dict/core_4k.inc(73): Including file '../../avr8\words/sharptib.asm'
../../avr8\dict/core_4k.inc(74): Including file '../../avr8\words/pad.asm'
../../avr8\dict/core_4k.inc(75): Including file '../../avr8\words/emit.asm'
../../avr8\dict/core_4k.inc(76): Including file '../../avr8\words/emitq.asm'
../../avr8\dict/core_4k.inc(77): Including file '../../avr8\words/key.asm'
../../avr8\dict/core_4k.inc(78): Including file '../../avr8\words/keyq.asm'
../../avr8\dict/core_4k.inc(80): Including file '../../avr8\words/dp.asm'
../../avr8\dict/core_4k.inc(81): Including file '../../avr8\words/ehere.asm'
../../avr8\dict/core_4k.inc(82): Including file '../../avr8\words/here.asm'
../../avr8\dict/core_4k.inc(83): Including file '../../avr8\words/allot.asm'
../../avr8\dict/core_4k.inc(85): Including file '../../common\words/bin.asm'
../../avr8\dict/core_4k.inc(86): Including file '../../common\words/decimal.asm'
../../avr8\dict/core_4k.inc(87): Including file '../../common\words/hex.asm'
../../avr8\dict/core_4k.inc(88): Including file '../../common\words/bl.asm'
../../avr8\dict/core_4k.inc(90): Including file '../../avr8\words/turnkey.asm'
../../avr8\dict/core_4k.inc(91): Including file '../../common\words/to-upper.asm'
../../avr8\dict/core_4k.inc(92): Including file '../../common\words/to-lower.asm'
../../avr8\dict/core_4k.inc(94): Including file '../../common\words/q-stack.asm'
../../avr8\dict/core_4k.inc(95): Including file '../../common\words/bounds.asm'
../../avr8\dict/core_4k.inc(96): Including file '../../common\words/cr.asm'
../../avr8\dict/core_4k.inc(97): Including file '../../common\words/space.asm'
../../avr8\dict/core_4k.inc(98): Including file '../../common\words/spaces.asm'
../../avr8\dict/core_4k.inc(99): Including file '../../common\words/s-to-d.asm'
../../avr8\dict/nrww.inc(111): Including file '../../avr8\words/2literal.asm'
../../avr8\dict/nrww.inc(112): Including file '../../avr8\words/equal.asm'
../../avr8\dict/nrww.inc(113): Including file '../../common\words/num-constants.asm'
../../avr8\amforth.asm(25): Including file 'dict_appl_core.inc'
../../avr8\amforth.asm(36): Including file '../../avr8\amforth-eeprom.inc'
                 
                 
                 ; file see ../template/template.asm. You may want to
                 ; copy that file to this one and edit it afterwards.
                 
                 .include "preamble.inc"
                 
                 .include "macros.asm"
                 
                 .set DICT_COMPILER2 = 0 ;
                 .set cpu_msp430 = 0
                 .set cpu_avr8   = 1
                 
                 .include "user.inc"
                 
                 ; 
                 
                 ; used by the multitasker
                 .set USER_STATE    = 0
                 .set USER_FOLLOWER = 2
                 
                 ; stackpointer, used by mulitasker
                 .set USER_RP      = 4
                 .set USER_SP0     = 6
                 .set USER_SP      = 8
                 
                 ; excpection handling
                 .set USER_HANDLER = 10
                 
                 ; numeric IO
                 .set USER_BASE  = 12
                 
                 ; character IO 
                 .set USER_EMIT  = 14
                 .set USER_EMITQ = 16
                 .set USER_KEY   = 18
                 .set USER_KEYQ  = 20
                 
                 .set USER_SOURCE  = 22
                 .set USER_TO_IN   = 24
                 .set USER_REFILL  = 26
                 
                 .set SYSUSERSIZE = 28
                 ; 
                 
                   .def zerol = r2
                   .def zeroh = r3
                   .def upl = r4
                   .def uph = r5
                 
                   .def al  = r6
                   .def ah  = r7
                   .def bl  = r8
                   .def bh  = r9
                 
                 ; internal
                   .def mcu_boot      = r10
                   .def erase_counter = r11
                 
                   .def temp4 = r14
                   .def temp5 = r15
                 
                   .def temp0 = r16
                   .def temp1 = r17
                   .def temp2 = r18
                   .def temp3 = r19
                 
                   .def temp6 = r20
                   .def temp7 = r21
                 
                   .def tosl = r24
                   .def tosh = r25
                 
                   .def wl = r22
                   .def wh = r23
                 
                 .macro loadtos
                     ld tosl, Y+
                     ld tosh, Y+
                 .endmacro
                 
                 .macro savetos
                     st -Y, tosh
                     st -Y, tosl
                 .endmacro
                 
                 .macro in_
                 .if (@1 < $40)
                   in @0,@1
                 .else
                   lds @0,@1
                 .endif
                 .endmacro
                 
                 .macro out_
                 .if (@0 < $40)
                   out @0,@1
                 .else
                   sts @0,@1
                 .endif
                 .endmacro
                 
                 .macro sbi_
                 .if (@0 < $40)
                   sbi @0,@1
                 .else
                   in_ @2,@0
                   ori @2,exp2(@1)
                   out_ @0,@2
                 .endif
                 .endmacro
                 
                 .macro cbi_
                 .if (@0 < $40)
                   cbi @0,@1
                 .else
                   in_ @2,@0
                   andi @2,~(exp2(@1))
                   out_ @0,@2
                 .endif
                 .endmacro
                 
                 .macro jmp_
                 	; a more flexible macro
                     .ifdef @0
                     .if (@0-pc > 2040) || (pc-@0>2040)
                 	jmp @0
                 	.else
                 	rjmp @0
                 	.endif
                 	.else
                 	jmp @0
                 	.endif
                 .endmacro
                 .macro call_
                 	; a more flexible macro
                     .ifdef @0
                     .if (@0-pc > 2040) || (pc-@0>2040)
                 	call @0
                 	.else
                 	rcall @0
                 	.endif
                 	.else
                 	call @0
                 	.endif
                 .endmacro
                 
                 ;               F_CPU
                 ;    µsec   16000000   14745600    8000000  1000000
                 ;    1            16      14,74          8        1
                 ;    10          160     147,45         80       10
                 ;    100        1600    1474,56        800      100
                 ;    1000      16000   14745,6        8000     1000
                 ;
                 ; cycles = µsec * f_cpu / 1e6
                 ; n_loops=cycles/5
                 ;
                 ;     cycles already used will be subtracted from the delay
                 ;     the waittime resolution is 1 cycle (delay from exact to +1 cycle)
                 ;     the maximum delay at 20MHz (50ns/clock) is 38350ns
                 ;     waitcount register must specify an immediate register
                 ;
                 ; busy waits a specfied amount of microseconds
                 .macro   delay
                       .set cycles = ( ( @0 * F_CPU ) / 1000000 )
                       .if (cycles > ( 256 * 255 * 4 + 2))
                         .error "MACRO delay - too many cycles to burn"
                       .else
                         .if (cycles > 6)
                           .set  loop_cycles = (cycles / 4)      
                           ldi   zl,low(loop_cycles)
                           ldi   zh,high(loop_cycles)
                           sbiw  Z, 1
                           brne  pc-1
                           .set  cycles = (cycles - (loop_cycles * 4))
                         .endif
                         .if (cycles > 0)
                           .if   (cycles & 4)
                             rjmp  pc+1
                             rjmp  pc+1
                           .endif
                           .if   (cycles & 2)
                             rjmp  pc+1
                           .endif
                           .if   (cycles & 1)
                             nop
                           .endif
                         .endif
                       .endif
                 .endmacro
                 
                 ; portability macros, they come from the msp430 branches
                 
                 .macro DEST
                     .dw @0
                 .endm
                 
                 ; controller specific file selected via include
                 ; directory definition when calling the assembler (-I)
                 .include "device.asm"
                 
                 ; generated automatically, do not edit
                 
                 .list
                 
                 .equ ramstart =  256
                 .equ CELLSIZE = 2
                 .macro readflashcell
                 	lsl zl
                 	rol zh
                 	lpm @0, Z+
                 	lpm @1, Z+
                 .endmacro
                 .macro writeflashcell
                 	lsl zl
                 	rol zh
                 .endmacro
                 .set WANT_USART0 = 0
                 .set WANT_TWI = 0
                 .set WANT_TIMER_COUNTER_1 = 0
                 .set WANT_TIMER_COUNTER_2 = 0
                 .set WANT_AD_CONVERTER = 0
                 .set WANT_ANALOG_COMPARATOR = 0
                 .set WANT_PORTB = 0
                 .set WANT_PORTC = 0
                 .set WANT_PORTD = 0
                 .set WANT_TIMER_COUNTER_0 = 0
                 .set WANT_EXTERNAL_INTERRUPT = 0
                 .set WANT_SPI = 0
                 .set WANT_WATCHDOG = 0
                 .set WANT_CPU = 0
                 .set WANT_EEPROM = 0
                 .equ intvecsize = 2 ; please verify; flash size: 32768 bytes
                 .equ pclen = 2 ; please verify
                 .overlap
                 .org 2
000002 d0c7      	 rcall isr ; External Interrupt Request 0
                 .org 4
000004 d0c5      	 rcall isr ; External Interrupt Request 1
                 .org 6
000006 d0c3      	 rcall isr ; Pin Change Interrupt Request 0
                 .org 8
000008 d0c1      	 rcall isr ; Pin Change Interrupt Request 0
                 .org 10
00000a d0bf      	 rcall isr ; Pin Change Interrupt Request 1
                 .org 12
00000c d0bd      	 rcall isr ; Watchdog Time-out Interrupt
                 .org 14
00000e d0bb      	 rcall isr ; Timer/Counter2 Compare Match A
                 .org 16
000010 d0b9      	 rcall isr ; Timer/Counter2 Compare Match A
                 .org 18
000012 d0b7      	 rcall isr ; Timer/Counter2 Overflow
                 .org 20
000014 d0b5      	 rcall isr ; Timer/Counter1 Capture Event
                 .org 22
000016 d0b3      	 rcall isr ; Timer/Counter1 Compare Match A
                 .org 24
000018 d0b1      	 rcall isr ; Timer/Counter1 Compare Match B
                 .org 26
00001a d0af      	 rcall isr ; Timer/Counter1 Overflow
                 .org 28
00001c d0ad      	 rcall isr ; TimerCounter0 Compare Match A
                 .org 30
00001e d0ab      	 rcall isr ; TimerCounter0 Compare Match B
                 .org 32
000020 d0a9      	 rcall isr ; Timer/Couner0 Overflow
                 .org 34
000022 d0a7      	 rcall isr ; SPI Serial Transfer Complete
                 .org 36
000024 d0a5      	 rcall isr ; USART Rx Complete
                 .org 38
000026 d0a3      	 rcall isr ; USART, Data Register Empty
                 .org 40
000028 d0a1      	 rcall isr ; USART Tx Complete
                 .org 42
00002a d09f      	 rcall isr ; ADC Conversion Complete
                 .org 44
00002c d09d      	 rcall isr ; EEPROM Ready
                 .org 46
00002e d09b      	 rcall isr ; Analog Comparator
                 .org 48
000030 d099      	 rcall isr ; Two-wire Serial Interface
                 .org 50
000032 d097      	 rcall isr ; Store Program Memory Read
                 .equ INTVECTORS = 26
                 .nooverlap
                 
                 ; compatability layer (maybe empty)
                 .equ SPMEN = SELFPRGEN
                 
                 ; controller data area, environment query mcu-info
                 mcu_info:
                 mcu_ramsize:
000033 0800      	.dw 2048
                 mcu_eepromsize:
000034 0400      	.dw 1024
                 mcu_maxdp:
000035 7000      	.dw 28672 
                 mcu_numints:
000036 001a      	.dw 26
                 mcu_name:
000037 000a      	.dw 10
000038 5441
000039 656d
00003a 6167
00003b 3233
00003c 5038      	.db "ATmega328P"
                 .set codestart=pc
                 
                 ; some defaults, change them in your application master file
                 ; see template.asm for an example
                 
                 .set AMFORTH_RO_SEG = NRWW_START_ADDR
                 
                 ; receiving is asynchron, so an interrupt queue is useful.
                 .set WANT_ISR_RX = 1
                 
                 ; case insensitve dictionary lookup.
                 .set WANT_IGNORECASE = 0
                 
                 ; map all memories to one address space. Details in the
                 ; technical guide
                 .set WANT_UNIFIED = 0
                 
                 ; terminal input buffer
                 .set TIBSIZE  = 90    ; ANS94 needs at least 80 characters per line
                 
                 ; USER variables *in addition* to system ones
                 .set APPUSERSIZE = 10  ; size of application specific user area in bytes
                 
                 ; addresses of various data segments
                 .set rstackstart = RAMEND      ; start address of return stack, grows downward
                 .set stackstart  = RAMEND - 80 ; start address of data stack, grows downward
                 ; change only if you know what to you do
                 .set NUMWORDLISTS = 8 ; number of word lists in the searh order, at least 8
                 .set NUMRECOGNIZERS = 4 ; total number of recognizers, two are always used.
                 
                 ; 10 per mille (1 per cent) is ok.
                 .set BAUD = 38400
                 .set BAUD_MAXERROR = 10
                 
                 ; Dictionary setup
                 .set VE_HEAD = $0000
                 .set VE_ENVHEAD = $0000
                 
                 
                 .set WANT_IGNORECASE = 1
                 
                 ; cpu clock in hertz
                 .equ F_CPU = 16000000
                 .include "drivers/usart_0.asm"
                 
                   .equ BAUDRATE_HIGH = UBRR0H
                   .equ USART_C = UCSR0C
                   .equ USART_B = UCSR0B
                   .equ USART_A = UCSR0A
                   .equ USART_DATA = UDR0
                   .ifndef URXCaddr
                   .endif
                 
                 .equ bm_USART_RXRD = 1 << RXC0
                 .equ bm_USART_TXRD = 1 << UDRE0
                 .equ bm_ENABLE_TX  = 1 << TXEN0
                 .equ bm_ENABLE_RX  = 1 << RXEN0
                 .equ bm_ENABLE_INT_RX = 1<<RXCIE0
                 .equ bm_ENABLE_INT_TX = 1<<UDRIE0
                 
                 .equ bm_USARTC_en   = 0
                 .equ bm_ASYNC       = 0 << 6
                 .equ bm_SYNC        = 1 << 6
                 .equ bm_NO_PARITY   = 0 << 4
                 .equ bm_EVEN_PARITY = 2 << 4
                 .equ bm_ODD_PARITY  = 3 << 4
                 .equ bm_1STOPBIT    = 0 << 3
                 .equ bm_2STOPBIT    = 1 << 3
                 .equ bm_5BIT        = 0 << 1
                 .equ bm_6BIT        = 1 << 1
                 .equ bm_7BIT        = 2 << 1
                 .equ bm_8BIT        = 3 << 1
                 
                 .include "drivers/usart_common.asm"
                 
                 .set USART_C_VALUE = bm_ASYNC | bm_NO_PARITY | bm_1STOPBIT | bm_8BIT
                 .if WANT_ISR_RX == 1
                   .set USART_B_VALUE = bm_ENABLE_TX | bm_ENABLE_RX | bm_ENABLE_INT_RX
                   .include "drivers/usart-isr-rx.asm"
                 
                 
                 ; sizes have to be powers of 2!
                 .equ usart_rx_size = $10
                 .equ usart_rx_mask = usart_rx_size - 1
                 .dseg
000100           usart_rx_data: .byte usart_rx_size+2
000112           usart_rx_in: .byte 2
000114           usart_rx_out: .byte 2
                 
                 .cseg
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 ; forth code:
                 ; : rx-isr USART_DATA c@
                 ;    usart_rx_data usart_rx_in c@ dup >r
                 ;    + !
                 ;    r> 1+ usart_rx_mask and usart_rx_in c!
                 ; ;
                 ; setup with
                 ; ' rx-isr URXCaddr int!
                 usart_rx_isr:
00003d 93af        push xl
00003e b7af        in xl, SREG
00003f 93af        push xl
000040 93bf        push xh
000041 93ef        push zl
000042 93ff        push zh
                 
000043 91b0 00c6   lds xh, USART_DATA
                 usart_rx_store:
000045 91a0 0112   lds xl, usart_rx_in
000047 e0e0        ldi zl, low(usart_rx_data)
000048 e0f1        ldi zh, high(usart_rx_data)
000049 0fea        add zl, xl
00004a 1df3        adc zh, zeroh
00004b 83b0        st Z, xh
                 
00004c 95a3        inc xl
00004d 70af        andi xl,usart_rx_mask
                 
00004e 93a0 0112   sts usart_rx_in, xl
                 
                 usart_rx_isr_finish:
000050 91ff        pop zh
000051 91ef        pop zl
000052 91bf        pop xh
000053 91af        pop xl
000054 bfaf        out SREG, xl
000055 91af        pop xl
000056 9518        reti
                 
                 .set usartpc = pc
                 .org URXCaddr
000024 c018        jmp_ usart_rx_isr
                 .org usartpc
                 
                 
                 ; ( -- ) Hardware Access
                 ; R( --)
                 ; initialize usart
                 ;VE_USART_INIT_RX:
                 ;  .dw $ff06
                 ;  .db "+usart"
                 ;  .dw VE_HEAD
                 ;  .set VE_HEAD = VE_USART_INIT_RX
                 XT_USART_INIT_RX_ISR:
000057 3800        .dw DO_COLON
                 PFA_USART_INIT_RX_ISR:          ; ( -- )
000058 394e        .dw XT_ZERO
000059 3837        .dw XT_DOLITERAL
00005a 0112        .dw usart_rx_in
00005b 3887        .dw XT_CSTORE
00005c 394e        .dw XT_ZERO
00005d 3837        .dw XT_DOLITERAL
00005e 0114        .dw usart_rx_out
00005f 3887        .dw XT_CSTORE
                 
000060 381a        .dw XT_EXIT
                 
                 ; ( -- c)
                 ; MCU
                 ; get 1 character from input queue, wait if needed using interrupt driver
                 VE_RX_ISR:
000061 ff06          .dw $ff06
000062 7872
000063 692d
000064 7273          .db "rx-isr"
000065 0000          .dw VE_HEAD
                     .set VE_HEAD = VE_RX_ISR
                 XT_RX_ISR:
000066 3800          .dw DO_COLON
                 PFA_RX_ISR:
000067 0080        .dw XT_RXQ_ISR
000068 3830        .dw XT_DOCONDBRANCH
000069 0067        .dw PFA_RX_ISR
00006a 3837        .dw XT_DOLITERAL
00006b 0114        .dw usart_rx_out
00006c 3892        .dw XT_CFETCH
00006d 38ab        .dw XT_DUP
00006e 3a29        .dw XT_1PLUS
00006f 3837        .dw XT_DOLITERAL
000070 000f        .dw usart_rx_mask
000071 3a0d        .dw XT_AND
000072 3837        .dw XT_DOLITERAL
000073 0114        .dw usart_rx_out
000074 3887        .dw XT_CSTORE
000075 3837        .dw XT_DOLITERAL
000076 0100        .dw usart_rx_data
000077 3997        .dw XT_PLUS
000078 3892        .dw XT_CFETCH
000079 381a        .dw XT_EXIT
                 
                 ; ( -- f)  
                 ; MCU
                 ; check if unread characters are in the input queue using interrupt driver
                 VE_RXQ_ISR:
00007a ff07          .dw $ff07
00007b 7872
00007c 2d3f
00007d 7369
00007e 0072          .db "rx?-isr",0
00007f 0061          .dw VE_HEAD
                     .set VE_HEAD = VE_RXQ_ISR
                 XT_RXQ_ISR:
000080 3800          .dw DO_COLON
                 PFA_RXQ_ISR:
000081 3d11        .dw XT_PAUSE
000082 3837        .dw XT_DOLITERAL
000083 0114        .dw usart_rx_out
000084 3892        .dw XT_CFETCH
000085 3837        .dw XT_DOLITERAL
000086 0112        .dw usart_rx_in
000087 3892        .dw XT_CFETCH
000088 390d        .dw XT_NOTEQUAL
000089 381a        .dw XT_EXIT
                   .set XT_RX  = XT_RX_ISR
                   .set XT_RXQ = XT_RXQ_ISR
                   .set XT_USART_INIT_RX = XT_USART_INIT_RX_ISR
                 .else
                 .endif
                 
                 .include "words/usart-tx-poll.asm"
                 
                 ; MCU
                 ; check availability and send one character to the terminal using register poll
                 VE_TX_POLL:
00008a ff07          .dw $ff07
00008b 7874
00008c 702d
00008d 6c6f
00008e 006c          .db "tx-poll",0
00008f 007a          .dw VE_HEAD
                     .set VE_HEAD = VE_TX_POLL
                 XT_TX_POLL:
000090 3800          .dw DO_COLON
                 PFA_TX_POLL:
                   ; wait for data ready
000091 009e        .dw XT_TXQ_POLL
000092 3830        .dw XT_DOCONDBRANCH
000093 0091        .dw PFA_TX_POLL
                   ; send to usart
000094 3837        .dw XT_DOLITERAL
000095 00c6        .dw USART_DATA
000096 3887        .dw XT_CSTORE
000097 381a        .dw XT_EXIT
                 
                 ; ( -- f) MCU
                 ; MCU
                 ; check if a character can be send using register poll
                 VE_TXQ_POLL:
000098 ff08          .dw $ff08
000099 7874
00009a 2d3f
00009b 6f70
00009c 6c6c          .db "tx?-poll"
00009d 008a          .dw VE_HEAD
                     .set VE_HEAD = VE_TXQ_POLL
                 XT_TXQ_POLL:
00009e 3800          .dw DO_COLON
                 PFA_TXQ_POLL:
00009f 3d11        .dw XT_PAUSE
0000a0 3837        .dw XT_DOLITERAL
0000a1 00c0        .dw USART_A
0000a2 3892        .dw XT_CFETCH
0000a3 3837        .dw XT_DOLITERAL
0000a4 0020        .dw bm_USART_TXRD
0000a5 3a0d        .dw XT_AND
0000a6 381a        .dw XT_EXIT
                 .set XT_TX  = XT_TX_POLL
                 .set XT_TXQ = XT_TXQ_POLL
                 .set XT_USART_INIT_TX = 0
                 
                 .include "words/ubrr.asm"
                 
                 ; MCU
                 ; returns usart UBRR settings
                 VE_UBRR:
0000a7 ff04        .dw $ff04
0000a8 6275
0000a9 7272        .db "ubrr"
0000aa 0098        .dw VE_HEAD
                   .set VE_HEAD = VE_UBRR
                 XT_UBRR:
0000ab 3869        .dw PFA_DOVALUE1
                 PFA_UBRR:          ; ( -- )
0000ac 0086        .dw EE_UBRRVAL
0000ad 3d7a        .dw XT_EDEFERFETCH
0000ae 3d84        .dw XT_EDEFERSTORE
                 .include "words/usart.asm"
                 
                 ; MCU
                 ; initialize usart
                 VE_USART:
0000af ff06        .dw $ff06
0000b0 752b
0000b1 6173
0000b2 7472        .db "+usart"
0000b3 00a7        .dw VE_HEAD
                   .set VE_HEAD = VE_USART
                 XT_USART:
0000b4 3800        .dw DO_COLON
                 PFA_USART:          ; ( -- )
                 
0000b5 3837        .dw XT_DOLITERAL
0000b6 0098        .dw USART_B_VALUE
0000b7 3837        .dw XT_DOLITERAL
0000b8 00c1        .dw USART_B
0000b9 3887        .dw XT_CSTORE
                 
0000ba 3837        .dw XT_DOLITERAL
0000bb 0006        .dw USART_C_VALUE
0000bc 3837        .dw XT_DOLITERAL
0000bd 00c2        .dw USART_C | bm_USARTC_en
0000be 3887        .dw XT_CSTORE
                 
0000bf 00ab        .dw XT_UBRR
0000c0 38ab        .dw XT_DUP
0000c1 3ae7        .dw XT_BYTESWAP
0000c2 3837        .dw XT_DOLITERAL
0000c3 00c5        .dw BAUDRATE_HIGH
0000c4 3887        .dw XT_CSTORE
0000c5 3837        .dw XT_DOLITERAL
0000c6 00c4        .dw BAUDRATE_LOW
0000c7 3887        .dw XT_CSTORE
                 .if XT_USART_INIT_RX!=0
0000c8 0057        .dw XT_USART_INIT_RX
                 .endif
                 .if XT_USART_INIT_TX!=0
                 .endif
                 
0000c9 381a        .dw XT_EXIT
                 
                 .include "amforth.asm"
                 
                 ;;;;
                 ;;;; GPL V2 (only)
                 
                 .set AMFORTH_NRWW_SIZE=(FLASHEND-AMFORTH_RO_SEG)*2
                 
                 .set corepc = pc
                 .org $0000
000000 940c 3d1a   jmp_ PFA_COLD
                 
                 .org corepc
                 .include "drivers/generic-isr.asm"
                 
                 .dseg
000116           intcur: .byte 1
                 .eseg
000000           intvec: .byte INTVECTORS * CELLSIZE
                 .cseg
                 
                 ; interrupt routine gets called (again) by rcall! This gives the
                 ; address of the int-vector on the stack.
                 isr:
0000ca 920a          st -Y, r0
0000cb b60f          in r0, SREG
0000cc 920a          st -Y, r0
                 .if (pclen==3)
                 .endif
0000cd 900f          pop r0
0000ce 900f          pop r0          ; = intnum * intvectorsize + 1 (address following the rcall)
0000cf 940a          dec r0
                 .if intvecsize == 1 ;
                 .endif
0000d0 9200 0116     sts intcur, r0
0000d2 9009          ld r0, Y+
0000d3 be0f          out SREG, r0
0000d4 9009          ld r0, Y+
0000d5 9468          set ; set the interrupt flag for the inner interpreter
0000d6 9508          ret ; returns the interrupt, the rcall stack frame is removed!
                 
                 ; lower part of the dictionary
                 .include "dict/rww.inc"
                 
                 
                 ; Arithmetics
                 ; add a number to a double cell
                 VE_MPLUS:
0000d7 ff02          .dw $ff02
0000d8 2b6d          .db "m+"
0000d9 00af          .dw VE_HEAD
                     .set VE_HEAD = VE_MPLUS
                 XT_MPLUS:
0000da 3800          .dw DO_COLON
                 PFA_MPLUS:
0000db 3faf          .dw XT_S2D
0000dc 3c04          .dw XT_DPLUS
0000dd 381a          .dw XT_EXIT
                 .include "words/ud-star.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UDSTAR:
0000de ff03          .dw $ff03
0000df 6475
../../common\words/ud-star.asm(9): warning: .cseg .db misalignment - padding zero byte
0000e0 002a          .db "ud*"
0000e1 00d7          .dw VE_HEAD
                     .set VE_HEAD = VE_UDSTAR
                 XT_UDSTAR:
0000e2 3800          .dw DO_COLON
                 PFA_UDSTAR:
                 
                 .endif
                 ;Z UD*      ud1 d2 -- ud3      32*16->32 multiply
                 ;   XT_DUP >R UM* DROP  XT_SWAP R> UM* ROT + ;
                 
0000e3 38ab
0000e4 38f9
0000e5 39da
0000e6 38d3              .DW XT_DUP,XT_TO_R,XT_UMSTAR,XT_DROP
0000e7 38be
0000e8 38f0
0000e9 39da
0000ea 38db
0000eb 3997
0000ec 381a              .DW XT_SWAP,XT_R_FROM,XT_UMSTAR,XT_ROT,XT_PLUS,XT_EXIT
                 .include "words/umax.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UMAX:
0000ed ff04          .dw $ff04
0000ee 6d75
0000ef 7861          .db "umax"
0000f0 00de          .dw VE_HEAD
                     .set VE_HEAD = VE_UMAX
                 XT_UMAX:
0000f1 3800          .dw DO_COLON
                 PFA_UMAX:
                 .endif
                 
0000f2 3eaa
0000f3 3956              .DW XT_2DUP,XT_ULESS
0000f4 3830      	.dw XT_DOCONDBRANCH
0000f5 00f7      	 DEST(UMAX1)
0000f6 38be              .DW XT_SWAP
0000f7 38d3      UMAX1:  .DW XT_DROP
0000f8 381a      	.dw XT_EXIT
                 .include "words/umin.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UMIN:
0000f9 ff04          .dw $ff04
0000fa 6d75
0000fb 6e69          .db "umin"
0000fc 00ed          .dw VE_HEAD
                     .set VE_HEAD = VE_UMIN
                 XT_UMIN:
0000fd 3800          .dw DO_COLON
                 PFA_UMIN:
                 .endif
0000fe 3eaa
0000ff 3961              .DW XT_2DUP,XT_UGREATER
000100 3830      	.dw XT_DOCONDBRANCH
000101 0103      	DEST(UMIN1)
000102 38be              .DW XT_SWAP
000103 38d3      UMIN1:  .DW XT_DROP
000104 381a      	.dw XT_EXIT
                 .include "words/immediate-q.asm"
                 
                 ; Tools
                 ; get count information out of a counted string in flash
                 ;VE_IMMEDIATEQ:
                 ;    .dw $ff06
                 ;    .db "immediate?"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_IMMEDIATEQ
                 XT_IMMEDIATEQ:
000105 3800          .dw DO_COLON
                 PFA_IMMEDIATEQ:
000106 3837          .dw XT_DOLITERAL
000107 8000          .dw $8000
000108 3a0d          .dw XT_AND
000109 3914          .dw XT_ZEROEQUAL
00010a 3830          .dw XT_DOCONDBRANCH
00010b 010f          DEST(IMMEDIATEQ1)
00010c 3837           .dw XT_DOLITERAL
00010d 0001           .dw 1
00010e 381a           .dw XT_EXIT
                 IMMEDIATEQ1:
                     ; not immediate
00010f 3945          .dw XT_TRUE
000110 381a          .dw XT_EXIT
                 .include "words/name2flags.asm"
                 
                 ; Tools
                 ; get the flags from a name token
                 VE_NAME2FLAGS:
000111 ff0a          .dw $ff0a
000112 616e
000113 656d
000114 663e
000115 616c
000116 7367          .db "name>flags"
000117 00f9          .dw VE_HEAD
                     .set VE_HEAD = VE_NAME2FLAGS
                 XT_NAME2FLAGS:
000118 3800          .dw DO_COLON
                 PFA_NAME2FLAGS:
000119 3bba          .dw XT_FETCHI ; skip to link field
00011a 3837          .dw XT_DOLITERAL
00011b ff00          .dw $ff00
00011c 3a0d          .dw XT_AND
00011d 381a          .dw XT_EXIT
                 
                 .if AMFORTH_NRWW_SIZE > 8000
                 .elif AMFORTH_NRWW_SIZE > 4000
                 .include "dict/appl_4k.inc"
                 
                 
                 ; Tools
                 ; print the version string
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DOT_VER:
00011e ff03          .dw $ff03
00011f 6576
../../common\words/ver.asm(12): warning: .cseg .db misalignment - padding zero byte
000120 0072          .db "ver"
000121 0111          .dw VE_HEAD
                     .set VE_HEAD = VE_DOT_VER
                 XT_DOT_VER:
000122 3800          .dw DO_COLON
                 PFA_DOT_VER:
                 .endif
000123 0277          .dw XT_ENV_FORTHNAME
000124 03a0          .dw XT_ITYPE
000125 3f96          .dw XT_SPACE
000126 3e9e          .dw XT_BASE
000127 3873          .dw XT_FETCH
                 
000128 0285          .dw XT_ENV_FORTHVERSION
000129 3f29          .dw XT_DECIMAL
00012a 3faf          .dw XT_S2D
00012b 02be          .dw XT_L_SHARP
00012c 02c6          .dw XT_SHARP
00012d 3837          .dw XT_DOLITERAL
00012e 002e          .dw '.'
00012f 02af          .dw XT_HOLD
000130 02dc          .dw XT_SHARP_S
000131 02e7          .dw XT_SHARP_G
000132 03d6          .dw XT_TYPE
000133 3e9e          .dw XT_BASE
000134 387b          .dw XT_STORE
000135 3f96          .dw XT_SPACE
000136 028d          .dw XT_ENV_CPU
000137 03a0          .dw XT_ITYPE
                 
000138 381a          .dw XT_EXIT
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/noop.asm"
                 
                 ; Tools
                 ; do nothing
                 VE_NOOP:
000139 ff04          .dw $ff04
00013a 6f6e
00013b 706f          .db "noop"
00013c 011e          .dw VE_HEAD
                     .set VE_HEAD = VE_NOOP
                 XT_NOOP:
00013d 013e          .dw PFA_NOOP
                 PFA_NOOP:
00013e 940c 3804     jmp_ DO_NEXT
                 .include "words/unused.asm"
                 
                 ; Tools
                 ; Amount of available RAM (incl. PAD)
                 VE_UNUSED:
000140 ff06          .dw $ff06
000141 6e75
000142 7375
000143 6465          .db "unused"
000144 0139          .dw VE_HEAD
                     .set VE_HEAD = VE_UNUSED
                 XT_UNUSED:
000145 3800          .dw DO_COLON
                 PFA_UNUSED:
000146 3a7b          .dw XT_SP_FETCH
000147 3f0a          .dw XT_HERE
000148 398d          .dw XT_MINUS
000149 381a          .dw XT_EXIT
                 .include "words/to.asm"
                 
                 ; Tools
                 ; store the TOS to the named value (eeprom cell)
                 VE_TO:
00014a 0002          .dw $0002
00014b 6f74          .db "to"
00014c 0140          .dw VE_HEAD
                     .set VE_HEAD = VE_TO
                 XT_TO:
00014d 3800          .dw DO_COLON
                 PFA_TO:
00014e 03e5          .dw XT_TICK
00014f 0a48          .dw XT_ICELLPLUS  ; to body
000150 3e98          .dw XT_STATE
000151 3873          .dw XT_FETCH
000152 3830          .dw XT_DOCONDBRANCH
000153 015e          .dw PFA_TO1
000154 06ed          .dw XT_COMPILE
000155 0158          .dw XT_DOTO
000156 06f8          .dw XT_COMMA
000157 381a          .dw XT_EXIT
                 
                 ; ( n -- ) (R: IP -- IP+1)
                 ; Tools
                 ; runtime portion of to
                 ;VE_DOTO:
                 ;    .dw $ff04
                 ;    .db "(to)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOTO
                 XT_DOTO:
000158 3800          .dw DO_COLON
                 PFA_DOTO:
000159 38f0          .dw XT_R_FROM
00015a 38ab          .dw XT_DUP
00015b 0a48          .dw XT_ICELLPLUS
00015c 38f9          .dw XT_TO_R
00015d 3bba          .dw XT_FETCHI
                 PFA_TO1:
00015e 38ab          .dw XT_DUP
00015f 0a48          .dw XT_ICELLPLUS
000160 0a48          .dw XT_ICELLPLUS
000161 3bba          .dw XT_FETCHI
000162 3824          .dw XT_EXECUTE
000163 381a          .dw XT_EXIT
                 .include "words/icompare.asm"
                 
                 ; Tools
                 ; compares string in RAM with string in flash. f is zero if equal like COMPARE
                 VE_ICOMPARE:
000164 ff08          .dw $ff08
000165 6369
000166 6d6f
000167 6170
000168 6572          .db "icompare"
000169 014a          .dw VE_HEAD
                     .set VE_HEAD = VE_ICOMPARE
                 XT_ICOMPARE:
00016a 3800          .dw DO_COLON
                 PFA_ICOMPARE:
00016b 38f9          .dw XT_TO_R    ; ( -- r-addr r-len f-addr)
00016c 38c9          .dw XT_OVER    ; ( -- r-addr r-len f-addr r-len)
00016d 38f0          .dw XT_R_FROM  ; ( -- r-addr r-len f-addr r-len f-len )
00016e 390d          .dw XT_NOTEQUAL ; ( -- r-addr r-len f-addr flag )
00016f 3830          .dw XT_DOCONDBRANCH
000170 0175          .dw PFA_ICOMPARE_SAMELEN
000171 3eb3            .dw XT_2DROP
000172 38d3            .dw XT_DROP
000173 3945            .dw XT_TRUE
000174 381a            .dw XT_EXIT
                 PFA_ICOMPARE_SAMELEN:
000175 38be          .dw XT_SWAP ; ( -- r-addr f-addr len )
000176 394e          .dw XT_ZERO
000177 07bd          .dw XT_QDOCHECK
000178 3830          .dw XT_DOCONDBRANCH
000179 019a          .dw PFA_ICOMPARE_DONE
00017a 3a89          .dw XT_DODO
                 PFA_ICOMPARE_LOOP:
                     ; ( r-addr f-addr --)
00017b 38c9          .dw XT_OVER
00017c 3873          .dw XT_FETCH
                 .if WANT_IGNORECASE == 1
00017d 019d          .dw XT_ICOMPARE_LC
                 .endif
00017e 38c9          .dw XT_OVER
00017f 3bba          .dw XT_FETCHI ; ( -- r-addr f-addr r-cc f- cc)
                 .if WANT_IGNORECASE == 1
000180 019d          .dw XT_ICOMPARE_LC
                 .endif
                     ; flash strings are zero-padded at the last cell
                     ; that means: if the flash cell is less $0100, than mask the
                     ; high byte in the ram cell
000181 38ab          .dw XT_DUP
                     ;.dw XT_BYTESWAP
000182 3837          .dw XT_DOLITERAL
000183 0100          .dw $100
000184 3956          .dw XT_ULESS
000185 3830          .dw XT_DOCONDBRANCH
000186 018b          .dw PFA_ICOMPARE_LASTCELL
000187 38be          .dw XT_SWAP
000188 3837          .dw XT_DOLITERAL
000189 00ff          .dw $00FF
00018a 3a0d          .dw XT_AND  ; the final swap can be omitted
                 PFA_ICOMPARE_LASTCELL:
00018b 390d          .dw XT_NOTEQUAL
00018c 3830          .dw XT_DOCONDBRANCH
00018d 0192          .dw PFA_ICOMPARE_NEXTLOOP
00018e 3eb3          .dw XT_2DROP
00018f 3945          .dw XT_TRUE
000190 3ac2          .dw XT_UNLOOP
000191 381a          .dw XT_EXIT
                 PFA_ICOMPARE_NEXTLOOP:
000192 3a29          .dw XT_1PLUS
000193 38be          .dw XT_SWAP
000194 3c82          .dw XT_CELLPLUS
000195 38be          .dw XT_SWAP
000196 3837          .dw XT_DOLITERAL
000197 0002          .dw 2
000198 3aa8          .dw XT_DOPLUSLOOP
000199 017b          .dw PFA_ICOMPARE_LOOP
                 PFA_ICOMPARE_DONE:
00019a 3eb3          .dw XT_2DROP
00019b 394e          .dw XT_ZERO
00019c 381a          .dw XT_EXIT
                 
                 .if WANT_IGNORECASE == 1
                 ; ( cc1 cc2 -- f) 
                 ; Tools
                 ; compares two packed characters 
                 ;VE_ICOMPARELC:
                 ;    .dw $ff08
                 ;    .db "icompare-lower"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_ICOMPARELC
                 XT_ICOMPARE_LC:
00019d 3800          .dw DO_COLON
                 PFA_ICOMPARE_LC:
00019e 38ab          .dw XT_DUP
00019f 3837          .dw XT_DOLITERAL
0001a0 00ff          .dw $00ff
0001a1 3a0d          .dw XT_AND
0001a2 3f61          .dw XT_TOLOWER
0001a3 38be          .dw XT_SWAP
0001a4 3ae7          .dw XT_BYTESWAP
0001a5 3837          .dw XT_DOLITERAL
0001a6 00ff          .dw $00ff
0001a7 3a0d          .dw XT_AND
0001a8 3f61          .dw XT_TOLOWER
0001a9 3ae7          .dw XT_BYTESWAP
0001aa 3a16          .dw XT_OR
0001ab 381a          .dw XT_EXIT
                 .endif
                 .include "words/star.asm"
                 
                 ; Arithmetics
                 ; multiply routine
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_STAR:
0001ac ff01          .dw $ff01
0001ad 002a          .db "*",0
0001ae 0164          .dw VE_HEAD
                     .set VE_HEAD = VE_STAR
                 XT_STAR:
0001af 3800          .dw DO_COLON
                 PFA_STAR:
                 .endif
                 
0001b0 39a0          .dw XT_MSTAR
0001b1 38d3          .dw XT_DROP
0001b2 381a          .dw XT_EXIT
                 .include "words/j.asm"
                 
                 ; Compiler
                 ; loop counter of outer loop
                 VE_J:
0001b3 ff01          .dw $FF01
0001b4 006a          .db "j",0
0001b5 01ac          .dw VE_HEAD
                     .set VE_HEAD = VE_J
                 XT_J:
0001b6 3800          .dw DO_COLON
                 PFA_J:
0001b7 3a64          .dw XT_RP_FETCH
0001b8 3837          .dw XT_DOLITERAL
0001b9 0007          .dw 7
0001ba 3997          .dw XT_PLUS
0001bb 3873          .dw XT_FETCH
0001bc 3a64          .dw XT_RP_FETCH
0001bd 3837          .dw XT_DOLITERAL
0001be 0009          .dw 9
0001bf 3997          .dw XT_PLUS
0001c0 3873          .dw XT_FETCH
0001c1 3997          .dw XT_PLUS
0001c2 381a          .dw XT_EXIT
                 .include "words/dabs.asm"
                 
                 ; Arithmetics
                 ; double cell absolute value
                 VE_DABS:
0001c3 ff04          .dw $ff04
0001c4 6164
0001c5 7362          .db "dabs"
0001c6 01b3          .dw VE_HEAD
                     .set VE_HEAD = VE_DABS
                 XT_DABS:
0001c7 3800          .dw DO_COLON
                 PFA_DABS:
0001c8 38ab          .dw XT_DUP
0001c9 391b          .dw XT_ZEROLESS
0001ca 3830          .dw XT_DOCONDBRANCH
0001cb 01cd          .dw PFA_DABS1
0001cc 01d4          .dw XT_DNEGATE
                 PFA_DABS1:
0001cd 381a          .dw XT_EXIT
                 ; : dabs      ( ud1 -- +d2 ) dup 0< if dnegate then ;
                 .include "words/dnegate.asm"
                 
                 ; Arithmetics
                 ; double cell negation
                 VE_DNEGATE:
0001ce ff07          .dw $ff07
0001cf 6e64
0001d0 6765
0001d1 7461
0001d2 0065          .db "dnegate",0
0001d3 01c3          .dw VE_HEAD
                     .set VE_HEAD = VE_DNEGATE
                 XT_DNEGATE:
0001d4 3800          .dw DO_COLON
                 PFA_DNEGATE:
0001d5 3c2a          .dw XT_DINVERT
0001d6 3837          .dw XT_DOLITERAL
0001d7 0001          .dw 1
0001d8 394e          .dw XT_ZERO
0001d9 3c04          .dw XT_DPLUS
0001da 381a          .dw XT_EXIT
                 ; : dnegate   ( ud1 -- ud2 ) dinvert 1. d+ ;
                 .include "words/cmove.asm"
                 
                 ; Memory
                 ; copy data in RAM, from lower to higher addresses
                 VE_CMOVE:
0001db ff05          .dw $ff05
0001dc 6d63
0001dd 766f
0001de 0065          .db "cmove",0
0001df 01ce          .dw VE_HEAD
                     .set VE_HEAD  = VE_CMOVE
                 XT_CMOVE:
0001e0 01e1          .dw PFA_CMOVE
                 PFA_CMOVE:
0001e1 93bf          push xh
0001e2 93af          push xl
0001e3 91e9          ld zl, Y+
0001e4 91f9          ld zh, Y+ ; addr-to
0001e5 91a9          ld xl, Y+
0001e6 91b9          ld xh, Y+ ; addr-from
0001e7 2f09          mov temp0, tosh
0001e8 2b08          or temp0, tosl
0001e9 f021          brbs 1, PFA_CMOVE1
                 PFA_CMOVE2:
0001ea 911d          ld temp1, X+
0001eb 9311          st Z+, temp1
0001ec 9701          sbiw tosl, 1
0001ed f7e1          brbc 1, PFA_CMOVE2
                 PFA_CMOVE1:
0001ee 91af          pop xl
0001ef 91bf          pop xh
0001f0 9189
0001f1 9199          loadtos
0001f2 940c 3804     jmp_ DO_NEXT
                 .include "words/2swap.asm"
                 
                 ; Stack
                 ; Exchange the two top cell pairs
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_2SWAP:
0001f4 ff05          .dw $ff05
0001f5 7332
0001f6 6177
0001f7 0070          .db "2swap",0
0001f8 01db          .dw VE_HEAD
                     .set VE_HEAD = VE_2SWAP
                 XT_2SWAP:
0001f9 3800          .dw DO_COLON
                 PFA_2SWAP:
                 
                 .endif
0001fa 38db          .dw XT_ROT
0001fb 38f9          .dw XT_TO_R
0001fc 38db          .dw XT_ROT
0001fd 38f0          .dw XT_R_FROM
0001fe 381a          .dw XT_EXIT
                 .include "words/tib.asm"
                 
                 ; System Variable
                 ; terminal input buffer address
                 VE_TIB:
0001ff ff03          .dw $ff03
000200 6974
000201 0062          .db "tib",0
000202 01f4          .dw VE_HEAD
                     .set VE_HEAD = VE_TIB
                 XT_TIB:
000203 3842          .dw PFA_DOVARIABLE
                 PFA_TIB:
000204 0117          .dw ram_tib
                     
                 .dseg
000117           ram_tib: .byte TIBSIZE
                 .cseg
                 ; ( -- f ) 
                 ; System
                 ; refills the input buffer
                 VE_REFILLTIB:
000205 ff0a          .dw $ff0a
000206 6572
000207 6966
000208 6c6c
000209 742d
00020a 6269          .db "refill-tib"
00020b 01ff          .dw VE_HEAD
                     .set VE_HEAD = VE_REFILLTIB
                 XT_REFILLTIB:
00020c 3800          .dw DO_COLON
                 PFA_REFILLTIB:
00020d 0203          .dw XT_TIB
00020e 3837          .dw XT_DOLITERAL
00020f 005a          .dw TIBSIZE
000210 042c          .dw XT_ACCEPT
000211 3ec9          .dw XT_NUMBERTIB
000212 387b          .dw XT_STORE
000213 394e          .dw XT_ZERO
000214 3ec3          .dw XT_TO_IN
000215 387b          .dw XT_STORE
000216 3945          .dw XT_TRUE ; -1
000217 381a          .dw XT_EXIT
                 
                 ; ( -- addr n ) 
                 ; System
                 ; address and current length of the input buffer
                 VE_SOURCETIB:
000218 ff0a          .dw $FF0A
000219 6f73
00021a 7275
00021b 6563
00021c 742d
00021d 6269          .db "source-tib"
00021e 0205          .dw VE_HEAD
                     .set VE_HEAD = VE_SOURCETIB
                 XT_SOURCETIB:
00021f 3800          .dw DO_COLON
                 PFA_SOURCETIB:
000220 0203          .dw XT_TIB
000221 3ec9          .dw XT_NUMBERTIB
000222 3873          .dw XT_FETCH
000223 381a          .dw XT_EXIT
                 .include "words/init-user.asm"
                 
                 ; Tools
                 ; copy len cells from eeprom to ram
                 VE_EE2RAM:
000224 ff06        .dw $ff06
000225 6565
000226 723e
000227 6d61        .db "ee>ram"
000228 0218        .dw VE_HEAD
                   .set VE_HEAD = VE_EE2RAM
                 XT_EE2RAM:
000229 3800        .dw DO_COLON
                 PFA_EE2RAM:          ; ( -- )
00022a 394e          .dw XT_ZERO
00022b 3a89          .dw XT_DODO
                 PFA_EE2RAM_1:
                     ; ( -- e-addr r-addr )
00022c 38c9          .dw XT_OVER
00022d 3b4d          .dw XT_FETCHE
00022e 38c9          .dw XT_OVER
00022f 387b          .dw XT_STORE
000230 3c82          .dw XT_CELLPLUS
000231 38be          .dw XT_SWAP
000232 3c82          .dw XT_CELLPLUS
000233 38be          .dw XT_SWAP
000234 3ab7          .dw XT_DOLOOP
000235 022c          .dw PFA_EE2RAM_1
                 PFA_EE2RAM_2:
000236 3eb3          .dw XT_2DROP
000237 381a          .dw XT_EXIT
                 
                 ; ( -- )
                 ; Tools
                 ; setup the default user area from eeprom
                 VE_INITUSER:
000238 ff09        .dw $ff09
000239 6e69
00023a 7469
00023b 752d
00023c 6573
00023d 0072        .db "init-user",0
00023e 0224        .dw VE_HEAD
                   .set VE_HEAD = VE_INITUSER
                 XT_INITUSER:
00023f 3800        .dw DO_COLON
                 PFA_INITUSER:          ; ( -- )
000240 3837          .dw XT_DOLITERAL
000241 006a          .dw EE_INITUSER
000242 3af0          .dw XT_UP_FETCH
000243 3837          .dw XT_DOLITERAL
000244 001c          .dw SYSUSERSIZE
000245 39fe          .dw XT_2SLASH
000246 0229          .dw XT_EE2RAM
000247 381a          .dw XT_EXIT
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
                 
                 .include "words/environment.asm"
                 
                 ; System Value
                 ; word list identifier of the environmental search list
                 VE_ENVIRONMENT:
000248 ff0b          .dw $ff0b
000249 6e65
00024a 6976
00024b 6f72
00024c 6d6e
00024d 6e65
00024e 0074          .db "environment",0
00024f 0238          .dw VE_HEAD
                     .set VE_HEAD = VE_ENVIRONMENT
                 XT_ENVIRONMENT:
000250 3842          .dw PFA_DOVARIABLE
                 PFA_ENVIRONMENT:
000251 0040          .dw EE_ENVIRONMENT
                 .include "words/env-wordlists.asm"
                 
                 ; Environment
                 ; maximum number of wordlists in the dictionary search order
                 VE_ENVWORDLISTS:
000252 ff09          .dw $ff09
000253 6f77
000254 6472
000255 696c
000256 7473
000257 0073          .db "wordlists",0
000258 0000          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENVWORDLISTS
                 XT_ENVWORDLISTS:
000259 3800          .dw DO_COLON
                 PFA_ENVWORDLISTS:
00025a 3837          .dw XT_DOLITERAL
00025b 0008          .dw NUMWORDLISTS
00025c 381a          .dw XT_EXIT
                 .include "words/env-slashpad.asm"
                 
                 ; Environment
                 ; Size of the PAD buffer in bytes
                 VE_ENVSLASHPAD:
00025d ff04          .dw $ff04
00025e 702f
00025f 6461          .db "/pad"
000260 0252          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENVSLASHPAD
                 XT_ENVSLASHPAD:
000261 3800          .dw DO_COLON
                 PFA_ENVSLASHPAD:
000262 3a7b          .dw XT_SP_FETCH
000263 3ecf          .dw XT_PAD
000264 398d          .dw XT_MINUS
000265 381a          .dw XT_EXIT
                 .include "words/env-slashhold.asm"
                 
                 ; Environment
                 ; size of the pictured numeric output buffer in bytes
                 VE_ENVSLASHHOLD:
000266 ff05          .dw $ff05
000267 682f
000268 6c6f
000269 0064          .db "/hold",0
00026a 025d          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENVSLASHHOLD
                 XT_ENVSLASHHOLD:
00026b 3800          .dw DO_COLON
                 PFA_ENVSLASHHOLD:
00026c 3ecf          .dw XT_PAD
00026d 3f0a          .dw XT_HERE
00026e 398d          .dw XT_MINUS
00026f 381a          .dw XT_EXIT
                 .include "words/env-forthname.asm"
                 
                 ; Environment
                 ; flash address of the amforth name string
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ENV_FORTHNAME:
000270 ff0a          .dw $ff0a
000271 6f66
000272 7472
000273 2d68
000274 616e
000275 656d          .db "forth-name"
000276 0266          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENV_FORTHNAME
                 XT_ENV_FORTHNAME:
000277 3800          .dw DO_COLON
                 PFA_EN_FORTHNAME:
000278 036d          .dw XT_DOSLITERAL
000279 0007          .dw 7
                 .endif
00027a 6d61
00027b 6f66
00027c 7472
../../common\words/env-forthname.asm(22): warning: .cseg .db misalignment - padding zero byte
00027d 0068          .db "amforth"
                 .if cpu_msp430==1
                 .endif
00027e 381a          .dw XT_EXIT
                 .include "words/env-forthversion.asm"
                 
                 ; Environment
                 ; version number of amforth
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ENV_FORTHVERSION:
00027f ff07          .dw $ff07
000280 6576
000281 7372
000282 6f69
000283 006e          .db "version",0
000284 0270          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENV_FORTHVERSION
                 XT_ENV_FORTHVERSION:
000285 3800          .dw DO_COLON
                 PFA_EN_FORTHVERSION:
                 .endif
000286 3837          .dw XT_DOLITERAL
000287 003a          .dw 58
000288 381a          .dw XT_EXIT
                 .include "words/env-cpu.asm"
                 
                 ; Environment
                 ; flash address of the CPU identification string
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ENV_CPU:
000289 ff03          .dw $ff03
00028a 7063
00028b 0075          .db "cpu",0
00028c 027f          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENV_CPU
                 XT_ENV_CPU:
00028d 3800          .dw DO_COLON
                 PFA_EN_CPU:
00028e 3837          .dw XT_DOLITERAL
00028f 0037          .dw mcu_name
000290 03cc          .dw XT_ICOUNT
                 .endif
000291 381a          .dw XT_EXIT
                 .include "words/env-mcuinfo.asm"
                 
                 ; Environment
                 ; flash address of some CPU specific parameters
                 VE_ENV_MCUINFO:
000292 ff08          .dw $ff08
000293 636d
000294 2d75
000295 6e69
000296 6f66          .db "mcu-info"
000297 0289          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENV_MCUINFO
                 XT_ENV_MCUINFO:
000298 3800          .dw DO_COLON
                 PFA_EN_MCUINFO:
000299 3837          .dw XT_DOLITERAL
00029a 0033          .dw mcu_info
00029b 381a          .dw XT_EXIT
                 .include "words/env-usersize.asm"
                 
                 ; Environment
                 ; size of the USER area in bytes
                 VE_ENVUSERSIZE:
00029c ff05          .dw $ff05
00029d 752f
00029e 6573
00029f 0072          .db "/user",0
0002a0 0292          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENVUSERSIZE
                 XT_ENVUSERSIZE:
0002a1 3800          .dw DO_COLON
                 PFA_ENVUSERSIZE:
0002a2 3837          .dw XT_DOLITERAL
0002a3 0026          .dw SYSUSERSIZE + APPUSERSIZE
0002a4 381a          .dw XT_EXIT
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/hld.asm"
                 
                 ; Numeric IO
                 ; pointer to current write position in the Pictured Numeric Output buffer
                 VE_HLD:
0002a5 ff03          .dw $ff03
0002a6 6c68
0002a7 0064          .db "hld",0
0002a8 0248          .dw VE_HEAD
                     .set VE_HEAD = VE_HLD
                 XT_HLD:
0002a9 3842          .dw PFA_DOVARIABLE
                 PFA_HLD:
0002aa 0171          .dw ram_hld
                 
                 .dseg
000171           ram_hld: .byte 2
                 .cseg
                 .include "words/hold.asm"
                 
                 ; Numeric IO
                 ; prepend character to pictured numeric output buffer
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_HOLD:
0002ab ff04          .dw $ff04
0002ac 6f68
0002ad 646c          .db "hold"
0002ae 02a5          .dw VE_HEAD
                     .set VE_HEAD = VE_HOLD
                 XT_HOLD:
0002af 3800          .dw DO_COLON
                 PFA_HOLD:
                 .endif
0002b0 02a9          .dw XT_HLD
0002b1 38ab          .dw XT_DUP
0002b2 3873          .dw XT_FETCH
0002b3 3a2f          .dw XT_1MINUS
0002b4 38ab          .dw XT_DUP
0002b5 38f9          .dw XT_TO_R
0002b6 38be          .dw XT_SWAP
0002b7 387b          .dw XT_STORE
0002b8 38f0          .dw XT_R_FROM
0002b9 3887          .dw XT_CSTORE
0002ba 381a          .dw XT_EXIT
                 .include "words/less-sharp.asm" ; <#
                 
                 ; Numeric IO
                 ; initialize the pictured numeric output conversion process
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_L_SHARP:
0002bb ff02          .dw $ff02
0002bc 233c          .db "<#"
0002bd 02ab          .dw VE_HEAD
                     .set VE_HEAD = VE_L_SHARP
                 XT_L_SHARP:
0002be 3800          .dw DO_COLON
                 PFA_L_SHARP:
                 .endif
0002bf 3ecf          .dw XT_PAD
0002c0 02a9          .dw XT_HLD
0002c1 387b          .dw XT_STORE
0002c2 381a          .dw XT_EXIT
                 .include "words/sharp.asm"
                 
                 ; Numeric IO
                 ; pictured numeric output: convert one digit
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_SHARP:
0002c3 ff01          .dw $ff01
0002c4 0023          .db "#",0
0002c5 02bb          .dw VE_HEAD
                     .set VE_HEAD = VE_SHARP
                 XT_SHARP:
0002c6 3800          .dw DO_COLON
                 PFA_SHARP:
                 .endif
0002c7 3e9e          .dw XT_BASE
0002c8 3873          .dw XT_FETCH
0002c9 0343          .dw XT_UDSLASHMOD
0002ca 38db          .dw XT_ROT
0002cb 3837          .dw XT_DOLITERAL
0002cc 0009          .dw 9
0002cd 38c9          .dw XT_OVER
0002ce 3968          .dw XT_LESS
0002cf 3830          .dw XT_DOCONDBRANCH
0002d0 02d4          DEST(PFA_SHARP1)
0002d1 3837          .dw XT_DOLITERAL
0002d2 0007          .dw 7
0002d3 3997          .dw XT_PLUS
                 PFA_SHARP1:
0002d4 3837          .dw XT_DOLITERAL
0002d5 0030          .dw 48 ; ASCII 0
0002d6 3997          .dw XT_PLUS
0002d7 02af          .dw XT_HOLD
0002d8 381a          .dw XT_EXIT
                 ; : #    ( ud1 -- ud2 ) 
                 ;        base @ ud/mod rot 9 over < if 7 + then 30 + hold ; 
                 .include "words/sharp-s.asm"
                 
                 ; Numeric IO
                 ; pictured numeric output: convert all digits until 0 (zero) is reached
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SHARP_S:
0002d9 ff02          .dw $ff02
0002da 7323          .db "#s"
0002db 02c3          .dw VE_HEAD
                     .set VE_HEAD = VE_SHARP_S
                 XT_SHARP_S:
0002dc 3800          .dw DO_COLON
                 PFA_SHARP_S:
                 .endif
                 NUMS1:
0002dd 02c6          .dw XT_SHARP
0002de 3eaa          .dw XT_2DUP
0002df 3a16          .dw XT_OR
0002e0 3914          .dw XT_ZEROEQUAL
0002e1 3830          .dw XT_DOCONDBRANCH
0002e2 02dd          DEST(NUMS1) ; PFA_SHARP_S
0002e3 381a          .dw XT_EXIT
                 .include "words/sharp-greater.asm" ; #>
                 
                 ; Numeric IO
                 ; Pictured Numeric Output: convert PNO buffer into an string
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SHARP_G:
0002e4 ff02          .dw $ff02
0002e5 3e23          .db "#>"
0002e6 02d9          .dw VE_HEAD
                     .set VE_HEAD = VE_SHARP_G
                 XT_SHARP_G:
0002e7 3800          .dw DO_COLON
                 PFA_SHARP_G:
                 .endif
0002e8 3eb3          .dw XT_2DROP
0002e9 02a9          .dw XT_HLD
0002ea 3873          .dw XT_FETCH
0002eb 3ecf          .dw XT_PAD
0002ec 38c9          .dw XT_OVER
0002ed 398d          .dw XT_MINUS
0002ee 381a          .dw XT_EXIT
                 .include "words/sign.asm"
                 
                 ; Numeric IO
                 ; place a - in HLD if n is negative
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SIGN:
0002ef ff04          .dw $ff04
0002f0 6973
0002f1 6e67          .db "sign"
0002f2 02e4          .dw VE_HEAD
                     .set VE_HEAD = VE_SIGN
                 XT_SIGN:
0002f3 3800          .dw DO_COLON
                 PFA_SIGN:
                 .endif
0002f4 391b          .dw XT_ZEROLESS
0002f5 3830          .dw XT_DOCONDBRANCH
0002f6 02fa          DEST(PFA_SIGN1)
0002f7 3837          .dw XT_DOLITERAL
0002f8 002d          .dw 45 ; ascii -
0002f9 02af          .dw XT_HOLD
                 PFA_SIGN1:
0002fa 381a          .dw XT_EXIT
                 .include "words/d-dot-r.asm"
                 
                 ; Numeric IO
                 ; singed PNO with double cell numbers, right aligned in width w
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DDOTR:
0002fb ff03          .dw $ff03
0002fc 2e64
0002fd 0072          .db "d.r",0
0002fe 02ef          .dw VE_HEAD
                     .set VE_HEAD = VE_DDOTR
                 XT_DDOTR:
0002ff 3800          .dw DO_COLON
                 PFA_DDOTR:
                 
                 .endif
000300 38f9          .dw XT_TO_R
000301 3ebb          .dw XT_TUCK
000302 01c7          .dw XT_DABS
000303 02be          .dw XT_L_SHARP
000304 02dc          .dw XT_SHARP_S
000305 38db          .dw XT_ROT
000306 02f3          .dw XT_SIGN
000307 02e7          .dw XT_SHARP_G
000308 38f0          .dw XT_R_FROM
000309 38c9          .dw XT_OVER
00030a 398d          .dw XT_MINUS
00030b 3f9f          .dw XT_SPACES
00030c 03d6          .dw XT_TYPE
00030d 381a          .dw XT_EXIT
                 ; : d.r       ( d n -- )
                 ;             >r swap over dabs <# #s rot sign #> r> over - spaces type ;
                 .include "words/dot-r.asm"
                 
                 ; Numeric IO
                 ; singed PNO with single cell numbers, right aligned in width w
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DOTR:
00030e ff02          .dw $ff02
00030f 722e          .db ".r"
000310 02fb          .dw VE_HEAD
                     .set VE_HEAD = VE_DOTR
                 XT_DOTR:
000311 3800          .dw DO_COLON
                 PFA_DOTR:
                 
                 .endif
000312 38f9          .dw XT_TO_R
000313 3faf          .dw XT_S2D
000314 38f0          .dw XT_R_FROM
000315 02ff          .dw XT_DDOTR
000316 381a          .dw XT_EXIT
                 ; : .r        ( s n -- )  >r s>d r> d.r ;
                 .include "words/d-dot.asm"
                 
                 ; Numeric IO
                 ; singed PNO with double cell numbers
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DDOT:
000317 ff02          .dw $ff02
000318 2e64          .db "d."
000319 030e          .dw VE_HEAD
                     .set VE_HEAD = VE_DDOT
                 XT_DDOT:
00031a 3800          .dw DO_COLON
                 PFA_DDOT:
                 
                 .endif
00031b 394e          .dw XT_ZERO
00031c 02ff          .dw XT_DDOTR
00031d 3f96          .dw XT_SPACE
00031e 381a          .dw XT_EXIT
                 ; : d.        ( d -- )    0 d.r space ;
                 .include "words/dot.asm"
                 
                 ; Numeric IO
                 ; singed PNO with single cell numbers
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_DOT:
00031f ff01          .dw $ff01
000320 002e          .db ".",0
000321 0317          .dw VE_HEAD
                     .set VE_HEAD = VE_DOT
                 XT_DOT:
000322 3800          .dw DO_COLON
                 PFA_DOT:
                 .endif
000323 3faf          .dw XT_S2D
000324 031a          .dw XT_DDOT
000325 381a          .dw XT_EXIT
                 ; : .         ( s -- )    s>d d. ; 
                 .include "words/ud-dot.asm"
                 
                 ; Numeric IO
                 ; unsigned PNO with double cell numbers
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UDDOT:
000326 ff03          .dw $ff03
000327 6475
000328 002e          .db "ud.",0
000329 031f          .dw VE_HEAD
                     .set VE_HEAD = VE_UDDOT
                 XT_UDDOT:
00032a 3800          .dw DO_COLON
                 PFA_UDDOT:
                 .endif
00032b 394e          .dw XT_ZERO
00032c 0333          .dw XT_UDDOTR
00032d 3f96          .dw XT_SPACE
00032e 381a          .dw XT_EXIT
                 .include "words/ud-dot-r.asm"
                 
                 ; Numeric IO
                 ; unsigned PNO with double cell numbers, right aligned in width w
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_UDDOTR:
00032f ff04          .dw $ff04
000330 6475
000331 722e          .db "ud.r"
000332 0326          .dw VE_HEAD
                     .set VE_HEAD = VE_UDDOTR
                 XT_UDDOTR:
000333 3800          .dw DO_COLON
                 PFA_UDDOTR:
                 .endif
000334 38f9          .dw XT_TO_R
000335 02be          .dw XT_L_SHARP
000336 02dc          .dw XT_SHARP_S
000337 02e7          .dw XT_SHARP_G
000338 38f0          .dw XT_R_FROM
000339 38c9          .dw XT_OVER
00033a 398d          .dw XT_MINUS
00033b 3f9f          .dw XT_SPACES
00033c 03d6          .dw XT_TYPE
00033d 381a          .dw XT_EXIT
                 .include "words/ud-slash-mod.asm"
                 
                 ; Arithmetics
                 ; unsigned double cell division with remainder
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UDSLASHMOD:
00033e ff06          .dw $ff06
00033f 6475
000340 6d2f
000341 646f          .db "ud/mod"
000342 032f          .dw VE_HEAD
                     .set VE_HEAD = VE_UDSLASHMOD
                 XT_UDSLASHMOD:
000343 3800          .dw DO_COLON
                 PFA_UDSLASHMOD:
                 .endif
000344 38f9          .dw XT_TO_R
000345 394e          .dw XT_ZERO
000346 3902          .dw XT_R_FETCH
000347 39bc          .dw XT_UMSLASHMOD
000348 38f0          .dw XT_R_FROM
000349 38be          .dw XT_SWAP
00034a 38f9          .dw XT_TO_R
00034b 39bc          .dw XT_UMSLASHMOD
00034c 38f0          .dw XT_R_FROM
00034d 381a          .dw XT_EXIT
                 .include "words/digit-q.asm"
                 
                 ; Numeric IO
                 ; tries to convert a character to a number, set flag accordingly
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DIGITQ:
00034e ff06          .dw $ff06 
00034f 6964
000350 6967
000351 3f74          .db "digit?"
000352 033e          .dw VE_HEAD
                     .set VE_HEAD = VE_DIGITQ
                 XT_DIGITQ:
000353 3800          .dw DO_COLON 
                 PFA_DIGITQ:
                 .endif
000354 3f4e          .dw XT_TOUPPER
000355 38ab
000356 3837
000357 0039
000358 3972
000359 3837
00035a 0100          .DW XT_DUP,XT_DOLITERAL,57,XT_GREATER,XT_DOLITERAL,256
00035b 3a0d
00035c 3997
00035d 38ab
00035e 3837
00035f 0140
000360 3972          .DW XT_AND,XT_PLUS,XT_DUP,XT_DOLITERAL,320,XT_GREATER
000361 3837
000362 0107
000363 3a0d
000364 398d
000365 3837
000366 0030          .DW XT_DOLITERAL,263,XT_AND,XT_MINUS,XT_DOLITERAL,48
000367 398d
000368 38ab
000369 3e9e
00036a 3873
00036b 3956          .DW XT_MINUS,XT_DUP,XT_BASE,XT_FETCH,XT_ULESS
00036c 381a          .DW XT_EXIT
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/do-sliteral.asm"
                 
                 ; String
                 ; runtime portion of sliteral
                 ;VE_DOSLITERAL:
                 ;  .dw $ff0a
                 ;  .db "(sliteral)"
                 ;  .dw VE_HEAD
                 ;  .set VE_HEAD = VE_DOSLITERAL
                 XT_DOSLITERAL:
00036d 3800        .dw DO_COLON
                 PFA_DOSLITERAL:
00036e 3902        .dw XT_R_FETCH   ; ( -- addr )
00036f 03cc        .dw XT_ICOUNT
000370 38f0        .dw XT_R_FROM
000371 38c9        .dw XT_OVER     ; ( -- addr' n addr n)
000372 3a29        .dw XT_1PLUS
000373 39fe        .dw XT_2SLASH   ; ( -- addr' n addr k )
000374 3997        .dw XT_PLUS     ; ( -- addr' n addr'' )
000375 3a29        .dw XT_1PLUS
000376 38f9        .dw XT_TO_R     ; ( -- )
000377 381a        .dw XT_EXIT
                 .include "words/scomma.asm"
                 
                 ; Compiler
                 ; compiles a string from RAM to Flash
                 VE_SCOMMA:
000378 ff02        .dw $ff02
000379 2c73        .db "s",$2c
00037a 034e        .dw VE_HEAD
                   .set VE_HEAD = VE_SCOMMA
                 XT_SCOMMA:
00037b 3800          .dw DO_COLON
                 PFA_SCOMMA:
00037c 38ab          .dw XT_DUP
00037d 037f          .dw XT_DOSCOMMA
00037e 381a          .dw XT_EXIT
                 
                 ; ( addr len len' -- ) 
                 ; Compiler
                 ; compiles a string from RAM to Flash
                 ;VE_DOSCOMMA:
                 ;  .dw $ff04
                 ;  .db "(s",$2c,")"
                 ;  .dw VE_HEAD
                 ;  .set VE_HEAD = VE_DOSCOMMA
                 XT_DOSCOMMA:
00037f 3800          .dw DO_COLON
                 PFA_DOSCOMMA:
000380 06f8          .dw XT_COMMA
000381 38ab          .dw XT_DUP   ; ( --addr len len)
000382 39fe          .dw XT_2SLASH ; ( -- addr len len/2
000383 3ebb          .dw XT_TUCK   ; ( -- addr len/2 len len/2
000384 3a05          .dw XT_2STAR  ; ( -- addr len/2 len len'
000385 398d          .dw XT_MINUS  ; ( -- addr len/2 rem
000386 38f9          .dw XT_TO_R
000387 394e          .dw XT_ZERO
000388 07bd          .dw XT_QDOCHECK
000389 3830          .dw XT_DOCONDBRANCH
00038a 0392          .dw PFA_SCOMMA2
00038b 3a89          .dw XT_DODO
                 PFA_SCOMMA1:
00038c 38ab          .dw XT_DUP         ; ( -- addr addr )
00038d 3873          .dw XT_FETCH       ; ( -- addr c1c2 )
00038e 06f8          .dw XT_COMMA       ; ( -- addr )
00038f 3c82          .dw XT_CELLPLUS    ; ( -- addr+cell )
000390 3ab7          .dw XT_DOLOOP
000391 038c          .dw PFA_SCOMMA1
                 PFA_SCOMMA2:
000392 38f0          .dw XT_R_FROM
000393 3922          .dw XT_GREATERZERO
000394 3830          .dw XT_DOCONDBRANCH
000395 0399          .dw PFA_SCOMMA3
000396 38ab            .dw XT_DUP     ; well, tricky
000397 3892            .dw XT_CFETCH
000398 06f8            .dw XT_COMMA
                 PFA_SCOMMA3:
000399 38d3          .dw XT_DROP        ; ( -- )
00039a 381a          .dw XT_EXIT
                 .include "words/itype.asm"
                 
                 ; Tools
                 ; reads string from flash and prints it
                 VE_ITYPE:
00039b ff05          .dw $ff05
00039c 7469
00039d 7079
00039e 0065          .db "itype",0
00039f 0378          .dw VE_HEAD
                     .set VE_HEAD = VE_ITYPE
                 XT_ITYPE:
0003a0 3800          .dw DO_COLON
                 PFA_ITYPE:
0003a1 38ab          .dw XT_DUP    ; ( --addr len len)
0003a2 39fe          .dw XT_2SLASH ; ( -- addr len len/2
0003a3 3ebb          .dw XT_TUCK   ; ( -- addr len/2 len len/2
0003a4 3a05          .dw XT_2STAR  ; ( -- addr len/2 len len'
0003a5 398d          .dw XT_MINUS  ; ( -- addr len/2 rem
0003a6 38f9          .dw XT_TO_R
0003a7 394e          .dw XT_ZERO
0003a8 07bd          .dw XT_QDOCHECK
0003a9 3830          .dw XT_DOCONDBRANCH
0003aa 03b4          .dw PFA_ITYPE2
0003ab 3a89          .dw XT_DODO
                 PFA_ITYPE1:
0003ac 38ab          .dw XT_DUP         ; ( -- addr addr )
0003ad 3bba          .dw XT_FETCHI      ; ( -- addr c1c2 )
0003ae 38ab          .dw XT_DUP
0003af 03c1          .dw XT_LOWEMIT
0003b0 03bd          .dw XT_HIEMIT
0003b1 3a29          .dw XT_1PLUS    ; ( -- addr+cell )
0003b2 3ab7          .dw XT_DOLOOP
0003b3 03ac          .dw PFA_ITYPE1
                 PFA_ITYPE2:
0003b4 38f0          .dw XT_R_FROM
0003b5 3922          .dw XT_GREATERZERO
0003b6 3830          .dw XT_DOCONDBRANCH
0003b7 03bb          .dw PFA_ITYPE3
0003b8 38ab            .dw XT_DUP     ; make sure the drop below has always something to do
0003b9 3bba            .dw XT_FETCHI
0003ba 03c1            .dw XT_LOWEMIT
                 PFA_ITYPE3:
0003bb 38d3          .dw XT_DROP
0003bc 381a          .dw XT_EXIT
                 
                 ; ( w -- )
                 ; R( -- )
                 ; content of cell fetched on stack.
                 ;VE_HIEMIT:
                 ;    .dw $ff06
                 ;    .db "hiemit"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_HIEMIT
                 XT_HIEMIT:
0003bd 3800          .dw DO_COLON
                 PFA_HIEMIT:
0003be 3ae7          .dw XT_BYTESWAP
0003bf 03c1          .dw XT_LOWEMIT
0003c0 381a          .dw XT_EXIT
                 
                 ; ( w -- )
                 ; R( -- )
                 ; content of cell fetched on stack.
                 ;VE_LOWEMIT:
                 ;    .dw $ff07
                 ;    .db "lowemit"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_LOWEMIT
                 XT_LOWEMIT:
0003c1 3800          .dw DO_COLON
                 PFA_LOWEMIT:
0003c2 3837          .dw XT_DOLITERAL
0003c3 00ff          .dw $00ff
0003c4 3a0d          .dw XT_AND
0003c5 3ed9          .dw XT_EMIT
0003c6 381a          .dw XT_EXIT
                 .include "words/icount.asm"
                 
                 ; Tools
                 ; get count information out of a counted string in flash
                 VE_ICOUNT:
0003c7 ff06          .dw $ff06
0003c8 6369
0003c9 756f
0003ca 746e          .db "icount"
0003cb 039b          .dw VE_HEAD
                     .set VE_HEAD = VE_ICOUNT
                 XT_ICOUNT:
0003cc 3800          .dw DO_COLON
                 PFA_ICOUNT:
0003cd 38ab          .dw XT_DUP
0003ce 3a29          .dw XT_1PLUS
0003cf 38be          .dw XT_SWAP
0003d0 3bba          .dw XT_FETCHI
0003d1 381a          .dw XT_EXIT
                 .include "words/type.asm"
                 
                 ; Character IO
                 ; print a RAM based string
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TYPE:
0003d2 ff04          .dw $ff04
0003d3 7974
0003d4 6570          .db "type"
0003d5 03c7          .dw VE_HEAD
                     .set VE_HEAD = VE_TYPE
                 XT_TYPE:
0003d6 3800          .dw DO_COLON
                 PFA_TYPE:
                 
                 .endif
0003d7 3f81          .dw XT_BOUNDS
0003d8 07bd          .dw XT_QDOCHECK
0003d9 3830          .dw XT_DOCONDBRANCH
0003da 03e1          DEST(PFA_TYPE2)
0003db 3a89          .dw XT_DODO
                 PFA_TYPE1:
0003dc 3a9a          .dw XT_I
0003dd 3892          .dw XT_CFETCH
0003de 3ed9          .dw XT_EMIT
0003df 3ab7          .dw XT_DOLOOP
0003e0 03dc          DEST(PFA_TYPE1)
                 PFA_TYPE2:
0003e1 381a          .dw XT_EXIT
                 .include "words/tick.asm"
                 
                 ; Dictionary
                 ; search dictionary for name, return XT or throw an exception -13
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TICK:
0003e2 ff01          .dw $ff01
0003e3 0027          .db "'",0
0003e4 03d2          .dw VE_HEAD
                     .set VE_HEAD = VE_TICK
                 XT_TICK:
0003e5 3800          .dw DO_COLON
                 PFA_TICK:
                 .endif
0003e6 054f          .dw XT_PARSENAME
0003e7 06a7          .dw XT_FINDNAME
0003e8 3914          .dw XT_ZEROEQUAL
0003e9 3830          .dw XT_DOCONDBRANCH
0003ea 03ee          DEST(PFA_TICK1)
0003eb 3837          .dw XT_DOLITERAL
0003ec fff3          .dw -13
0003ed 3d60          .dw XT_THROW
                 PFA_TICK1:
0003ee 381a          .dw XT_EXIT
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/cskip.asm"
                 
                 ; String
                 ; skips leading occurancies in string at addr1/n1 leaving addr2/n2 pointing to the 1st non-c character
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_CSKIP:
0003ef ff05          .dw $ff05
0003f0 7363
0003f1 696b
0003f2 0070          .db "cskip",0
0003f3 03e2          .dw VE_HEAD
                     .set VE_HEAD = VE_CSKIP
                 XT_CSKIP:
0003f4 3800          .dw DO_COLON
                 PFA_CSKIP:
                 .endif
0003f5 38f9          .dw XT_TO_R           ; ( -- addr1 n1 )
                 PFA_CSKIP1:
0003f6 38ab          .dw XT_DUP            ; ( -- addr' n' n' )
0003f7 3830          .dw XT_DOCONDBRANCH   ; ( -- addr' n')
0003f8 0404          DEST(PFA_CSKIP2)
0003f9 38c9          .dw XT_OVER           ; ( -- addr' n' addr' )
0003fa 3892          .dw XT_CFETCH         ; ( -- addr' n' c' )
0003fb 3902          .dw XT_R_FETCH        ; ( -- addr' n' c' c )
0003fc 3fc5          .dw XT_EQUAL          ; ( -- addr' n' f )
0003fd 3830          .dw XT_DOCONDBRANCH   ; ( -- addr' n')
0003fe 0404          DEST(PFA_CSKIP2)
0003ff 3837          .dw XT_DOLITERAL
000400 0001          .dw 1
000401 0540          .dw XT_SLASHSTRING
000402 3829          .dw XT_DOBRANCH
000403 03f6          DEST(PFA_CSKIP1)
                 PFA_CSKIP2:
000404 38f0          .dw XT_R_FROM
000405 38d3          .dw XT_DROP           ; ( -- addr2 n2)
000406 381a          .dw XT_EXIT
                 .include "words/cscan.asm"
                 
                 ; String
                 ; Scan string at addr1/n1 for the first occurance of c, leaving addr1/n2, char at n2 is first non-c character
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_CSCAN:
000407 ff05          .dw $ff05
000408 7363
000409 6163
../../common\words/cscan.asm(12): warning: .cseg .db misalignment - padding zero byte
00040a 006e          .db "cscan"
00040b 03ef          .dw VE_HEAD
                     .set VE_HEAD = VE_CSCAN
                 XT_CSCAN:
00040c 3800          .dw DO_COLON
                 PFA_CSCAN:
                 .endif
00040d 38f9          .dw XT_TO_R
00040e 38c9          .dw XT_OVER
                 PFA_CSCAN1:
00040f 38ab          .dw XT_DUP
000410 3892          .dw XT_CFETCH
000411 3902          .dw XT_R_FETCH
000412 3fc5          .dw XT_EQUAL
000413 3914          .dw XT_ZEROEQUAL
000414 3830          .dw XT_DOCONDBRANCH
000415 0421          DEST(PFA_CSCAN2)
000416 38be            .dw XT_SWAP
000417 3a2f            .dw XT_1MINUS
000418 38be            .dw XT_SWAP
000419 38c9            .dw XT_OVER
00041a 391b            .dw XT_ZEROLESS ; not negative
00041b 3914            .dw XT_ZEROEQUAL
00041c 3830            .dw XT_DOCONDBRANCH
00041d 0421            DEST(PFA_CSCAN2)
00041e 3a29              .dw XT_1PLUS
00041f 3829              .dw XT_DOBRANCH
000420 040f              DEST(PFA_CSCAN1)
                 PFA_CSCAN2:
000421 38ea          .dw XT_NIP
000422 38c9          .dw XT_OVER
000423 398d          .dw XT_MINUS
000424 38f0          .dw XT_R_FROM
000425 38d3          .dw XT_DROP
000426 381a          .dw XT_EXIT
                 
                 ; : my-cscan ( addr len c -- addr len' )
                 ;    >r over ( -- addr len addr )
                 ;    begin
                 ;      dup c@ r@ <> while
                 ;       swap 1- swap over 0 >=  while
                 ;        1+ 
                 ;     repeat then
                 ;     nip over - r> drop 
                 ; ;
                 .include "words/accept.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ACCEPT:
000427 ff06          .dw $ff06
000428 6361
000429 6563
00042a 7470          .db "accept"
00042b 0407          .dw VE_HEAD
                     .set VE_HEAD = VE_ACCEPT
                 XT_ACCEPT:
00042c 3800          .dw DO_COLON
                 PFA_ACCEPT:
                 
                 .endif
00042d 38c9
00042e 3997
00042f 3a2f
000430 38c9              .DW XT_OVER,XT_PLUS,XT_1MINUS,XT_OVER
000431 3eea
000432 38ab
000433 0466
000434 3914
000435 3830      ACC1:   .DW XT_KEY,XT_DUP,XT_CRLFQ,XT_ZEROEQUAL,XT_DOCONDBRANCH
000436 0458              DEST(ACC5)
000437 38ab
000438 3837
000439 0008
00043a 3fc5
00043b 3830              .DW XT_DUP,XT_DOLITERAL,8,XT_EQUAL,XT_DOCONDBRANCH
00043c 044f              DEST(ACC3)
00043d 38d3
00043e 38db
00043f 3eaa
000440 3972
000441 38f9
000442 38db
000443 38db
000444 38f0
000445 3830              .DW XT_DROP,XT_ROT,XT_2DUP,XT_GREATER,XT_TO_R,XT_ROT,XT_ROT,XT_R_FROM,XT_DOCONDBRANCH
000446 044d      	DEST(ACC6)
000447 045e
000448 3a2f
000449 38f9
00044a 38c9
00044b 38f0
00044c 00f1      	.DW XT_BS,XT_1MINUS,XT_TO_R,XT_OVER,XT_R_FROM,XT_UMAX
                 ACC6:
00044d 3829              .DW XT_DOBRANCH
00044e 0456              DEST(ACC4)
00044f 38ab
000450 3ed9
000451 38c9
000452 3887
000453 3a29
000454 38c9
000455 00fd      ACC3:   .DW XT_DUP,XT_EMIT,XT_OVER,XT_CSTORE,XT_1PLUS,XT_OVER,XT_UMIN
000456 3829      ACC4:   .DW XT_DOBRANCH
000457 0431              DEST(ACC1)
000458 38d3
000459 38ea
00045a 38be
00045b 398d
00045c 3f89
00045d 381a      ACC5:   .DW XT_DROP,XT_NIP,XT_SWAP,XT_MINUS,XT_CR,XT_EXIT
                 
                 
                 ; ( --  ) 
                 ; System
                 ; send a backspace character to overwrite the current char
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 ;VE_BS:
                 ;    .dw $ff02
                 ;    .db "bs"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_BS
                 XT_BS:
00045e 3800          .dw DO_COLON
                 .endif
00045f 3837          .dw XT_DOLITERAL
000460 0008          .dw 8
000461 38ab          .dw XT_DUP
000462 3ed9          .dw XT_EMIT
000463 3f96          .dw XT_SPACE
000464 3ed9          .dw XT_EMIT
000465 381a          .dw XT_EXIT
                 
                 
                 ; ( c -- f ) 
                 ; System
                 ; is the character a line end character?
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 ;VE_CRLFQ:
                 ;    .dw $ff02
                 ;    .db "crlf?"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_CRLFQ
                 XT_CRLFQ:
000466 3800          .dw DO_COLON
                 .endif
000467 38ab          .dw XT_DUP
000468 3837          .dw XT_DOLITERAL
000469 000d          .dw 13
00046a 3fc5          .dw XT_EQUAL
00046b 38be          .dw XT_SWAP
00046c 3837          .dw XT_DOLITERAL
00046d 000a          .dw 10
00046e 3fc5          .dw XT_EQUAL
00046f 3a16          .dw XT_OR
000470 381a          .dw XT_EXIT
                 .include "words/refill.asm"
                 
                 ; System
                 ; refills the input buffer
                 VE_REFILL:
000471 ff06          .dw $ff06
000472 6572
000473 6966
000474 6c6c          .db "refill"
000475 0427          .dw VE_HEAD
                     .set VE_HEAD = VE_REFILL
                 XT_REFILL:
000476 3dd8          .dw PFA_DODEFER1
                 PFA_REFILL:
000477 001a          .dw USER_REFILL
000478 3da2          .dw XT_UDEFERFETCH
000479 3dae          .dw XT_UDEFERSTORE
                 
                 .include "words/char.asm"
                 
                 ; Tools
                 ; copy the first character of the next word onto the stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_CHAR:
00047a ff04          .dw $ff04
00047b 6863
00047c 7261          .db "char"
00047d 0471          .dw VE_HEAD
                     .set VE_HEAD = VE_CHAR
                 XT_CHAR:
00047e 3800          .dw DO_COLON
                 PFA_CHAR:
                 .endif
00047f 054f          .dw XT_PARSENAME
000480 38d3          .dw XT_DROP
000481 3892          .dw XT_CFETCH
000482 381a          .dw XT_EXIT
                 .include "words/number.asm"
                 
                 ; Numeric IO
                 ; convert a string at addr to a number
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_NUMBER:
000483 ff06          .dw $ff06
000484 756e
000485 626d
000486 7265          .db "number"
000487 047a          .dw VE_HEAD
                     .set VE_HEAD = VE_NUMBER
                 XT_NUMBER:
000488 3800          .dw DO_COLON
                 PFA_NUMBER:
                 .endif
000489 3e9e          .dw XT_BASE
00048a 3873          .dw XT_FETCH
00048b 38f9          .dw XT_TO_R
00048c 04cf          .dw XT_QSIGN
00048d 38f9          .dw XT_TO_R
00048e 04e3          .dw XT_SET_BASE
00048f 04cf          .dw XT_QSIGN
000490 38f0          .dw XT_R_FROM
000491 3a16          .dw XT_OR
000492 38f9          .dw XT_TO_R
                     ; check whether something is left
000493 38ab          .dw XT_DUP
000494 3914          .dw XT_ZEROEQUAL
000495 3830          .dw XT_DOCONDBRANCH
000496 049f          DEST(PFA_NUMBER0)
                       ; nothing is left. It cannot be a number at all
000497 3eb3            .dw XT_2DROP
000498 38f0            .dw XT_R_FROM
000499 38d3            .dw XT_DROP
00049a 38f0            .dw XT_R_FROM
00049b 3e9e            .dw XT_BASE
00049c 387b            .dw XT_STORE
00049d 394e            .dw XT_ZERO
00049e 381a            .dw XT_EXIT
                 PFA_NUMBER0:
00049f 3b0c          .dw XT_2TO_R
0004a0 394e          .dw XT_ZERO       ; starting value
0004a1 394e          .dw XT_ZERO
0004a2 3b1b          .dw XT_2R_FROM
0004a3 0502          .dw XT_TO_NUMBER ; ( 0. addr len -- d addr' len'
                     ; check length of the remaining string.
                     ; if zero: a single cell number is entered
0004a4 38b3          .dw XT_QDUP
0004a5 3830          .dw XT_DOCONDBRANCH
0004a6 04c3          DEST(PFA_NUMBER1)
                     ; if equal 1: mayba a trailing dot? --> double cell number
0004a7 3837          .dw XT_DOLITERAL
0004a8 0001          .dw 1
0004a9 3fc5          .dw XT_EQUAL
0004aa 3830          .dw XT_DOCONDBRANCH
0004ab 04ba          DEST(PFA_NUMBER2)
                 	; excatly one character is left
0004ac 3892      	.dw XT_CFETCH
0004ad 3837      	.dw XT_DOLITERAL
0004ae 002e      	.dw 46 ; .
0004af 3fc5      	.dw XT_EQUAL
0004b0 3830      	.dw XT_DOCONDBRANCH
0004b1 04bb      	DEST(PFA_NUMBER6)
                 	; its a double cell number
                         ; incorporate sign into number
0004b2 38f0      	.dw XT_R_FROM
0004b3 3830              .dw XT_DOCONDBRANCH
0004b4 04b6      	DEST(PFA_NUMBER3)
0004b5 01d4              .dw XT_DNEGATE
                 PFA_NUMBER3:
0004b6 3837      	.dw XT_DOLITERAL
0004b7 0002      	.dw 2
0004b8 3829      	.dw XT_DOBRANCH
0004b9 04ca      	DEST(PFA_NUMBER5)
                 PFA_NUMBER2:
0004ba 38d3      	.dw XT_DROP
                 PFA_NUMBER6:
0004bb 3eb3      	.dw XT_2DROP
0004bc 38f0      	.dw XT_R_FROM
0004bd 38d3      	.dw XT_DROP
0004be 38f0              .dw XT_R_FROM
0004bf 3e9e              .dw XT_BASE
0004c0 387b              .dw XT_STORE
0004c1 394e      	.dw XT_ZERO
0004c2 381a      	.dw XT_EXIT
                 PFA_NUMBER1:
0004c3 3eb3          .dw XT_2DROP ; remove the address
                     ; incorporate sign into number
0004c4 38f0          .dw XT_R_FROM
0004c5 3830          .dw XT_DOCONDBRANCH
0004c6 04c8          DEST(PFA_NUMBER4)
0004c7 3e08          .dw XT_NEGATE
                 PFA_NUMBER4:
0004c8 3837          .dw XT_DOLITERAL
0004c9 0001          .dw 1
                 PFA_NUMBER5:
0004ca 38f0          .dw XT_R_FROM
0004cb 3e9e          .dw XT_BASE
0004cc 387b          .dw XT_STORE
0004cd 3945          .dw XT_TRUE
0004ce 381a          .dw XT_EXIT
                 .include "words/q-sign.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_QSIGN:
0004cf 3800          .dw DO_COLON 
                 PFA_QSIGN:        ; ( c -- ) 
                 .endif
0004d0 38c9          .dw XT_OVER    ; ( -- addr len addr )
0004d1 3892          .dw XT_CFETCH
0004d2 3837          .dw XT_DOLITERAL
0004d3 002d          .dw '-'
0004d4 3fc5          .dw XT_EQUAL  ; ( -- addr len flag )
0004d5 38ab          .dw XT_DUP
0004d6 38f9          .dw XT_TO_R
0004d7 3830          .dw XT_DOCONDBRANCH
0004d8 04dc          DEST(PFA_NUMBERSIGN_DONE)
0004d9 3837          .dw XT_DOLITERAL      ; skip sign character
0004da 0001          .dw 1
0004db 0540          .dw XT_SLASHSTRING
                 PFA_NUMBERSIGN_DONE:
0004dc 38f0          .dw XT_R_FROM
0004dd 381a          .dw XT_EXIT
                 .include "words/set-base.asm"
                 
                 ; Numeric IO
                 ; skip a numeric prefix character
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_BASES:
0004de 384c          .dw PFA_DOCONSTANT
                 .endif
0004df 000a
0004e0 0010
0004e1 0002
0004e2 000a          .dw 10,16,2,10 ; last one could a 8 instead.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_SET_BASE:
0004e3 3800          .dw DO_COLON 
                 PFA_SET_BASE:        ; ( adr1 len1 -- adr2 len2 ) 
                 .endif
0004e4 38c9          .dw XT_OVER
0004e5 3892          .dw XT_CFETCH
0004e6 3837          .dw XT_DOLITERAL
0004e7 0023          .dw 35
0004e8 398d          .dw XT_MINUS
0004e9 38ab          .dw XT_DUP
0004ea 394e          .dw XT_ZERO
0004eb 3837          .dw XT_DOLITERAL
0004ec 0004          .dw 4
0004ed 3e38          .dw XT_WITHIN
0004ee 3830          .dw XT_DOCONDBRANCH
0004ef 04fa          DEST(SET_BASE1)
                 	.if cpu_msp430==1
                 	.endif
0004f0 04de      	.dw XT_BASES
0004f1 3997      	.dw XT_PLUS
0004f2 3bba      	.dw XT_FETCHI
0004f3 3e9e      	.dw XT_BASE
0004f4 387b      	.dw XT_STORE
0004f5 3837      	.dw XT_DOLITERAL
0004f6 0001      	.dw 1
0004f7 0540      	.dw XT_SLASHSTRING
0004f8 3829      	.dw XT_DOBRANCH
0004f9 04fb      	DEST(SET_BASE2)
                 SET_BASE1:
0004fa 38d3      	.dw XT_DROP
                 SET_BASE2:
0004fb 381a          .dw XT_EXIT 
                 
                 ; create bases 10 , 16 , 2 , 8 ,
                 ; : set-base 35 - dup 0 4 within if 
                 ;    bases + @i base ! 1 /string 
                 ;   else 
                 ;    drop
                 ;   then ;
                 .include "words/to-number.asm"
                 
                 ; Numeric IO
                 ; convert a string to a number  c-addr2/u2 is the unconverted string
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TO_NUMBER:
0004fc ff07          .dw $ff07
0004fd 6e3e
0004fe 6d75
0004ff 6562
000500 0072          .db ">number",0
000501 0483          .dw VE_HEAD
                     .set VE_HEAD = VE_TO_NUMBER
                 XT_TO_NUMBER:
000502 3800          .dw DO_COLON
                 
                 .endif
                 
000503 38ab
000504 3830      TONUM1: .DW XT_DUP,XT_DOCONDBRANCH
000505 051b              DEST(TONUM3)
000506 38c9
000507 3892
000508 0353              .DW XT_OVER,XT_CFETCH,XT_DIGITQ
000509 3914
00050a 3830              .DW XT_ZEROEQUAL,XT_DOCONDBRANCH
00050b 050e              DEST(TONUM2)
00050c 38d3
00050d 381a              .DW XT_DROP,XT_EXIT
00050e 38f9
00050f 01f9
000510 3e9e
000511 3873
000512 00e2      TONUM2: .DW XT_TO_R,XT_2SWAP,XT_BASE,XT_FETCH,XT_UDSTAR
000513 38f0
000514 00da
000515 01f9              .DW XT_R_FROM,XT_MPLUS,XT_2SWAP
000516 3837
000517 0001
000518 0540
000519 3829              .DW XT_DOLITERAL,1,XT_SLASHSTRING,XT_DOBRANCH
00051a 0503              DEST(TONUM1)
00051b 381a      TONUM3: .DW XT_EXIT
                 
                 ;C >NUMBER  ud adr u -- ud' adr' u'
                 ;C                      convert string to number
                 ;   BEGIN
                 ;   DUP WHILE
                 ;       OVER C@ DIGIT?
                 ;       0= IF DROP EXIT THEN
                 ;       >R 2SWAP BASE @ UD*
                 ;       R> M+ 2SWAP
                 ;       1 /STRING
                 ;   REPEAT ;
                 .include "words/parse.asm"
                 
                 ; String
                 ; in input buffer parse ccc delimited string by the delimiter char.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_PARSE:
00051c ff05          .dw $ff05
00051d 6170
00051e 7372
00051f 0065          .db "parse",0
000520 04fc          .dw VE_HEAD
                     .set VE_HEAD = VE_PARSE
                 XT_PARSE:
000521 3800          .dw DO_COLON
                 PFA_PARSE:
                 .endif
000522 38f9          .dw XT_TO_R     ; ( -- )
000523 0536          .dw XT_SOURCE   ; ( -- addr len)
000524 3ec3          .dw XT_TO_IN     ; ( -- addr len >in)
000525 3873          .dw XT_FETCH
000526 0540          .dw XT_SLASHSTRING ; ( -- addr' len' )
                 
000527 38f0          .dw XT_R_FROM      ; ( -- addr' len' c)
000528 040c          .dw XT_CSCAN       ; ( -- addr' len'')
000529 38ab          .dw XT_DUP         ; ( -- addr' len'' len'')
00052a 3a29          .dw XT_1PLUS
00052b 3ec3          .dw XT_TO_IN        ; ( -- addr' len'' len'' >in)
00052c 3a53          .dw XT_PLUSSTORE   ; ( -- addr' len')
00052d 3837          .dw XT_DOLITERAL
00052e 0001          .dw 1
00052f 0540          .dw XT_SLASHSTRING
000530 381a          .dw XT_EXIT
                 .include "words/source.asm"
                 
                 ; System
                 ; address and current length of the input buffer
                 VE_SOURCE:
000531 ff06          .dw $FF06
000532 6f73
000533 7275
000534 6563          .db "source"
000535 051c          .dw VE_HEAD
                     .set VE_HEAD = VE_SOURCE
                 XT_SOURCE:
000536 3dd8          .dw PFA_DODEFER1
                 PFA_SOURCE:
000537 0016          .dw USER_SOURCE
000538 3da2          .dw XT_UDEFERFETCH
000539 3dae          .dw XT_UDEFERSTORE
                 
                 
                 .include "words/slash-string.asm"
                 
                 ; String
                 ; adjust string from addr1 to addr1+n, reduce length from u1 to u2 by n
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SLASHSTRING:
00053a ff07          .dw $ff07
00053b 732f
00053c 7274
00053d 6e69
00053e 0067          .db "/string",0
00053f 0531          .dw VE_HEAD
                     .set VE_HEAD = VE_SLASHSTRING
                 XT_SLASHSTRING:
000540 3800          .dw DO_COLON
                 PFA_SLASHSTRING:
                 .endif
000541 38db          .dw XT_ROT
000542 38c9          .dw XT_OVER
000543 3997          .dw XT_PLUS
000544 38db          .dw XT_ROT
000545 38db          .dw XT_ROT
000546 398d          .dw XT_MINUS
000547 381a          .dw XT_EXIT
                 
                 .include "words/parse-name.asm"
                 
                 ; String
                 ; In the SOURCE buffer parse whitespace delimited string. Returns string address within SOURCE.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 VE_PARSENAME:
000548 ff0a          .dw $FF0A 
000549 6170
00054a 7372
00054b 2d65
00054c 616e
00054d 656d          .db "parse-name"
00054e 053a          .dw VE_HEAD
                     .set VE_HEAD = VE_PARSENAME
                 XT_PARSENAME:
00054f 3800          .dw DO_COLON 
                 PFA_PARSENAME:
                 .endif
000550 3f3c          .dw XT_BL
000551 0553          .dw XT_SKIPSCANCHAR
000552 381a          .dw XT_EXIT 
                 
                 ; ( c -- addr2 len2 ) 
                 ; String
                 ; skips char and scan what's left in source for char
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 ;VE_SKIPSCANCHAR:
                 ;    .dw $FF0A 
                 ;    .db "skipscanchar"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_SKIPSCANCHAR
                 XT_SKIPSCANCHAR:
000553 3800          .dw DO_COLON
                 PFA_SKIPSCANCHAR:
                 .endif
000554 38f9          .dw XT_TO_R
000555 0536          .dw XT_SOURCE 
000556 3ec3          .dw XT_TO_IN 
000557 3873          .dw XT_FETCH 
000558 0540          .dw XT_SLASHSTRING 
                 
000559 3902          .dw XT_R_FETCH
00055a 03f4          .dw XT_CSKIP
00055b 38f0          .dw XT_R_FROM
00055c 040c          .dw XT_CSCAN
                 
                     ; adjust >IN
00055d 3eaa          .dw XT_2DUP
00055e 3997          .dw XT_PLUS
00055f 0536          .dw XT_SOURCE 
000560 38d3          .dw XT_DROP
000561 398d          .dw XT_MINUS
000562 3ec3          .dw XT_TO_IN
000563 387b          .dw XT_STORE
000564 381a          .dw XT_EXIT
                 .include "words/sp0.asm"
                 
                 ; Stack
                 ; start address of the data stack
                 VE_SP0:
000565 ff03          .dw $ff03
000566 7073
000567 0030          .db "sp0",0
000568 0548          .dw VE_HEAD
                     .set VE_HEAD = VE_SP0
                 XT_SP0:
000569 3869          .dw PFA_DOVALUE1
                 PFA_SP0:
00056a 0006          .dw USER_SP0
00056b 3da2          .dw XT_UDEFERFETCH
00056c 3dae          .dw XT_UDEFERSTORE
                 
                 ; ( -- addr) 
                 ; Stack
                 ; address of user variable to store top-of-stack for inactive tasks
                 VE_SP:
00056d ff02          .dw $ff02
00056e 7073          .db "sp"
00056f 0565          .dw VE_HEAD
                     .set VE_HEAD = VE_SP
                 XT_SP:
000570 3852          .dw PFA_DOUSER
                 PFA_SP:
000571 0008          .dw USER_SP
                 .include "words/rp0.asm"
                 
                 ; Stack
                 ; start address of return stack
                 VE_RP0:
000572 ff03          .dw $ff03
000573 7072
000574 0030          .db "rp0",0
000575 056d          .dw VE_HEAD
                     .set VE_HEAD = VE_RP0
                 XT_RP0:
000576 3800          .dw DO_COLON
                 PFA_RP0:
000577 057a          .dw XT_DORP0
000578 3873          .dw XT_FETCH
000579 381a          .dw XT_EXIT
                 
                 ; ( -- addr) 
                 ; Stack
                 ; user variable of the address of the initial return stack
                 ;VE_DORP0:
                 ;    .dw $ff05
                 ;    .db "(rp0)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DORP0
                 XT_DORP0:
00057a 3852          .dw PFA_DOUSER
                 PFA_DORP0:
00057b 0004          .dw USER_RP
                 .include "words/depth.asm"
                 
                 ; Stack
                 ; number of single-cell values contained in the data stack before n was placed on the stack.
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DEPTH:
00057c ff05          .dw $ff05
00057d 6564
00057e 7470
00057f 0068          .db "depth",0
000580 0572          .dw VE_HEAD
                     .set VE_HEAD = VE_DEPTH
                 XT_DEPTH:
000581 3800          .dw DO_COLON
                 PFA_DEPTH:
                 .endif
000582 0569          .dw XT_SP0
000583 3a7b          .dw XT_SP_FETCH
000584 398d          .dw XT_MINUS
000585 39fe          .dw XT_2SLASH
000586 3a2f          .dw XT_1MINUS
000587 381a          .dw XT_EXIT
                 .include "words/do-recognizer.asm"
                 
                 ; System
                 ; walk the recognizer stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DORECOGNIZER:
000588 ff0d          .dw $ff0d
000589 6f64
00058a 722d
00058b 6365
00058c 676f
00058d 696e
00058e 657a
00058f 0072          .db "do-recognizer",0
000590 057c          .dw VE_HEAD
                     .set VE_HEAD = VE_DORECOGNIZER
                 XT_DORECOGNIZER:
000591 3800          .dw DO_COLON
                 PFA_DORECOGNIZER:
                 .endif
000592 3837          .dw XT_DOLITERAL
000593 059d          .dw XT_DORECOGNIZER_A
000594 3837          .dw XT_DOLITERAL
000595 005a          .dw CFG_RECOGNIZERLISTLEN
000596 0947          .dw XT_MAPSTACK
000597 3914          .dw XT_ZEROEQUAL
000598 3830          .dw XT_DOCONDBRANCH
000599 059c          DEST(PFA_DORECOGNIZER1)
00059a 3eb3            .dw XT_2DROP
00059b 0631            .dw XT_R_FAIL
                 PFA_DORECOGNIZER1:
00059c 381a          .dw XT_EXIT
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 ; ( addr len XT -- addr len [ r:table -1 | 0 ] )
                 XT_DORECOGNIZER_A:
00059d 3800         .dw DO_COLON
                 PFA_DORECOGNIZER_A:
                 .endif
00059e 38db         .dw XT_ROT  ; -- len xt addr
00059f 38db         .dw XT_ROT  ; -- xt addr len
0005a0 3eaa         .dw XT_2DUP 
0005a1 3b0c         .dw XT_2TO_R
0005a2 38db         .dw XT_ROT  ; -- addr len xt
0005a3 3824         .dw XT_EXECUTE ; -- i*x r:foo | r:fail
0005a4 3b1b         .dw XT_2R_FROM
0005a5 38db         .dw XT_ROT
0005a6 38ab         .dw XT_DUP
0005a7 0631         .dw XT_R_FAIL
0005a8 3fc5         .dw XT_EQUAL
0005a9 3830         .dw XT_DOCONDBRANCH
0005aa 05ae         DEST(PFA_DORECOGNIZER_A1)
0005ab 38d3           .dw XT_DROP
0005ac 394e           .dw XT_ZERO
0005ad 381a           .dw XT_EXIT
                 PFA_DORECOGNIZER_A1:
0005ae 38ea         .dw XT_NIP 
0005af 38ea         .dw XT_NIP
0005b0 3945         .dw XT_TRUE
0005b1 381a         .dw XT_EXIT
                 
                 ; : do-recognizer ( addr len -- i*x r:table|r:fail )
                 ;    \ ( addr len -- addr len 0 | i*x r:table -1 )
                 ;    [: rot rot 2dup 2>r rot execute 2r> rot 
                 ;          dup r:fail = ( -- addr len r:table f )
                 ;          if drop 0 else nip nip -1 then
                 ;    ;] 
                 ;    EE_RECOGNIZERLISTLEN map-stack ( -- i*x addr len r:table f )
                 ;    0= if \ a recognizer did the job, remove addr/len
                 ;     2drop r:fail 
                 ;    then
                 ;
                 .include "words/interpret.asm"
                 
                 ; System
                 ; Interpret SOURCE word by word.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_INTERPRET:
0005b2 ff09          .dw $ff09
0005b3 6e69
0005b4 6574
0005b5 7072
0005b6 6572
0005b7 0074          .db "interpret",0
0005b8 0588          .dw VE_HEAD
                     .set VE_HEAD = VE_INTERPRET
                 XT_INTERPRET:
0005b9 3800          .dw DO_COLON
                 .endif
                 PFA_INTERPRET:
0005ba 054f          .dw XT_PARSENAME ; ( -- addr len )
0005bb 38b3          .dw XT_QDUP   ; ( -- addr len len | addr 0)
0005bc 3830          .dw XT_DOCONDBRANCH
0005bd 05c9          DEST(PFA_INTERPRET2)
0005be 0591          .dw XT_DORECOGNIZER
                 
0005bf 3e98          .dw XT_STATE
0005c0 3873          .dw XT_FETCH
0005c1 3830          .dw XT_DOCONDBRANCH
0005c2 05c4          DEST(PFA_INTERPRET1)
0005c3 3a29            .dw XT_1PLUS   ; we need the compile action
                     .if cpu_msp430==1
                     .endif
                 PFA_INTERPRET1:
0005c4 3bba          .dw XT_FETCHI
0005c5 3824          .dw XT_EXECUTE
0005c6 3f73          .dw XT_QSTACK
0005c7 3829          .dw XT_DOBRANCH
0005c8 05ba          DEST(PFA_INTERPRET)
                 PFA_INTERPRET2:
0005c9 38d3          .dw XT_DROP
0005ca 381a          .dw XT_EXIT
                 .include "words/r-intnumber.asm"
                 
                 ; Interpreter
                 ; Method table for single cell integers
                 
                 
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_R_NUM:
0005cb ff05          .dw $ff05
0005cc 3a72
0005cd 756e
0005ce 006d          .db "r:num",0
0005cf 05b2          .dw VE_HEAD
                     .set VE_HEAD = VE_R_NUM
                 XT_R_NUM:
0005d0 384c          .dw PFA_DOCONSTANT
                 PFA_R_NUM:
                 .endif
0005d1 013d          .dw XT_NOOP    ; interpret
0005d2 0710          .dw XT_LITERAL ; compile
0005d3 05dd          .dw XT_FAILNUM ; postpone
                 
                 ; ( -- addr )
                 ; Interpreter
                 ; Method table for double cell integers
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_R_DNUM:
0005d4 ff06          .dw $ff06
0005d5 3a72
0005d6 6e64
0005d7 6d75          .db "r:dnum"
0005d8 05cb          .dw VE_HEAD
                     .set VE_HEAD = VE_R_DNUM
                 XT_R_DNUM:
0005d9 384c          .dw PFA_DOCONSTANT
                 PFA_R_DNUM:
                 .endif
0005da 013d          .dw XT_NOOP     ; interpret
0005db 3fb9          .dw XT_2LITERAL ; compile
0005dc 05e3          .dw XT_FAILDNUM ; postpone
                 
                 ; ( -- addr )
                 ; Interpreter
                 ; Method to print a number and throw exception "invalid postpone"
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 ;VE_FAILNUM:
                 ;    .dw $ff06
                 ;    .db "fail:i"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_FAILNUM
                 XT_FAILNUM:
0005dd 3800          .dw DO_COLON
                 PFA_FAILNUM:
                 .endif
0005de 0322          .dw XT_DOT
0005df 3837          .dw XT_DOLITERAL
0005e0 ffd0          .dw -48
0005e1 3d60          .dw XT_THROW
0005e2 381a          .dw XT_EXIT
                 
                 ; ( -- addr )
                 ; Interpreter
                 ; Method to print a double cell number and throw exception "invalid postpone"
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 VE_FAILDNUM:
                 ;    .dw $ff06
                 ;    .db "fail:d"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_FAILDNUM
                 XT_FAILDNUM:
0005e3 3800          .dw DO_COLON
                 PFA_FAILDNUM:
                 .endif
0005e4 031a          .dw XT_DDOT
0005e5 3837          .dw XT_DOLITERAL
0005e6 ffd0          .dw -48
0005e7 3d60          .dw XT_THROW
0005e8 381a          .dw XT_EXIT
                 
                 ; ( addr len -- f )
                 ; Interpreter
                 ; recognizer for integer numbers
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 VE_REC_NUM:
0005e9 ff07          .dw $ff07
0005ea 6572
0005eb 3a63
0005ec 756e
0005ed 006d          .db "rec:num",0
0005ee 05d4          .dw VE_HEAD
                     .set VE_HEAD = VE_REC_NUM
                 XT_REC_NUM:
0005ef 3800          .dw DO_COLON
                 PFA_REC_NUM:
                 .endif
                     ; try converting to a number
0005f0 0488          .dw XT_NUMBER
0005f1 3830          .dw XT_DOCONDBRANCH
0005f2 05fc          DEST(PFA_REC_NONUMBER)
0005f3 3837          .dw XT_DOLITERAL
0005f4 0001          .dw 1
0005f5 3fc5          .dw XT_EQUAL
0005f6 3830          .dw XT_DOCONDBRANCH
0005f7 05fa          DEST(PFA_REC_INTNUM2)
0005f8 05d0            .dw XT_R_NUM
0005f9 381a            .dw XT_EXIT
                 PFA_REC_INTNUM2:
0005fa 05d9            .dw XT_R_DNUM
0005fb 381a            .dw XT_EXIT
                 PFA_REC_NONUMBER:
0005fc 0631          .dw XT_R_FAIL
0005fd 381a          .dw XT_EXIT
                 .include "words/r-word.asm"
                 
                 ; Interpreter
                 ; search for a word
                 .if cpu_msp430==1
                 .endif
                 .if cpu_avr8==1
                 VE_REC_WORD:
0005fe ff08          .dw $ff08
0005ff 6572
000600 3a63
000601 6f77
000602 6472          .db "rec:word"
000603 05e9          .dw VE_HEAD
                     .set VE_HEAD = VE_REC_WORD
                 XT_REC_WORD:
000604 3800          .dw DO_COLON
                 PFA_REC_WORD:
                 .endif
000605 06a7          .DW XT_FINDNAME
000606 38ab          .dw XT_DUP
000607 3914          .dw XT_ZEROEQUAL
000608 3830          .dw XT_DOCONDBRANCH
000609 060d          DEST(PFA_REC_WORD_FOUND)
00060a 38d3              .dw XT_DROP
00060b 0631      	.dw XT_R_FAIL
00060c 381a      	.dw XT_EXIT
                 PFA_REC_WORD_FOUND:
00060d 0614          .dw XT_R_WORD
                 
00060e 381a          .dw XT_EXIT
                 
                 ; ( -- addr )
                 ; Interpreter
                 ; actions to handle execution tokens and their flags
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_R_WORD:
00060f ff06          .dw $ff06
000610 3a72
000611 6f77
000612 6472          .db "r:word"
000613 05fe          .dw VE_HEAD
                     .set VE_HEAD = VE_R_WORD
                 XT_R_WORD:
000614 384c          .dw PFA_DOCONSTANT
                 PFA_R_WORD:
                 .endif
000615 0618          .dw XT_R_WORD_INTERPRET
000616 061c          .dw XT_R_WORD_COMPILE
000617 0624          .dw XT_R_WORD_POSTPONE
                 
                 ; ( XT flags -- )
                 ; Interpreter
                 ; interpret method for WORD recognizer
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_R_WORD_INTERPRET:
000618 3800          .dw DO_COLON
                 PFA_R_WORD_INTERPRET:
                 .endif
000619 38d3          .dw XT_DROP ; the flags are in the way
00061a 3824          .dw XT_EXECUTE
00061b 381a          .dw XT_EXIT
                 
                 ; ( XT flags -- )
                 ; Interpreter
                 ; Compile method for WORD recognizer
                 .if cpu_msp430==1
                 .endif
                 .if cpu_avr8==1
                 XT_R_WORD_COMPILE:
00061c 3800          .dw DO_COLON
                 PFA_R_WORD_COMPILE:
                 .endif
00061d 391b          .dw XT_ZEROLESS
00061e 3830          .dw XT_DOCONDBRANCH
00061f 0622          DEST(PFA_R_WORD_COMPILE1)
000620 06f8      	.dw XT_COMMA
000621 381a              .dw XT_EXIT
                 PFA_R_WORD_COMPILE1:
000622 3824              .dw XT_EXECUTE
000623 381a          .dw XT_EXIT
                 
                 ; ( XT flags -- )
                 ; Interpreter
                 ; Postpone method for WORD recognizer
                 .if cpu_msp430==1
                 .endif
                 .if cpu_avr8==1
                 XT_R_WORD_POSTPONE:
000624 3800          .dw DO_COLON
                 PFA_R_WORD_POSTPONE:
                 .endif
000625 391b          .dw XT_ZEROLESS
000626 3830          .dw XT_DOCONDBRANCH
000627 062a          DEST(PFA_R_WORD_POSTPONE1)
000628 06ed            .dw XT_COMPILE
000629 06ed            .dw XT_COMPILE
                 PFA_R_WORD_POSTPONE1:
00062a 06f8          .dw XT_COMMA
00062b 381a          .dw XT_EXIT
                 .include "words/r-fail.asm"
                 
                 ; Interpreter
                 ; there is no parser for this recognizer, this is the default and failsafe part
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_R_FAIL:
00062c ff06          .dw $ff06
00062d 3a72
00062e 6166
00062f 6c69          .db "r:fail"
000630 060f          .dw VE_HEAD
                     .set VE_HEAD = VE_R_FAIL
                 XT_R_FAIL:
000631 384c          .dw PFA_DOCONSTANT
                 PFA_R_FAIL:
                 .endif
000632 0635          .dw XT_FAIL  ; interpret
000633 0635          .dw XT_FAIL  ; compile
000634 0635          .dw XT_FAIL  ; postpone
                 
                 ; ( addr len -- )
                 ; Interpreter
                 ; default failure action: throw exception -13.
                 .if cpu_msp430==1
                 .endif
                 .if cpu_avr8==1
                 ;VE_FAIL:
                 ;    .dw $ff04
                 ;    .db "fail"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_FAIL
                 XT_FAIL:
000635 3800          .dw DO_COLON
                 PFA_FAIL:
                 .endif
000636 3837          .dw XT_DOLITERAL
000637 fff3          .dw -13
000638 3d60          .dw XT_THROW
                 .include "words/search-wordlist.asm"
                 
                 ; Search Order
                 ; searches the word list wid for the word at c-addr/len
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SEARCH_WORDLIST:
000639 ff0f          .dw $ff0f
00063a 6573
00063b 7261
00063c 6863
00063d 772d
00063e 726f
00063f 6c64
000640 7369
000641 0074          .db "search-wordlist",0
000642 062c          .dw VE_HEAD
                     .set VE_HEAD = VE_SEARCH_WORDLIST
                 XT_SEARCH_WORDLIST:
000643 3800          .dw DO_COLON
                 PFA_SEARCH_WORDLIST:
                 .endif
000644 38f9          .dw XT_TO_R
000645 394e          .dw XT_ZERO
000646 3837          .dw XT_DOLITERAL
000647 0658          .dw XT_ISWORD
000648 38f0          .dw XT_R_FROM
000649 0675          .dw XT_TRAVERSEWORDLIST
00064a 38ab          .dw XT_DUP
00064b 3914          .dw XT_ZEROEQUAL
00064c 3830          .dw XT_DOCONDBRANCH
00064d 0652          DEST(PFA_SEARCH_WORDLIST1)
00064e 3eb3             .dw XT_2DROP
00064f 38d3             .dw XT_DROP
000650 394e             .dw XT_ZERO
000651 381a             .dw XT_EXIT
                 PFA_SEARCH_WORDLIST1:
                       ; ... get the XT ...
000652 38ab            .dw XT_DUP
000653 069c            .dw XT_NFA2CFA
                       ; .. and get the header flag
000654 38be            .dw XT_SWAP
000655 0118            .dw XT_NAME2FLAGS
000656 0105            .dw XT_IMMEDIATEQ
000657 381a          .dw XT_EXIT
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_ISWORD:
000658 3800          .dw DO_COLON
                 PFA_ISWORD:
                 .endif
                     ; ( c-addr len 0 nt -- c-addr len 0 true| nt false )
000659 38f9          .dw XT_TO_R
00065a 38d3          .dw XT_DROP
00065b 3eaa          .dw XT_2DUP
00065c 3902          .dw XT_R_FETCH  ; -- addr len addr len nt
00065d 0690          .dw XT_NAME2STRING
00065e 016a          .dw XT_ICOMPARE      ; (-- addr len f )
00065f 3830          .dw XT_DOCONDBRANCH
000660 0666          DEST(PFA_ISWORD3)
                       ; not now
000661 38f0            .dw XT_R_FROM
000662 38d3            .dw XT_DROP
000663 394e            .dw XT_ZERO
000664 3945            .dw XT_TRUE         ; maybe next word
000665 381a            .dw XT_EXIT
                 PFA_ISWORD3:
                       ; we found the word, now clean up iteration data ...
000666 3eb3            .dw XT_2DROP
000667 38f0            .dw XT_R_FROM
000668 394e            .dw XT_ZERO       ; finish traverse-wordlist
000669 381a            .dw XT_EXIT
                 .include "words/traverse-wordlist.asm"
                 
                 ; Tools Ext (2012)
                 ; call the xt for every member of the wordlist wid until xt returns false
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TRAVERSEWORDLIST:
00066a ff11          .dw $ff11
00066b 7274
00066c 7661
00066d 7265
00066e 6573
00066f 772d
000670 726f
000671 6c64
000672 7369
000673 0074          .db "traverse-wordlist",0
000674 0639          .dw VE_HEAD
                     .set VE_HEAD = VE_TRAVERSEWORDLIST
                 XT_TRAVERSEWORDLIST:
000675 3800          .dw DO_COLON
                 PFA_TRAVERSEWORDLIST:
                 
                 .endif
000676 3b4d          .dw XT_FETCHE
                 PFA_TRAVERSEWORDLIST1:
000677 38ab          .dw XT_DUP           ; ( -- xt nt nt )
000678 3830          .dw XT_DOCONDBRANCH  ; ( -- nt ) is nfa = counted string
000679 0686          DEST(PFA_TRAVERSEWORDLIST2)
00067a 3eaa          .dw XT_2DUP
00067b 3b0c          .dw XT_2TO_R
00067c 38be          .dw XT_SWAP
00067d 3824          .dw XT_EXECUTE
00067e 3b1b          .dw XT_2R_FROM
00067f 38db          .dw XT_ROT
000680 3830          .dw XT_DOCONDBRANCH
000681 0686          DEST(PFA_TRAVERSEWORDLIST2)
000682 09ae          .dw XT_NFA2LFA
000683 3bba          .dw XT_FETCHI
000684 3829          .dw XT_DOBRANCH      ; ( -- addr )
000685 0677          DEST(PFA_TRAVERSEWORDLIST1)       ; ( -- addr )
                 PFA_TRAVERSEWORDLIST2:
000686 3eb3          .dw XT_2DROP
000687 381a          .dw XT_EXIT
                 
                 ; : traverse-wordlist ( i*x xt wid -- i*x' ) 
                 ;        begin @ dup 
                 ;        while 
                 ;          2dup 2>r 
                 ;          cell + swap execute ( i*x nt -- i*x' f ) 
                 ;          2r> rot 
                 ;        while repeat then 2drop ; 
                 .include "words/name2string.asm"
                 
                 ; Tools Ext (2012)
                 ; get a (flash) string from a name token nt
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_NAME2STRING:
000688 ff0b          .dw $ff0b
000689 616e
00068a 656d
00068b 733e
00068c 7274
00068d 6e69
00068e 0067          .db "name>string",0
00068f 066a          .dw VE_HEAD
                     .set VE_HEAD = VE_NAME2STRING
                 XT_NAME2STRING:
000690 3800          .dw DO_COLON
                 PFA_NAME2STRING:
                 
                 .endif
000691 03cc          .dw XT_ICOUNT   ; ( -- addr n )
000692 3837          .dw XT_DOLITERAL
000693 00ff          .dw 255
000694 3a0d          .dw XT_AND      ; mask immediate bit
000695 381a          .dw XT_EXIT
                 .include "words/nfa2cfa.asm"
                 
                 ; Tools
                 ; get the XT from a name token
                 VE_NFA2CFA:
000696 ff07          .dw $ff07
000697 666e
000698 3e61
000699 6663
../../avr8\words/nfa2cfa.asm(6): warning: .cseg .db misalignment - padding zero byte
00069a 0061          .db "nfa>cfa"
00069b 0688          .dw VE_HEAD
                     .set VE_HEAD = VE_NFA2CFA
                 XT_NFA2CFA:
00069c 3800          .dw DO_COLON
                 PFA_NFA2CFA:
00069d 09ae          .dw XT_NFA2LFA ; skip to link field
00069e 3a29          .dw XT_1PLUS   ; next is the execution token
00069f 381a          .dw XT_EXIT
                 .include "words/find-name.asm"
                 
                 ; Tools
                 ; search wordlists for an entry with the name from c-addr/len
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_FINDNAME:
0006a0 ff09          .dw $ff09
0006a1 6966
0006a2 646e
0006a3 6e2d
0006a4 6d61
0006a5 0065          .db "find-name",0
0006a6 0696          .dw VE_HEAD
                     .set VE_HEAD = VE_FINDNAME
                 XT_FINDNAME:
0006a7 3800          .dw DO_COLON
                 PFA_FINDNAME:
                 .endif
0006a8 3837          .dw XT_DOLITERAL
0006a9 06b3          .dw XT_FINDNAMEA
0006aa 3837          .dw XT_DOLITERAL
0006ab 0048          .dw CFG_ORDERLISTLEN
0006ac 0947          .dw XT_MAPSTACK
0006ad 3914          .dw XT_ZEROEQUAL
0006ae 3830          .dw XT_DOCONDBRANCH
0006af 06b2          DEST(PFA_FINDNAME1)
0006b0 3eb3            .dw XT_2DROP
0006b1 394e            .dw XT_ZERO
                 PFA_FINDNAME1:
0006b2 381a          .dw XT_EXIT
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 XT_FINDNAMEA:
0006b3 3800          .dw DO_COLON
                 PFA_FINDNAMEA:
                 .endif
0006b4 38f9          .dw XT_TO_R
0006b5 3eaa          .dw XT_2DUP
0006b6 38f0          .dw XT_R_FROM
0006b7 0643          .dw XT_SEARCH_WORDLIST
0006b8 38ab          .dw XT_DUP
0006b9 3830          .dw XT_DOCONDBRANCH
0006ba 06c0          DEST(PFA_FINDNAMEA1)
0006bb 38f9            .dw XT_TO_R
0006bc 38ea            .dw XT_NIP
0006bd 38ea            .dw XT_NIP
0006be 38f0            .dw XT_R_FROM
0006bf 3945            .dw XT_TRUE
                 PFA_FINDNAMEA1:
0006c0 381a          .dw XT_EXIT
                 
                 .include "dict/compiler1.inc"
                 
                 .include "words/docreate.asm"
                 
                 ; Compiler
                 ; parse the input and create an empty vocabulary entry without XT and data field (PF)
                 VE_DOCREATE:
0006c1 ff08          .dw $ff08
0006c2 6328
0006c3 6572
0006c4 7461
0006c5 2965          .db "(create)"
0006c6 06a0          .dw VE_HEAD
                     .set VE_HEAD = VE_DOCREATE
                 XT_DOCREATE:
0006c7 3800          .dw DO_COLON
                 PFA_DOCREATE:
0006c8 054f          .dw XT_PARSENAME
0006c9 0828          .dw XT_WLSCOPE
0006ca 38ab          .dw XT_DUP
0006cb 38f9          .dw XT_TO_R
0006cc 080d          .dw XT_HEADER
0006cd 38f0          .dw XT_R_FROM
                 .dseg
000173           COLON_SMUDGE: .byte 4
                 .cseg
0006ce 3837          .dw XT_DOLITERAL
0006cf 0175          .dw COLON_SMUDGE+2
0006d0 387b          .dw XT_STORE		; save wid
0006d1 3837          .dw XT_DOLITERAL
0006d2 0173          .dw COLON_SMUDGE+0
0006d3 387b          .dw XT_STORE		; save NFA
                 
0006d4 381a          .dw XT_EXIT
                 .include "words/backslash.asm"
                 
                 ; Compiler
                 ; everything up to the end of the current line is a comment
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BACKSLASH:
0006d5 0001          .dw $0001
0006d6 005c          .db $5c,0
0006d7 06c1          .dw VE_HEAD
                     .set VE_HEAD = VE_BACKSLASH
                 XT_BACKSLASH:
0006d8 3800          .dw DO_COLON
                 PFA_BACKSLASH:
                 .endif
0006d9 0536          .dw XT_SOURCE
0006da 38ea          .dw XT_NIP
0006db 3ec3          .dw XT_TO_IN
0006dc 387b          .dw XT_STORE
0006dd 381a          .dw XT_EXIT
                 .include "words/l-paren.asm"
                 
                 ; Compiler
                 ; skip everything up to the closing bracket on the same line
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_LPAREN:
0006de 0001          .dw $0001
0006df 0028          .db "(" ,0
0006e0 06d5          .dw VE_HEAD
                     .set VE_HEAD = VE_LPAREN
                 XT_LPAREN:
0006e1 3800          .dw DO_COLON
                 PFA_LPAREN:
                 .endif
0006e2 3837          .dw XT_DOLITERAL
0006e3 0029          .dw ')'
0006e4 0521          .dw XT_PARSE
0006e5 3eb3          .dw XT_2DROP
0006e6 381a          .dw XT_EXIT
                 
                 .include "words/compile.asm"
                 
                 ; Dictionary
                 ; read the following cell from the dictionary and append it to the current dictionary position.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_COMPILE:
0006e7 ff07          .dw $ff07
0006e8 6f63
0006e9 706d
0006ea 6c69
0006eb 0065          .db "compile",0
0006ec 06de          .dw  VE_HEAD
                     .set VE_HEAD = VE_COMPILE
                 XT_COMPILE:
0006ed 3800          .dw DO_COLON
                 PFA_COMPILE:
                 .endif
0006ee 38f0          .dw XT_R_FROM
0006ef 38ab          .dw XT_DUP
                 .if cpu_msp430==1
                 .endif
                 .if cpu_avr8==1
0006f0 3a29          .dw XT_1PLUS
                 .endif
0006f1 38f9          .dw XT_TO_R
0006f2 3bba          .dw XT_FETCHI
0006f3 06f8          .dw XT_COMMA
0006f4 381a          .dw XT_EXIT
                 .include "words/comma.asm"
                 
                 ; Dictionary
                 ; compile 16 bit into flash at DP
                 VE_COMMA:
0006f5 ff01          .dw $ff01
0006f6 002c          .db ',',0 ; ,
0006f7 06e7          .dw VE_HEAD
                     .set VE_HEAD = VE_COMMA
                 XT_COMMA:
0006f8 3800          .dw DO_COLON
                 PFA_COMMA:
0006f9 3ef9          .dw XT_DP
0006fa 3b61          .dw XT_STOREI
0006fb 3ef9          .dw XT_DP
0006fc 3a29          .dw XT_1PLUS
0006fd 0158          .dw XT_DOTO
0006fe 3efa          .dw PFA_DP
0006ff 381a          .dw XT_EXIT
                 .include "words/brackettick.asm"
                 
                 ; Compiler
                 ; what ' does in the interpreter mode, do in colon definitions
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BRACKETTICK:
000700 0003          .dw $0003
000701 275b
000702 005d          .db "[']",0
000703 06f5          .dw VE_HEAD
                     .set VE_HEAD = VE_BRACKETTICK
                 XT_BRACKETTICK:
000704 3800          .dw DO_COLON
                 PFA_BRACKETTICK:
                 .endif
000705 06ed          .dw XT_COMPILE
000706 3837          .dw XT_DOLITERAL
000707 03e5          .dw XT_TICK
000708 06f8          .dw XT_COMMA
000709 381a          .dw XT_EXIT
                 
                 
                 .include "words/literal.asm"
                 
                 ; Compiler
                 ; compile a literal in colon defintions
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_LITERAL:
00070a 0007          .dw $0007
00070b 696c
00070c 6574
00070d 6172
00070e 006c          .db "literal",0
00070f 0700          .dw VE_HEAD
                     .set VE_HEAD = VE_LITERAL
                 XT_LITERAL:
000710 3800          .dw DO_COLON
                 PFA_LITERAL:
                 .endif
000711 3e98
000712 3873
000713 3830              .DW XT_STATE,XT_FETCH,XT_DOCONDBRANCH
000714 0718              DEST(LITER1)
000715 06ed
000716 3837
000717 06f8              .DW XT_COMPILE,XT_DOLITERAL,XT_COMMA
000718 381a      LITER1: .DW XT_EXIT
                 .include "words/sliteral.asm"
                 
                 ; String
                 ; compiles a string to flash, at runtime leaves ( -- flash-addr count) on stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SLITERAL:
000719 0008        .dw $0008
00071a 6c73
00071b 7469
00071c 7265
00071d 6c61        .db "sliteral"
00071e 070a        .dw VE_HEAD
                   .set VE_HEAD = VE_SLITERAL
                 XT_SLITERAL:
00071f 3800          .dw DO_COLON
                 PFA_SLITERAL:
                 .endif
000720 06ed          .dw XT_COMPILE
000721 036d          .dw XT_DOSLITERAL    ; ( -- addr n)
000722 037b          .dw XT_SCOMMA
000723 381a          .dw XT_EXIT
                 .include "words/g-mark.asm"
                 
                 ; Compiler
                 ; places current dictionary position for backward resolves
                 ;VE_GMARK:
                 ;    .dw $ff05
                 ;    .db ">mark"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_GMARK
                 XT_GMARK:
000724 3800          .dw DO_COLON
                 PFA_GMARK:
000725 3ef9          .dw XT_DP
000726 06ed          .dw XT_COMPILE
000727 ffff          .dw -1           ; ffff does not erase flash
000728 381a          .dw XT_EXIT
                 .include "words/g-resolve.asm"
                 
                 ; Compiler
                 ; resolve backward jumps
                 ;VE_GRESOLVE:
                 ;    .dw $ff08
                 ;    .db ">resolve"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_GRESOLVE
                 XT_GRESOLVE:
000729 3800          .dw DO_COLON
                 PFA_GRESOLVE:
00072a 3f73          .dw XT_QSTACK
00072b 3ef9          .dw XT_DP
00072c 38be          .dw XT_SWAP
00072d 3b61          .dw XT_STOREI
00072e 381a          .dw XT_EXIT
                 .include "words/l_mark.asm"
                 
                 ; Compiler
                 ; place destination for backward branch
                 ;VE_LMARK:
                 ;    .dw $ff05
                 ;    .db "<mark"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_LMARK
                 XT_LMARK:
00072f 3800          .dw DO_COLON
                 PFA_LMARK:
000730 3ef9          .dw XT_DP
000731 381a          .dw XT_EXIT
                 .include "words/l_resolve.asm"
                 
                 ; Compiler
                 ; resolve backward branch
                 ;VE_LRESOLVE:
                 ;    .dw $ff08
                 ;    .db "<resolve"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_LRESOLVE
                 XT_LRESOLVE:
000732 3800          .dw DO_COLON
                 PFA_LRESOLVE:
000733 3f73          .dw XT_QSTACK
000734 06f8          .dw XT_COMMA
000735 381a          .dw XT_EXIT
                 
                 .include "words/ahead.asm"
                 
                 ; Compiler
                 ; do a unconditional branch
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_AHEAD:
000736 0005          .dw $0005
000737 6861
000738 6165
000739 0064          .db "ahead",0
00073a 0719          .dw VE_HEAD
                     .set VE_HEAD = VE_AHEAD
                 XT_AHEAD:
00073b 3800          .dw DO_COLON
                 PFA_AHEAD:
                 .endif
00073c 06ed          .dw XT_COMPILE
00073d 3829          .dw XT_DOBRANCH
00073e 0724          .dw XT_GMARK
00073f 381a          .dw XT_EXIT
                 .include "words/if.asm"
                 
                 ; Compiler
                 ; start conditional branch
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_IF:
000740 0002          .dw $0002
000741 6669          .db "if"
000742 0736          .dw VE_HEAD
                     .set VE_HEAD = VE_IF
                 XT_IF:
000743 3800          .dw DO_COLON
                 PFA_IF:
                 .endif
000744 06ed          .dw XT_COMPILE
000745 3830          .dw XT_DOCONDBRANCH
000746 0724          .dw XT_GMARK
000747 381a          .dw XT_EXIT
                 .include "words/else.asm"
                 
                 ; Compiler
                 ; resolve the forward reference and place a new unresolved forward reference
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ELSE:
000748 0004          .dw $0004
000749 6c65
00074a 6573          .db "else"
00074b 0740          .dw VE_HEAD
                     .set VE_HEAD = VE_ELSE
                 XT_ELSE:
00074c 3800          .dw DO_COLON
                 PFA_ELSE:
                 .endif
00074d 06ed          .dw XT_COMPILE
00074e 3829          .dw XT_DOBRANCH
00074f 0724          .dw XT_GMARK
000750 38be          .dw XT_SWAP
000751 0729          .dw XT_GRESOLVE
000752 381a          .dw XT_EXIT
                 .include "words/then.asm"
                 
                 ; Compiler
                 ; finish if
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_THEN:
000753 0004          .dw $0004
000754 6874
000755 6e65          .db "then"
000756 0748          .dw VE_HEAD
                     .set VE_HEAD = VE_THEN
                 XT_THEN:
000757 3800          .dw DO_COLON
                 PFA_THEN:
                 .endif
000758 0729          .dw XT_GRESOLVE
000759 381a          .dw XT_EXIT
                 .include "words/begin.asm"
                 
                 ; Compiler
                 ; put the next location for a transfer of control onto the control flow stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BEGIN:
00075a 0005          .dw $0005
00075b 6562
00075c 6967
00075d 006e          .db "begin",0
00075e 0753          .dw VE_HEAD
                     .set VE_HEAD = VE_BEGIN
                 XT_BEGIN:
00075f 3800          .dw DO_COLON
                 PFA_BEGIN:
                 .endif
000760 072f          .dw XT_LMARK
000761 381a          .dw XT_EXIT
                 .include "words/while.asm"
                 
                 ; Compiler
                 ; at runtime skip until repeat if non-true
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_WHILE:
000762 0005          .dw $0005
000763 6877
000764 6c69
000765 0065          .db "while",0
000766 075a          .dw VE_HEAD
                     .set VE_HEAD = VE_WHILE
                 XT_WHILE:
000767 3800          .dw DO_COLON
                 PFA_WHILE:
                 .endif
000768 0743          .dw XT_IF
000769 38be          .dw XT_SWAP
00076a 381a          .dw XT_EXIT
                 .include "words/repeat.asm"
                 
                 ; Compiler
                 ; continue execution at dest, resolve orig
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_REPEAT:
00076b 0006          .dw $0006
00076c 6572
00076d 6570
00076e 7461          .db "repeat"
00076f 0762          .dw VE_HEAD
                     .set VE_HEAD = VE_REPEAT
                 XT_REPEAT:
000770 3800          .dw DO_COLON
                 PFA_REPEAT:
                 .endif
000771 0784          .dw XT_AGAIN
000772 0757          .dw XT_THEN
000773 381a          .dw XT_EXIT
                 .include "words/until.asm"
                 
                 ; Compiler
                 ; finish begin with conditional branch, leaves the loop if true flag at runtime
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UNTIL:
000774 0005          .dw $0005
000775 6e75
000776 6974
000777 006c          .db "until",0
000778 076b          .dw VE_HEAD
                     .set VE_HEAD = VE_UNTIL
                 XT_UNTIL:
000779 3800          .dw DO_COLON
                 PFA_UNTIL:
                 .endif
00077a 3837          .dw XT_DOLITERAL
00077b 3830          .dw XT_DOCONDBRANCH
00077c 06f8          .dw XT_COMMA
                 
00077d 0732          .dw XT_LRESOLVE
00077e 381a          .dw XT_EXIT
                 .include "words/again.asm"
                 
                 ; Compiler
                 ; compile a jump back to dest
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_AGAIN:
00077f 0005          .dw $0005
000780 6761
000781 6961
000782 006e          .db "again",0
000783 0774          .dw VE_HEAD
                     .set VE_HEAD = VE_AGAIN
                 XT_AGAIN:
000784 3800          .dw DO_COLON
                 PFA_AGAIN:
                 .endif
000785 06ed          .dw XT_COMPILE
000786 3829          .dw XT_DOBRANCH
000787 0732          .dw XT_LRESOLVE
000788 381a          .dw XT_EXIT
                 .include "words/do.asm"
                 
                 ; Compiler
                 ; start do .. [+]loop
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DO:
000789 0002          .dw $0002
00078a 6f64          .db "do"
00078b 077f          .dw VE_HEAD
                     .set VE_HEAD = VE_DO
                 XT_DO:
00078c 3800          .dw DO_COLON
                 PFA_DO:
                 
                 .endif
00078d 06ed          .dw XT_COMPILE
00078e 3a89          .dw XT_DODO
00078f 072f          .dw XT_LMARK
000790 394e          .dw XT_ZERO
000791 07e7          .dw XT_TO_L
000792 381a          .dw XT_EXIT
                 .include "words/loop.asm"
                 
                 ; Compiler
                 ; compile (loop) and resolve the backward branch
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_LOOP:
000793 0004          .dw $0004
000794 6f6c
000795 706f          .db "loop"
000796 0789          .dw VE_HEAD
                     .set VE_HEAD = VE_LOOP
                 XT_LOOP:
000797 3800          .dw DO_COLON
                 PFA_LOOP:
                 .endif
000798 06ed          .dw XT_COMPILE
000799 3ab7          .dw XT_DOLOOP
00079a 07ce          .dw XT_ENDLOOP
00079b 381a          .dw XT_EXIT
                 .include "words/plusloop.asm"
                 
                 ; Compiler
                 ; compile (+loop) and resolve branches
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_PLUSLOOP:
00079c 0005          .dw $0005
00079d 6c2b
00079e 6f6f
00079f 0070          .db "+loop",0
0007a0 0793          .dw VE_HEAD
                     .set VE_HEAD = VE_PLUSLOOP
                 XT_PLUSLOOP:
0007a1 3800          .dw DO_COLON
                 PFA_PLUSLOOP:
                 .endif
0007a2 06ed          .dw XT_COMPILE
0007a3 3aa8          .dw XT_DOPLUSLOOP
0007a4 07ce          .dw XT_ENDLOOP
0007a5 381a          .dw XT_EXIT
                 .include "words/leave.asm"
                 
                 ; Compiler
                 ; immediatly leave the current DO..LOOP
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_LEAVE:
0007a6 0005         .dw $0005
0007a7 656c
0007a8 7661
0007a9 0065         .db "leave",0
0007aa 079c         .dw VE_HEAD
                    .set VE_HEAD = VE_LEAVE
                 XT_LEAVE:
0007ab 3800          .dw DO_COLON
                 PFA_LEAVE:
                 .endif
0007ac 06ed
0007ad 3ac2          .DW XT_COMPILE,XT_UNLOOP
0007ae 073b
0007af 07e7
0007b0 381a          .DW XT_AHEAD,XT_TO_L,XT_EXIT
                 .include "words/qdo.asm"
                 
                 ; Compiler
                 ; start a ?do .. [+]loop control structure
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 VE_QDO:
0007b1 0003          .dw $0003
0007b2 643f
0007b3 006f          .db "?do",0
0007b4 07a6          .dw VE_HEAD
                     .set VE_HEAD = VE_QDO
                 XT_QDO:
0007b5 3800          .dw DO_COLON
                 PFA_QDO:
                 .endif
0007b6 06ed          .dw XT_COMPILE
0007b7 07bd          .dw XT_QDOCHECK
0007b8 0743          .dw XT_IF
0007b9 078c          .dw XT_DO
0007ba 38be          .dw XT_SWAP    ; DO sets a 0 marker on the leave stack
0007bb 07e7          .dw XT_TO_L    ; then follows at the end.
0007bc 381a          .dw XT_EXIT
                 
                 ; there is no special runtime for ?do, the do runtime
                 ; gets wrapped with the sequence
                 ; ... ?do-check if do ..... loop then
                 ; with
                 ; : ?do-check ( n1 n2 -- n1 n2 true | false )
                 ;   2dup = dup >r if 2drop then r> invert ;
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_QDOCHECK:
0007bd 3800          .dw DO_COLON
                 PFA_QDOCHECK:
                 .endif
0007be 3eaa          .dw XT_2DUP
0007bf 3fc5          .dw XT_EQUAL
0007c0 38ab          .dw XT_DUP
0007c1 38f9          .dw XT_TO_R
0007c2 3830          .dw XT_DOCONDBRANCH
0007c3 07c5          DEST(PFA_QDOCHECK1)
0007c4 3eb3          .dw XT_2DROP
                 PFA_QDOCHECK1:
0007c5 38f0          .dw XT_R_FROM
0007c6 39f7          .dw XT_INVERT
0007c7 381a          .dw XT_EXIT
                 .include "words/endloop.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ENDLOOP:
0007c8 ff07          .dw $ff07
0007c9 6e65
0007ca 6c64
0007cb 6f6f
0007cc 0070          .db "endloop",0
0007cd 07b1          .dw VE_HEAD
                     .set VE_HEAD = VE_ENDLOOP
                 XT_ENDLOOP:
0007ce 3800          .dw DO_COLON
                 PFA_ENDLOOP:
                 .endif
                 ;Z ENDLOOP   adrs xt --   L: 0 a1 a2 .. aN --
                 ;   <resolve                backward loop
                 ;   BEGIN L> ?DUP WHILE POSTPONE THEN REPEAT ;
                 ;                                 resolve LEAVEs
                 ; This is a common factor of LOOP and +LOOP.
                 
0007cf 0732              .DW XT_LRESOLVE
0007d0 07db
0007d1 38b3
0007d2 3830      LOOP1:  .DW XT_L_FROM,XT_QDUP,XT_DOCONDBRANCH
0007d3 07d7               DEST(LOOP2)
0007d4 0757              .DW XT_THEN
0007d5 3829      	.dw XT_DOBRANCH
0007d6 07d0               DEST(LOOP1)
0007d7 381a      LOOP2:  .DW XT_EXIT
                 ; leave address stack
                 .include "words/l-from.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_L_FROM:
0007d8 ff02          .dw $ff02
0007d9 3e6c          .db "l>"
0007da 07c8          .dw VE_HEAD
                     .set VE_HEAD = VE_L_FROM
                 XT_L_FROM:
0007db 3800          .dw DO_COLON
                 PFA_L_FROM:
                 
                 .endif
                 ;Z L>   -- x   L: x --      move from leave stack
                 ;   LP @ @  -2 LP +! ;
                 
0007dc 07fb          .dw XT_LP
0007dd 3873          .dw XT_FETCH
0007de 3873          .dw XT_FETCH
0007df 3837          .dw XT_DOLITERAL
0007e0 fffe          .dw -2
0007e1 07fb          .dw XT_LP
0007e2 3a53          .dw XT_PLUSSTORE
0007e3 381a          .dw XT_EXIT
                 .include "words/to-l.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TO_L:
0007e4 ff02          .dw $ff02
0007e5 6c3e          .db ">l"
0007e6 07d8          .dw VE_HEAD
                     .set VE_HEAD = VE_TO_L
                 XT_TO_L:
0007e7 3800          .dw DO_COLON
                 PFA_TO_L:
                 .endif
                 ;Z >L   x --   L: -- x        move to leave stack
                 ;   CELL LP +!  LP @ ! ;      (L stack grows up)
                 
0007e8 3837              .dw XT_DOLITERAL
0007e9 0002      	.dw 2
0007ea 07fb      	.dw XT_LP
0007eb 3a53      	.dw XT_PLUSSTORE
0007ec 07fb      	.dw XT_LP
0007ed 3873      	.dw XT_FETCH
0007ee 387b      	.dw XT_STORE
0007ef 381a      	.dw XT_EXIT
                 .include "words/lp0.asm"
                 
                 ; Stack
                 ; start address of leave stack
                 VE_LP0:
0007f0 ff03          .dw $ff03
0007f1 706c
0007f2 0030          .db "lp0",0
0007f3 07e4          .dw VE_HEAD
                     .set VE_HEAD = VE_LP0
                 XT_LP0:
0007f4 3869          .dw PFA_DOVALUE1
                 PFA_LP0:
0007f5 0066          .dw EE_LP0
0007f6 3d7a          .dw XT_EDEFERFETCH
0007f7 3d84          .dw XT_EDEFERSTORE
                 .include "words/lp.asm"
                 
                 ; System Variable
                 ; leave stack pointer
                 VE_LP:
0007f8 ff02          .dw $ff02
0007f9 706c          .db "lp"
0007fa 07f0          .dw VE_HEAD
                     .set VE_HEAD = VE_LP
                 XT_LP:
0007fb 3842          .dw PFA_DOVARIABLE
                 PFA_LP:
0007fc 0177          .dw ram_lp
                 
                 .dseg
000177           ram_lp: .byte 2
                 .cseg
                 
                 
                 .include "words/create.asm"
                 
                 ; Dictionary
                 ; create a dictionary header. XT is (constant), with the address of the data field of name
                 VE_CREATE:
0007fd ff06          .dw $ff06
0007fe 7263
0007ff 6165
000800 6574          .db "create"
000801 07f8          .dw VE_HEAD
                     .set VE_HEAD = VE_CREATE
                 XT_CREATE:
000802 3800          .dw DO_COLON
                 PFA_CREATE:
000803 06c7          .dw XT_DOCREATE
000804 0831          .dw XT_REVEAL
000805 06ed          .dw XT_COMPILE
000806 384c          .dw PFA_DOCONSTANT
000807 381a          .dw XT_EXIT
                 .include "words/header.asm"
                 
                 ; Compiler
                 ; creates the vocabulary header without XT and data field (PF) in the wordlist wid
                 VE_HEADER:
000808 ff06          .dw $ff06
000809 6568
00080a 6461
00080b 7265          .db "header"
00080c 07fd          .dw VE_HEAD
                     .set VE_HEAD = VE_HEADER
                 XT_HEADER:
00080d 3800          .dw DO_COLON
                 PFA_HEADER:
00080e 3ef9          .dw XT_DP           ; the new Name Field
00080f 38f9          .dw XT_TO_R
000810 38f9          .dw XT_TO_R		; ( R: NFA WID )
000811 38ab          .dw XT_DUP    
000812 3922          .dw XT_GREATERZERO 
000813 3830          .dw XT_DOCONDBRANCH
000814 081f          .dw PFA_HEADER1
000815 38ab          .dw XT_DUP
000816 3837          .dw XT_DOLITERAL
000817 ff00          .dw $ff00           ; all flags are off (e.g. immediate)
000818 3a16          .dw XT_OR
000819 037f          .dw XT_DOSCOMMA
                     ; make the link to the previous entry in this wordlist
00081a 38f0          .dw XT_R_FROM
00081b 3b4d          .dw XT_FETCHE
00081c 06f8          .dw XT_COMMA
00081d 38f0          .dw XT_R_FROM
00081e 381a          .dw XT_EXIT
                 
                 PFA_HEADER1:
                     ; -16: attempt to use zero length string as a name
00081f 3837          .dw XT_DOLITERAL
000820 fff0          .dw -16
000821 3d60          .dw XT_THROW
                 
                 .include "words/wlscope.asm"
                 
                 ; Compiler
                 ; dynamically place a word in a wordlist. The word name may be changed.
                 VE_WLSCOPE:
000822 ff07          .dw $ff07
000823 6c77
000824 6373
000825 706f
000826 0065          .db "wlscope",0
000827 0808          .dw VE_HEAD
                     .set VE_HEAD = VE_WLSCOPE
                 XT_WLSCOPE:
000828 3dd8          .dw PFA_DODEFER1
                 PFA_WLSCOPE:
000829 0064          .dw EE_WLSCOPE
00082a 3d7a          .dw XT_EDEFERFETCH
00082b 3d84          .dw XT_EDEFERSTORE
                 
                 ; wlscope, "wordlist scope" ( addr len -- addr' len' wid ), is a deferred word
                 ; which enables the AmForth application to choose the wordlist ( wid ) for the
                 ; new voc entry based on the input ( addr len ) string. The name of the new voc
                 ; entry ( addr' len' ) may be different from the input string. Note that all
                 ; created voc entry types pass through the wlscope mechanism. The default
                 ; wlscope action passes the input string to the output without modification and
                 ; uses get-current to select the wid.
                 .include "words/reveal.asm"
                 
                 ; Dictionary
                 ; makes an entry in a wordlist visible, if not already done.
                 VE_REVEAL:
00082c ff06          .dw $ff06
00082d 6572
00082e 6576
00082f 6c61          .db "reveal"
000830 0822          .dw VE_HEAD
                     .set VE_HEAD = VE_REVEAL
                 XT_REVEAL:
000831 3800          .dw DO_COLON
                 PFA_REVEAL:
000832 3837          .dw XT_DOLITERAL
000833 0173          .dw COLON_SMUDGE+0
000834 3873          .dw XT_FETCH
000835 38b3          .dw XT_QDUP
000836 3830          .dw XT_DOCONDBRANCH
000837 0840          .dw PFA_REVEAL1
                 ;
000838 3837          .dw XT_DOLITERAL
000839 0175          .dw COLON_SMUDGE+2
00083a 3873          .dw XT_FETCH		; ( NFA WID )
00083b 3b29          .dw XT_STOREE
                     ; prevent duplicate actions and cooperate with :noname
00083c 394e          .dw XT_ZERO
00083d 3837          .dw XT_DOLITERAL
00083e 0173          .dw COLON_SMUDGE+0
00083f 387b          .dw XT_STORE
                 PFA_REVEAL1:
000840 381a          .dw XT_EXIT
                 .include "words/latest.asm"
                 
                 ; System Variable
                 ; system LATEST
                 VE_LATEST:
000841 ff06          .dw $ff06
000842 616c
000843 6574
000844 7473          .db "latest"
000845 082c          .dw VE_HEAD
                     .set VE_HEAD = VE_LATEST
                 XT_LATEST:
000846 3842          .dw PFA_DOVARIABLE
                 PFA_LATEST:
000847 0179          .dw ram_LATEST
                 
                 .dseg
000179           ram_LATEST: .byte 2
                 .cseg
                 .include "words/does.asm"
                 
                 ; Compiler
                 ; organize the XT replacement to call other colon code
                 VE_DOES:
000848 0005          .dw $0005
000849 6f64
00084a 7365
00084b 003e          .db "does>",0
00084c 0841          .dw VE_HEAD
                     .set VE_HEAD = VE_DOES
                 XT_DOES:
00084d 3800          .dw DO_COLON
                 PFA_DOES:
00084e 06ed          .dw XT_COMPILE
00084f 0860          .dw XT_DODOES
000850 06ed          .dw XT_COMPILE  ; create a code snippet to be used in an embedded XT
000851 940e          .dw $940e       ; the address of this compiled
000852 06ed          .dw XT_COMPILE  ; code will replace the XT of the 
000853 0855          .dw DO_DODOES   ; word that CREATE created
000854 381a          .dw XT_EXIT     ; 
                 
                 DO_DODOES: ; ( -- PFA )
000855 939a
000856 938a          savetos
000857 01cb          movw tosl, wl
000858 9601          adiw tosl, 1
                     ; the following takes the address from a real uC-call
                 .if (pclen==3)
                 .endif
000859 917f          pop wh
00085a 916f          pop wl
                 
00085b 93bf          push XH
00085c 93af          push XL
00085d 01db          movw XL, wl
00085e 940c 3804     jmp_ DO_NEXT
                 
                 ; ( -- )
                 ; System
                 ; replace the XT written by CREATE to call the code that follows does>
                 ;VE_DODOES:
                 ;   .dw $ff07
                 ;   .db "(does>)"
                 ;   .set VE_HEAD = VE_DODOES
                 XT_DODOES:
000860 3800          .dw DO_COLON
                 PFA_DODOES:
000861 38f0          .dw XT_R_FROM
000862 3837          .dw XT_DOLITERAL
000863 0175          .dw COLON_SMUDGE+2
000864 3873          .dw XT_FETCH
000865 3b4d          .dw XT_FETCHE
000866 09ae          .dw XT_NFA2LFA
000867 3a29          .dw XT_1PLUS   ; lfa>xt
                 
000868 3b61          .dw XT_STOREI
000869 381a          .dw XT_EXIT
                 .include "words/colon.asm"
                 
                 ; Compiler
                 ; create a named entry in the dictionary, XT is DO_COLON
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_COLON:
00086a ff01          .dw $ff01
00086b 003a          .db ":",0
00086c 0848          .dw VE_HEAD
                     .set VE_HEAD = VE_COLON
                 XT_COLON:
00086d 3800          .dw DO_COLON
                 PFA_COLON:
                 .endif
00086e 06c7          .dw XT_DOCREATE
00086f 0878          .dw XT_COLONNONAME
000870 38d3          .dw XT_DROP
000871 381a          .dw XT_EXIT
                 .include "words/colon-noname.asm"
                 
                 ; Compiler
                 ; create an unnamed entry in the dictionary, XT is DO_COLON
                 VE_COLONNONAME:
000872 ff07          .dw $ff07
000873 6e3a
000874 6e6f
000875 6d61
000876 0065          .db ":noname",0
000877 086a          .dw VE_HEAD
                     .set VE_HEAD = VE_COLONNONAME
                 XT_COLONNONAME:
000878 3800          .dw DO_COLON
                 PFA_COLONNONAME:
000879 3ef9          .dw XT_DP
00087a 38ab          .dw XT_DUP
00087b 0846          .dw XT_LATEST
00087c 387b          .dw XT_STORE
                 
00087d 06ed          .dw XT_COMPILE
00087e 3800          .dw DO_COLON
                 
00087f 088d          .dw XT_RBRACKET
000880 381a          .dw XT_EXIT
                 .include "words/semicolon.asm"
                 
                 ; Compiler
                 ; finish colon defintion, compiles (exit) and returns to interpret state 
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_SEMICOLON:
000881 0001          .dw $0001
000882 003b          .db $3b,0
000883 0872          .dw VE_HEAD
                     .set VE_HEAD = VE_SEMICOLON
                 XT_SEMICOLON:
000884 3800          .dw DO_COLON
                 PFA_SEMICOLON:
                 .endif
000885 06ed          .dw XT_COMPILE
000886 381a          .dw XT_EXIT
000887 0896          .dw XT_LBRACKET
000888 0831          .dw XT_REVEAL
000889 381a          .dw XT_EXIT
                 .include "words/right-bracket.asm"
                 
                 ; Compiler
                 ; enter compiler mode
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_RBRACKET:
00088a ff01          .dw $ff01
00088b 005d          .db "]",0
00088c 0881          .dw VE_HEAD
                     .set VE_HEAD = VE_RBRACKET
                 XT_RBRACKET:
00088d 3800          .dw DO_COLON
                 PFA_RBRACKET:
                 .endif
00088e 3837          .dw XT_DOLITERAL
00088f 0001          .dw 1
000890 3e98          .dw XT_STATE
000891 387b          .dw XT_STORE
000892 381a          .dw XT_EXIT
                 .include "words/left-bracket.asm"
                 
                 ; Compiler
                 ; enter interpreter mode
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_LBRACKET:
000893 0001          .dw $0001
000894 005b          .db "[",0
000895 088a          .dw VE_HEAD
                     .set VE_HEAD = VE_LBRACKET
                 XT_LBRACKET:
000896 3800          .dw DO_COLON
                 PFA_LBRACKET:
                 .endif
000897 394e          .dw XT_ZERO
000898 3e98          .dw XT_STATE
000899 387b          .dw XT_STORE
00089a 381a          .dw XT_EXIT
                 .include "words/variable.asm"
                 
                 ; Compiler
                 ; create a dictionary entry for a variable and allocate 1 cell RAM
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 VE_VARIABLE:
00089b ff08          .dw $ff08
00089c 6176
00089d 6972
00089e 6261
00089f 656c          .db "variable"
0008a0 0893          .dw VE_HEAD
                     .set VE_HEAD = VE_VARIABLE
                 XT_VARIABLE:
0008a1 3800          .dw DO_COLON
                 PFA_VARIABLE:
                 .endif
0008a2 3f0a          .dw XT_HERE
0008a3 08ae          .dw XT_CONSTANT
0008a4 3837          .dw XT_DOLITERAL
0008a5 0002          .dw 2
0008a6 3f13          .dw XT_ALLOT
0008a7 381a          .dw XT_EXIT
                 .include "words/constant.asm"
                 
                 ; Compiler
                 ; create a constant in the dictionary
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 VE_CONSTANT:
0008a8 ff08          .dw $ff08
0008a9 6f63
0008aa 736e
0008ab 6174
0008ac 746e          .db "constant"
0008ad 089b          .dw VE_HEAD
                     .set VE_HEAD = VE_CONSTANT
                 XT_CONSTANT:
0008ae 3800          .dw DO_COLON
                 PFA_CONSTANT:
                 .endif
0008af 06c7          .dw XT_DOCREATE
0008b0 0831          .dw XT_REVEAL
0008b1 06ed          .dw XT_COMPILE
0008b2 3842          .dw PFA_DOVARIABLE
0008b3 06f8          .dw XT_COMMA
0008b4 381a          .dw XT_EXIT
                 .include "words/user.asm"
                 
                 ; Compiler
                 ; create a dictionary entry for a user variable at offset n
                 VE_USER:
0008b5 ff04          .dw $ff04
0008b6 7375
0008b7 7265          .db "user"
0008b8 08a8          .dw VE_HEAD
                     .set VE_HEAD = VE_USER
                 XT_USER:
0008b9 3800          .dw DO_COLON
                 PFA_USER:
0008ba 06c7          .dw XT_DOCREATE
0008bb 0831          .dw XT_REVEAL
                 
0008bc 06ed          .dw XT_COMPILE
0008bd 3852          .dw PFA_DOUSER
0008be 06f8          .dw XT_COMMA
0008bf 381a          .dw XT_EXIT
                 
                 .include "words/recurse.asm"
                 
                 ; Compiler
                 ; compile the XT of the word currently being defined into the dictionary
                 VE_RECURSE:
0008c0 0007          .dw $0007
0008c1 6572
0008c2 7563
0008c3 7372
0008c4 0065          .db "recurse",0
0008c5 08b5          .dw VE_HEAD
                     .set VE_HEAD = VE_RECURSE
                 XT_RECURSE:
0008c6 3800          .dw DO_COLON
                 PFA_RECURSE:
0008c7 0846          .dw XT_LATEST
0008c8 3873          .dw XT_FETCH
0008c9 06f8          .dw XT_COMMA
0008ca 381a          .dw XT_EXIT
                 .include "words/immediate.asm"
                 
                 ; Compiler
                 ; set immediate flag for the most recent word definition
                 VE_IMMEDIATE:
0008cb ff09          .dw $ff09
0008cc 6d69
0008cd 656d
0008ce 6964
0008cf 7461
0008d0 0065          .db "immediate",0
0008d1 08c0          .dw VE_HEAD
                     .set VE_HEAD = VE_IMMEDIATE
                 XT_IMMEDIATE:
0008d2 3800          .dw DO_COLON
                 PFA_IMMEDIATE:
0008d3 096f          .dw XT_GET_CURRENT
0008d4 3b4d          .dw XT_FETCHE
0008d5 38ab          .dw XT_DUP
0008d6 3bba          .dw XT_FETCHI
0008d7 3837          .dw XT_DOLITERAL
0008d8 7fff          .dw $7fff
0008d9 3a0d          .dw XT_AND
0008da 38be          .dw XT_SWAP
0008db 3b61          .dw XT_STOREI
0008dc 381a          .dw XT_EXIT
                 
                 .include "words/bracketchar.asm"
                 
                 ; Tools
                 ; skip leading space delimites, place the first character of the word on the stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BRACKETCHAR:
0008dd 0006          .dw $0006
0008de 635b
0008df 6168
0008e0 5d72          .db "[char]"
0008e1 08cb          .dw VE_HEAD
                     .set VE_HEAD = VE_BRACKETCHAR
                 XT_BRACKETCHAR:
0008e2 3800          .dw DO_COLON
                 PFA_BRACKETCHAR:
                 .endif
0008e3 06ed          .dw XT_COMPILE
0008e4 3837          .dw XT_DOLITERAL
0008e5 047e          .dw XT_CHAR
0008e6 06f8          .dw XT_COMMA
0008e7 381a          .dw XT_EXIT
                 .include "words/abort-string.asm"
                 
                 ;C         i*x x1 --       R: j*x --      x1<>0
                 ;   POSTPONE IS" POSTPONE ?ABORT ; IMMEDIATE
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ABORTQUOTE:
0008e8 0006          .dw $0006
0008e9 6261
0008ea 726f
0008eb 2274          .db "abort",'"'
0008ec 08dd          .dw VE_HEAD
                     .set VE_HEAD = VE_ABORTQUOTE
                 XT_ABORTQUOTE:
0008ed 3800          .dw DO_COLON
                 PFA_ABORTQUOTE:
                 .endif
0008ee 3e6b          .dw XT_SQUOTE
0008ef 06ed          .dw XT_COMPILE
0008f0 0900          .dw XT_QABORT
0008f1 381a          .DW XT_EXIT
                 .include "words/abort.asm"
                 
                 ; Exceptions
                 ; send an exception -1
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ABORT:
0008f2 ff05          .dw $ff05
0008f3 6261
0008f4 726f
0008f5 0074          .db "abort",0
0008f6 08e8          .dw VE_HEAD
                     .set VE_HEAD = VE_ABORT
                 XT_ABORT:
0008f7 3800          .dw DO_COLON
                 PFA_ABORT:
                 .endif
0008f8 3837          .dw XT_DOLITERAL
0008f9 ffff          .dw -1
0008fa 3d60          .dw XT_THROW
                 .include "words/q-abort.asm"
                 
                 ;   ROT IF ITYPE ABORT THEN 2DROP ;
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_QABORT:
0008fb ff06          .dw $ff06
0008fc 613f
0008fd 6f62
0008fe 7472          .db "?abort"
0008ff 08f2          .dw VE_HEAD
                     .set VE_HEAD = VE_QABORT
                 XT_QABORT:
000900 3800          .dw DO_COLON
                 PFA_QABORT:
                 
                 .endif
000901 38db
000902 3830              .DW XT_ROT,XT_DOCONDBRANCH
000903 0906              DEST(QABO1)
000904 03a0
000905 08f7              .DW XT_ITYPE,XT_ABORT
000906 3eb3
000907 381a      QABO1:  .DW XT_2DROP,XT_EXIT
                 
                 .include "words/get-stack.asm"
                 
                 ; Tools
                 ; Get a stack from EEPROM
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_GET_STACK:
000908 ff09          .dw $ff09
000909 6567
00090a 2d74
00090b 7473
00090c 6361
00090d 006b          .db "get-stack",0
00090e 08fb          .dw VE_HEAD
                     .set VE_HEAD = VE_GET_STACK
                 XT_GET_STACK:
00090f 3800          .dw DO_COLON
                 PFA_N_FETCH_E:
                 .endif
000910 38ab          .dw XT_DUP
000911 3c82          .dw XT_CELLPLUS
000912 38be          .dw XT_SWAP
000913 3b4d          .dw XT_FETCHE
000914 38ab          .dw XT_DUP
000915 38f9          .dw XT_TO_R
000916 394e          .dw XT_ZERO
000917 38be          .dw XT_SWAP    ; go from bigger to smaller addresses
000918 07bd          .dw XT_QDOCHECK
000919 3830          .dw XT_DOCONDBRANCH
00091a 0926          DEST(PFA_N_FETCH_E2)
00091b 3a89          .dw XT_DODO
                 PFA_N_FETCH_E1:
                     ; ( ee-addr )
00091c 3a9a          .dw XT_I
00091d 3a2f          .dw XT_1MINUS
00091e 3ea5          .dw XT_CELLS ; ( -- ee-addr i*2 )
00091f 38c9          .dw XT_OVER  ; ( -- ee-addr i*2 ee-addr )
000920 3997          .dw XT_PLUS  ; ( -- ee-addr ee-addr+i
000921 3b4d          .dw XT_FETCHE ;( -- ee-addr item_i )
000922 38be          .dw XT_SWAP   ;( -- item_i ee-addr )
000923 3945          .dw XT_TRUE  ; shortcut for -1
000924 3aa8          .dw XT_DOPLUSLOOP
000925 091c          DEST(PFA_N_FETCH_E1)
                 PFA_N_FETCH_E2:
000926 3eb3          .dw XT_2DROP
000927 38f0          .dw XT_R_FROM
000928 381a          .dw XT_EXIT
                 
                 .include "words/set-stack.asm"
                 
                 ; Tools
                 ; Write a stack to EEPROM
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SET_STACK:
000929 ff09          .dw $ff09
00092a 6573
00092b 2d74
00092c 7473
00092d 6361
00092e 006b          .db "set-stack",0
00092f 0908          .dw VE_HEAD
                     .set VE_HEAD = VE_SET_STACK
                 XT_SET_STACK:
000930 3800          .dw DO_COLON
                 PFA_SET_STACK:
                 .endif
000931 3eaa          .dw XT_2DUP
000932 3b29          .dw XT_STOREE ; ( -- i_n .. i_0 n e-addr )
000933 38be          .dw XT_SWAP    
000934 394e          .dw XT_ZERO
000935 07bd          .dw XT_QDOCHECK
000936 3830          .dw XT_DOCONDBRANCH
000937 093e          DEST(PFA_SET_STACK2)
000938 3a89          .dw XT_DODO
                 PFA_SET_STACK1:
000939 3c82          .dw XT_CELLPLUS ; ( -- i_x e-addr )
00093a 3ebb          .dw XT_TUCK      ; ( -- e-addr i_x e-addr
00093b 3b29          .dw XT_STOREE
00093c 3ab7          .dw XT_DOLOOP
00093d 0939          DEST(PFA_SET_STACK1)
                 PFA_SET_STACK2:
00093e 38d3          .dw XT_DROP
00093f 381a          .dw XT_EXIT
                 
                 .include "words/map-stack.asm"
                 
                 ; Tools
                 ; Iterate over a stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_MAPSTACK:
000940 ff09          .dw $ff09
000941 616d
000942 2d70
000943 7473
000944 6361
000945 006b          .db "map-stack",0
000946 0929          .dw VE_HEAD
                     .set VE_HEAD = VE_MAPSTACK
                 XT_MAPSTACK:
000947 3800          .dw DO_COLON
                 PFA_MAPSTACK:
                 .endif
000948 38ab          .dw XT_DUP
000949 3c82          .dw XT_CELLPLUS
00094a 38be          .dw XT_SWAP
00094b 3b4d          .dw XT_FETCHE
00094c 3ea5          .dw XT_CELLS
00094d 3f81          .dw XT_BOUNDS
00094e 07bd          .dw XT_QDOCHECK
00094f 3830          .dw XT_DOCONDBRANCH
000950 0964          DEST(PFA_MAPSTACK3)
000951 3a89          .dw XT_DODO
                 PFA_MAPSTACK1:
000952 3a9a            .dw XT_I
000953 3b4d            .dw XT_FETCHE   ; -- i*x XT id
000954 38be            .dw XT_SWAP
000955 38f9            .dw XT_TO_R
000956 3902            .dw XT_R_FETCH
000957 3824            .dw XT_EXECUTE  ; i*x id -- j*y true | i*x false
000958 38b3            .dw XT_QDUP
000959 3830            .dw XT_DOCONDBRANCH
00095a 095f            DEST(PFA_MAPSTACK2)
00095b 38f0               .dw XT_R_FROM
00095c 38d3               .dw XT_DROP
00095d 3ac2               .dw XT_UNLOOP
00095e 381a               .dw XT_EXIT
                 PFA_MAPSTACK2:
00095f 38f0            .dw XT_R_FROM
000960 3837            .dw XT_DOLITERAL
000961 0002            .dw 2
000962 3aa8            .dw XT_DOPLUSLOOP
000963 0952            DEST(PFA_MAPSTACK1)
                 PFA_MAPSTACK3:
000964 38d3          .dw XT_DROP
000965 394e          .dw XT_ZERO
000966 381a          .dw XT_EXIT
                 
                 ;
                 ; : map-stack ( i*x XT e-addr -- j*y )
                 ;     dup cell+ swap @e cells bounds ?do 
                 ;       ( -- i*x XT )
                 ;       i @e swap >r r@ execute
                 ;       ?dup if r> drop unloop exit then
                 ;       r>
                 ;     2 +loop drop 0
                 ;
                 .include "words/get-current.asm"
                 
                 ; Search Order
                 ; get the wid of the current compilation word list
                 VE_GET_CURRENT:
000967 ff0b          .dw $ff0b
000968 6567
000969 2d74
00096a 7563
00096b 7272
00096c 6e65
00096d 0074          .db "get-current",0
00096e 0940          .dw VE_HEAD
                     .set VE_HEAD = VE_GET_CURRENT
                 XT_GET_CURRENT:
00096f 3800          .dw DO_COLON
                 PFA_GET_CURRENT:
000970 3837          .dw XT_DOLITERAL
000971 0044          .dw EE_CURRENT
000972 3b4d          .dw XT_FETCHE
000973 381a          .dw XT_EXIT
                 .include "words/get-order.asm"
                 
                 ; Search Order
                 ; Get the current search order word list
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_GET_ORDER:
000974 ff09          .dw $ff09
000975 6567
000976 2d74
000977 726f
000978 6564
000979 0072          .db "get-order",0
00097a 0967          .dw VE_HEAD
                     .set VE_HEAD = VE_GET_ORDER
                 XT_GET_ORDER:
00097b 3800          .dw DO_COLON
                 PFA_GET_ORDER:
                 .endif
00097c 3837          .dw XT_DOLITERAL
00097d 0048          .dw CFG_ORDERLISTLEN
00097e 090f          .dw XT_GET_STACK
00097f 381a          .dw XT_EXIT
                 
                 .include "words/compare.asm"
                 
                 ; String
                 ; compares two strings in RAM
                 VE_COMPARE:
000980 ff07          .dw $ff07
000981 6f63
000982 706d
000983 7261
000984 0065          .db "compare",0
000985 0974          .dw VE_HEAD
                     .set VE_HEAD = VE_COMPARE
                 XT_COMPARE:
000986 0987          .dw PFA_COMPARE
                 PFA_COMPARE:
000987 93bf          push xh
000988 93af          push xl
000989 018c          movw temp0, tosl
00098a 9189
00098b 9199          loadtos
00098c 01dc          movw xl, tosl
00098d 9189
00098e 9199          loadtos
00098f 019c          movw temp2, tosl
000990 9189
000991 9199          loadtos
000992 01fc          movw zl, tosl
                 PFA_COMPARE_LOOP:
000993 90ed          ld temp4, X+
000994 90f1          ld temp5, Z+
000995 14ef          cp temp4, temp5
000996 f451          brne PFA_COMPARE_NOTEQUAL
000997 950a          dec temp0
000998 f019          breq PFA_COMPARE_ENDREACHED2
000999 952a          dec temp2
00099a f7c1          brne PFA_COMPARE_LOOP
00099b c001          rjmp PFA_COMPARE_ENDREACHED
                 PFA_COMPARE_ENDREACHED2:
00099c 952a          dec temp2
                 PFA_COMPARE_ENDREACHED:
00099d 2b02          or temp0, temp2
00099e f411          brne PFA_COMPARE_CHECKLASTCHAR
00099f 2788          clr tosl
0009a0 c002          rjmp PFA_COMPARE_DONE
                 PFA_COMPARE_CHECKLASTCHAR:
                 PFA_COMPARE_NOTEQUAL:
0009a1 ef8f          ser tosl
0009a2 c000          rjmp PFA_COMPARE_DONE
                 
                 PFA_COMPARE_DONE:
0009a3 2f98          mov tosh, tosl
0009a4 91af          pop xl
0009a5 91bf          pop xh
0009a6 940c 3804     jmp_ DO_NEXT
                 .include "words/nfa2lfa.asm"
                 
                 ; System
                 ; get the link field address from the name field address
                 VE_NFA2LFA:
0009a8 ff07         .dw $ff07
0009a9 666e
0009aa 3e61
0009ab 666c
0009ac 0061         .db "nfa>lfa",0
0009ad 0980         .dw VE_HEAD
                    .set VE_HEAD = VE_NFA2LFA
                 XT_NFA2LFA:
0009ae 3800          .dw DO_COLON
                 PFA_NFA2LFA:
0009af 0690          .dw XT_NAME2STRING
0009b0 3a29          .dw XT_1PLUS
0009b1 39fe          .dw XT_2SLASH
0009b2 3997          .dw XT_PLUS
0009b3 381a          .dw XT_EXIT
                 .elif AMFORTH_NRWW_SIZE > 2000
                 .else
                 .endif
                 .include "dict_appl.inc"
                 
                 ; they may be moved to the core dictionary if needed
                 
                 .include "dict/compiler2.inc" ; additional words for the compiler
                 
                 ; included almost independently from each other
                 ; on a include-per-use basis
                 ;
                 .if DICT_COMPILER2 == 0
                 .set DICT_COMPILER2 = 1
                 
                 .include "words/set-current.asm"
                 
                 ; Search Order
                 ; set current word list to the given word list wid
                 VE_SET_CURRENT:
0009b4 ff0b          .dw $ff0b
0009b5 6573
0009b6 2d74
0009b7 7563
0009b8 7272
0009b9 6e65
0009ba 0074          .db "set-current",0
0009bb 09a8          .dw VE_HEAD
                     .set VE_HEAD = VE_SET_CURRENT
                 XT_SET_CURRENT:
0009bc 3800          .dw DO_COLON
                 PFA_SET_CURRENT:
0009bd 3837          .dw XT_DOLITERAL
0009be 0044          .dw EE_CURRENT
0009bf 3b29          .dw XT_STOREE
0009c0 381a          .dw XT_EXIT
                 .include "words/wordlist.asm"
                 
                 ; Search Order
                 ; create a new, empty wordlist
                 VE_WORDLIST:
0009c1 ff08          .dw $ff08
0009c2 6f77
0009c3 6472
0009c4 696c
0009c5 7473          .db "wordlist"
0009c6 09b4          .dw VE_HEAD
                     .set VE_HEAD = VE_WORDLIST
                 XT_WORDLIST:
0009c7 3800          .dw DO_COLON
                 PFA_WORDLIST:
0009c8 3f02          .dw XT_EHERE
0009c9 394e          .dw XT_ZERO
0009ca 38c9          .dw XT_OVER
0009cb 3b29          .dw XT_STOREE
0009cc 38ab          .dw XT_DUP
0009cd 3c82          .dw XT_CELLPLUS
0009ce 0158          .dw XT_DOTO
0009cf 3f03          .dw PFA_EHERE
0009d0 381a          .dw XT_EXIT
                 
                 .include "words/only.asm"
                 
                 ; Search Order
                 ; replace the order list with the system default list
                 VE_ONLY:
0009d1 ff04          .dw $ff04
0009d2 6e6f
0009d3 796c          .db "only"
0009d4 09c1          .dw VE_HEAD
                     .set VE_HEAD = VE_ONLY
                 XT_ONLY:
0009d5 3800          .dw DO_COLON
                 PFA_ONLY:
0009d6 3837          .dw XT_DOLITERAL
0009d7 0046          .dw EE_FORTHWORDLIST
0009d8 3837          .dw XT_DOLITERAL
0009d9 0001          .dw 1
0009da 09f0          .dw XT_SET_ORDER
0009db 381a          .dw XT_EXIT
                 .include "words/forth-wordlist.asm"
                 
                 ; Search Order
                 ; get the system default word list
                 VE_FORTH_WORDLIST:
0009dc ff0e          .dw $ff0e
0009dd 6f66
0009de 7472
0009df 2d68
0009e0 6f77
0009e1 6472
0009e2 696c
0009e3 7473          .db "forth-wordlist"
0009e4 09d1          .dw VE_HEAD
                     .set VE_HEAD = VE_FORTH_WORDLIST
                 XT_FORTH_WORDLIST:
0009e5 3869          .dw PFA_DOVALUE1
                 PFA_FORTH_WORDLIST:
0009e6 0042          .dw EE_WL_FORTH
0009e7 3d7a          .dw XT_EDEFERFETCH
0009e8 3d84          .dw XT_EDEFERSTORE
                 .include "words/set-order.asm"
                 
                 ; Search Order
                 ; replace the search order list
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SET_ORDER:
0009e9 ff09          .dw $ff09
0009ea 6573
0009eb 2d74
0009ec 726f
0009ed 6564
0009ee 0072          .db "set-order",0
0009ef 09dc          .dw VE_HEAD
                     .set VE_HEAD = VE_SET_ORDER
                 XT_SET_ORDER:
0009f0 3800          .dw DO_COLON
                 PFA_SET_ORDER:
                 .endif
0009f1 3837          .dw XT_DOLITERAL
0009f2 0048          .dw CFG_ORDERLISTLEN
0009f3 0930          .dw XT_SET_STACK
0009f4 381a          .dw XT_EXIT
                 
                 .include "words/set-recognizer.asm"
                 
                 ; Interpreter
                 ; replace the recognizer list
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SET_RECOGNIZERS:
0009f5 ff0f          .dw $ff0f
0009f6 6573
0009f7 2d74
0009f8 6572
0009f9 6f63
0009fa 6e67
0009fb 7a69
0009fc 7265
0009fd 0073          .db "set-recognizers",0
0009fe 09e9          .dw VE_HEAD
                     .set VE_HEAD = VE_SET_RECOGNIZERS
                 XT_SET_RECOGNIZERS:
0009ff 3800          .dw DO_COLON
                 PFA_SET_RECOGNIZERS:
                 .endif
000a00 3837          .dw XT_DOLITERAL
000a01 005a          .dw CFG_RECOGNIZERLISTLEN
000a02 0930          .dw XT_SET_STACK
000a03 381a          .dw XT_EXIT
                 
                 .include "words/get-recognizer.asm"
                 
                 ; Interpreter
                 ; Get the current recognizer list
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_GET_RECOGNIZERS:
000a04 ff0f          .dw $ff0f
000a05 6567
000a06 2d74
000a07 6572
000a08 6f63
000a09 6e67
000a0a 7a69
000a0b 7265
000a0c 0073          .db "get-recognizers",0
000a0d 09f5          .dw VE_HEAD
                     .set VE_HEAD = VE_GET_RECOGNIZERS
                 XT_GET_RECOGNIZERS:
000a0e 3800          .dw DO_COLON
                 PFA_GET_RECOGNIZERS:
                 .endif
000a0f 3837          .dw XT_DOLITERAL
000a10 005a          .dw CFG_RECOGNIZERLISTLEN
000a11 090f          .dw XT_GET_STACK
000a12 381a          .dw XT_EXIT
                 .include "words/code.asm"
                 
                 ; Compiler
                 ; create named entry in the dictionary, XT is the data field
                 VE_CODE:
000a13 ff04          .dw $ff04
000a14 6f63
000a15 6564          .db "code"
000a16 0a04          .dw VE_HEAD
                     .set VE_HEAD = VE_CODE
                 XT_CODE:
000a17 3800          .dw DO_COLON
                 PFA_CODE:
000a18 06c7          .dw XT_DOCREATE
000a19 0831          .dw XT_REVEAL
000a1a 3ef9          .dw XT_DP
000a1b 0a48          .dw XT_ICELLPLUS
000a1c 06f8          .dw XT_COMMA
000a1d 381a          .dw XT_EXIT
                 .include "words/end-code.asm"
                 
                 ; Compiler
                 ; finish a code definition
                 VE_ENDCODE:
000a1e ff08          .dw $ff08
000a1f 6e65
000a20 2d64
000a21 6f63
000a22 6564          .db "end-code"
000a23 0a13          .dw VE_HEAD
                     .set VE_HEAD = VE_ENDCODE
                 XT_ENDCODE:
000a24 3800          .dw DO_COLON
                 PFA_ENDCODE:
000a25 06ed          .dw XT_COMPILE
000a26 940c          .dw $940c
000a27 06ed          .dw XT_COMPILE
000a28 3804          .dw DO_NEXT
000a29 381a          .dw XT_EXIT
                 .include "words/marker.asm"
                 
                 ; System Value
                 ; The eeprom address until which MARKER saves and restores the eeprom data.
                 VE_MARKER:
000a2a ff08          .dw $ff08
000a2b 6d28
000a2c 7261
000a2d 656b
000a2e 2972          .db "(marker)"
000a2f 0a1e          .dw VE_HEAD
                     .set VE_HEAD = VE_MARKER
                 XT_MARKER:
000a30 3869          .dw PFA_DOVALUE1
                 PFA_MARKER:
000a31 0068          .dw EE_MARKER
000a32 3d7a          .dw XT_EDEFERFETCH
000a33 3d84          .dw XT_EDEFERSTORE
                 .include "words/postpone.asm"
                 
                 ; Compiler
                 ; Append the compilation semantics of "name" to the dictionary
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_POSTPONE:
000a34 0008          .dw $0008
000a35 6f70
000a36 7473
000a37 6f70
000a38 656e          .db "postpone"
000a39 0a2a          .dw VE_HEAD
                     .set VE_HEAD = VE_POSTPONE
                 XT_POSTPONE:
000a3a 3800          .dw DO_COLON
                 PFA_POSTPONE:
                 .endif
000a3b 054f          .dw XT_PARSENAME
000a3c 0591          .dw XT_DORECOGNIZER
000a3d 0a48          .dw XT_ICELLPLUS 
000a3e 0a48          .dw XT_ICELLPLUS
000a3f 3bba          .dw XT_FETCHI
000a40 3824          .dw XT_EXECUTE
000a41 381a          .dw XT_EXIT
                 .include "words/i-cellplus.asm"
                 
                 ; Compiler
                 ; skip to the next cell in flash
                 VE_ICELLPLUS:
000a42 ff07          .dw $FF07
000a43 2d69
000a44 6563
000a45 6c6c
000a46 002b          .db "i-cell+",0
000a47 0a34          .dw VE_HEAD
                     .set VE_HEAD = VE_ICELLPLUS
                 XT_ICELLPLUS:
000a48 3800          .dw DO_COLON
                 PFA_ICELLPLUS:
000a49 3a29          .dw XT_1PLUS
000a4a 381a          .dw XT_EXIT
                 .endif
                 
                 .include "words/applturnkey.asm"
                 
                 ; R( -- )
                 ; application specific turnkey action
                 VE_APPLTURNKEY:
000a4b ff0b          .dw $ff0b
000a4c 7061
000a4d 6c70
000a4e 7574
000a4f 6e72
000a50 656b
000a51 0079          .db "applturnkey",0
000a52 0a42          .dw VE_HEAD
                     .set VE_HEAD = VE_APPLTURNKEY
                 XT_APPLTURNKEY:
000a53 3800          .dw DO_COLON
                 PFA_APPLTURNKEY:
000a54 00b4          .dw XT_USART
000a55 3c89          .dw XT_INTON
000a56 0122          .dw XT_DOT_VER
000a57 3f96          .dw XT_SPACE
000a58 036d          .dw XT_DOSLITERAL
000a59 000a          .dw 10
000a5a 6f46
000a5b 7472
000a5c 6468
000a5d 6975
000a5e 6f6e          .db "Forthduino"
000a5f 03a0          .dw XT_ITYPE
                 
000a60 381a          .dw XT_EXIT
                 
                 
                 .set DPSTART = pc
                 .if(pc>AMFORTH_RO_SEG)
                 .endif
                 
                 .org AMFORTH_RO_SEG
                 .include "amforth-interpreter.asm"
                 
                 
                 DO_COLON:
003800 93bf          push XH
003801 93af          push XL          ; PUSH IP
003802 01db          movw XL, wl
003803 9611          adiw xl, 1
                 DO_NEXT:
003804 f06e          brts DO_INTERRUPT
003805 01fd          movw zl, XL        ; READ IP
003806 0fee
003807 1fff
003808 9165
003809 9175          readflashcell wl, wh
00380a 9611          adiw XL, 1        ; INC IP
                 
                 DO_EXECUTE:
00380b 01fb          movw zl, wl
00380c 0fee
00380d 1fff
00380e 9105
00380f 9115          readflashcell temp0,temp1
003810 01f8          movw zl, temp0
003811 9409          ijmp
                 
                 DO_INTERRUPT:
                     ; here we deal with interrupts the forth way
003812 94e8          clt
003813 eb64          ldi wl, LOW(XT_ISREXEC)
003814 e37c          ldi wh, HIGH(XT_ISREXEC)
003815 cff5          rjmp DO_EXECUTE
                 .include "dict/nrww.inc"
                 
                 ; section together with the forth inner interpreter
                 
                 .include "words/exit.asm"
                 
                 ; Compiler
                 ; end of current colon word
                 VE_EXIT:
003816 ff04          .dw $ff04
003817 7865
003818 7469          .db "exit"
003819 0a4b          .dw VE_HEAD
                     .set VE_HEAD = VE_EXIT
                 XT_EXIT:
00381a 381b          .dw PFA_EXIT
                 PFA_EXIT:
00381b 91af          pop XL
00381c 91bf          pop XH
00381d cfe6          jmp_ DO_NEXT
                 .include "words/execute.asm"
                 
                 ; System
                 ; execute XT
                 VE_EXECUTE:
00381e ff07          .dw $ff07
00381f 7865
003820 6365
003821 7475
003822 0065          .db "execute",0
003823 3816          .dw VE_HEAD
                     .set VE_HEAD = VE_EXECUTE
                 XT_EXECUTE:
003824 3825          .dw PFA_EXECUTE
                 PFA_EXECUTE:
003825 01bc          movw wl, tosl
003826 9189
003827 9199          loadtos
003828 cfe2          jmp_ DO_EXECUTE
                 .include "words/dobranch.asm"
                 
                 ; System
                 ; runtime of branch
                 ;VE_DOBRANCH:
                 ;    .dw $ff08
                 ;    .db "(branch)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOBRANCH
                 XT_DOBRANCH:
003829 382a          .dw PFA_DOBRANCH
                 PFA_DOBRANCH:
00382a 01fd          movw zl, XL
00382b 0fee
00382c 1fff
00382d 91a5
00382e 91b5          readflashcell XL,XH
00382f cfd4          jmp_ DO_NEXT
                 .include "words/docondbranch.asm"
                 
                 ; System
                 ; runtime of ?branch
                 ;VE_DOCONDBRANCH:
                 ;    .dw $ff09
                 ;    .db "(?branch)"
                 ;    .dw  VE_HEAD
                 ;    .set VE_HEAD = VE_DOCONDBRANCH
                 XT_DOCONDBRANCH:
003830 3831          .dw PFA_DOCONDBRANCH
                 PFA_DOCONDBRANCH:
003831 2b98          or tosh, tosl
003832 9189
003833 9199          loadtos
003834 f3a9          brbs 1, PFA_DOBRANCH ; 1 is z flag; if tos is zero (false), do the branch
003835 9611          adiw XL, 1
003836 cfcd          jmp_ DO_NEXT
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/doliteral.asm"
                 
                 ; System
                 ; runtime of literal
                 ;VE_DOLITERAL:
                 ;    .dw $ff09
                 ;    .db "(literal)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOLITERAL
                 XT_DOLITERAL:
003837 3838          .dw PFA_DOLITERAL
                 PFA_DOLITERAL:
003838 939a
003839 938a          savetos
00383a 01fd          movw zl, xl
00383b 0fee
00383c 1fff
00383d 9185
00383e 9195          readflashcell tosl,tosh
00383f 9611          adiw xl, 1
003840 cfc3          jmp_ DO_NEXT
                 
                 .include "words/dovariable.asm"
                 
                 ; System
                 ; puts content of parameter field (1 cell) to TOS
                 ;VE_DOVARIABLE:
                 ;    .dw $ff0a
                 ;    .db "(variable)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOVARIABLE
                 XT_DOVARIABLE:
003841 3842          .dw PFA_DOVARIABLE
                 PFA_DOVARIABLE:
003842 939a
003843 938a          savetos
003844 01fb          movw zl, wl
003845 9631          adiw zl,1
003846 0fee
003847 1fff
003848 9185
003849 9195          readflashcell tosl,tosh
00384a cfb9          jmp_ DO_NEXT
                 .include "words/doconstant.asm"
                 
                 ; System
                 ; place data field address on TOS
                 ;VE_DOCONSTANT:
                 ;    .dw $ff0a
                 ;    .db "(constant)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOCONSTANT
                 XT_DOCONSTANT:
00384b 384c          .dw PFA_DOCONSTANT
                 PFA_DOCONSTANT:
00384c 939a
00384d 938a          savetos
00384e 01cb          movw tosl, wl
00384f 9601          adiw tosl, 1
003850 cfb3          jmp_ DO_NEXT
                 .include "words/douser.asm"
                 
                 ; System
                 ; runtime part of user
                 ;VE_DOUSER:
                 ;    .dw $ff06
                 ;    .db "(user)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOUSER
                 XT_DOUSER:
003851 3852          .dw PFA_DOUSER
                 PFA_DOUSER:
003852 939a
003853 938a          savetos
003854 01fb          movw zl, wl
003855 9631          adiw zl, 1
003856 0fee
003857 1fff
003858 9185
003859 9195          readflashcell tosl,tosh
00385a 0d84          add tosl, upl
00385b 1d95          adc tosh, uph
00385c cfa7          jmp_ DO_NEXT
                 .include "words/do-value.asm"
                 
                 ; System
                 ; runtime of value
                 VE_DOVALUE:
00385d ff07          .dw $ff07
00385e 7628
00385f 6c61
003860 6575
003861 0029          .db "(value)", 0
003862 381e          .dw VE_HEAD
                     .set VE_HEAD = VE_DOVALUE
                 XT_DOVALUE:
003863 3800          .dw DO_COLON
                 PFA_DOVALUE:
003864 06c7          .dw XT_DOCREATE
003865 0831          .dw XT_REVEAL
003866 06ed          .dw XT_COMPILE
003867 3869          .dw PFA_DOVALUE1
003868 381a          .dw XT_EXIT
                 PFA_DOVALUE1:
003869 940e 0855     call_ DO_DODOES
00386b 38ab          .dw XT_DUP
00386c 3a29          .dw XT_1PLUS
00386d 3bba          .dw XT_FETCHI
00386e 3824          .dw XT_EXECUTE
00386f 381a          .dw XT_EXIT
                 .include "words/fetch.asm"
                 
                 ; Memory
                 ; read 1 cell from RAM address
                 VE_FETCH:
003870 ff01          .dw $ff01
003871 0040          .db "@",0
003872 385d          .dw VE_HEAD
                     .set VE_HEAD = VE_FETCH
                 XT_FETCH:
003873 3874          .dw PFA_FETCH
                 PFA_FETCH:
                 .if WANT_UNIFIED == 1
                 .endif
                 PFA_FETCHRAM:
003874 01fc          movw zl, tosl
                     ; low byte is read before the high byte
003875 9181          ld tosl, z+
003876 9191          ld tosh, z+
003877 cf8c          jmp_ DO_NEXT
                 .if WANT_UNIFIED == 1
                 .endif
                 .include "words/store.asm"
                 
                 ; Memory
                 ; write n to RAM memory at addr, low byte first
                 VE_STORE:
003878 ff01          .dw $ff01
003879 0021          .db "!",0
00387a 3870          .dw VE_HEAD
                     .set VE_HEAD = VE_STORE
                 XT_STORE:
00387b 387c          .dw PFA_STORE
                 PFA_STORE:
                 .if WANT_UNIFIED == 1
                 .endif
                 PFA_STORERAM:
00387c 01fc          movw zl, tosl
00387d 9189
00387e 9199          loadtos
                     ; the high byte is written before the low byte
00387f 8391          std Z+1, tosh
003880 8380          std Z+0, tosl
003881 9189
003882 9199          loadtos
003883 cf80          jmp_ DO_NEXT
                 .if WANT_UNIFIED == 1
                 .endif
                 .include "words/cstore.asm"
                 
                 ; Memory
                 ; store a single byte to RAM address
                 VE_CSTORE:
003884 ff02          .dw $ff02
003885 2163          .db "c!"
003886 3878          .dw VE_HEAD
                     .set VE_HEAD = VE_CSTORE
                 XT_CSTORE:
003887 3888          .dw PFA_CSTORE
                 PFA_CSTORE:
003888 01fc          movw zl, tosl
003889 9189
00388a 9199          loadtos
00388b 8380          st Z, tosl
00388c 9189
00388d 9199          loadtos
00388e cf75          jmp_ DO_NEXT
                 .include "words/cfetch.asm"
                 
                 ; Memory
                 ; fetch a single byte from memory mapped locations
                 VE_CFETCH:
00388f ff02          .dw $ff02
003890 4063          .db "c@"
003891 3884          .dw VE_HEAD
                     .set VE_HEAD  = VE_CFETCH
                 XT_CFETCH:
003892 3893          .dw PFA_CFETCH
                 PFA_CFETCH:
003893 01fc          movw zl, tosl
003894 2799          clr tosh
003895 8180          ld tosl, Z
003896 cf6d          jmp_ DO_NEXT
                 .include "words/fetch-u.asm"
                 
                 ; Memory
                 ; read 1 cell from USER area
                 VE_FETCHU:
003897 ff02          .dw $ff02
003898 7540          .db "@u"
003899 388f          .dw VE_HEAD
                     .set VE_HEAD = VE_FETCHU
                 XT_FETCHU:
00389a 3800          .dw DO_COLON
                 PFA_FETCHU:
00389b 3af0          .dw XT_UP_FETCH
00389c 3997          .dw XT_PLUS
00389d 3873          .dw XT_FETCH
00389e 381a          .dw XT_EXIT
                 .include "words/store-u.asm"
                 
                 ; Memory
                 ; write n to USER area at offset
                 VE_STOREU:
00389f ff02          .dw $ff02
0038a0 7521          .db "!u"
0038a1 3897          .dw VE_HEAD
                     .set VE_HEAD = VE_STOREU
                 XT_STOREU:
0038a2 3800          .dw DO_COLON
                 PFA_STOREU:
0038a3 3af0          .dw XT_UP_FETCH
0038a4 3997          .dw XT_PLUS
0038a5 387b          .dw XT_STORE
0038a6 381a          .dw XT_EXIT
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/dup.asm"
                 
                 ; Stack
                 ; duplicate TOS
                 VE_DUP:
0038a7 ff03          .dw $ff03
0038a8 7564
0038a9 0070          .db "dup",0
0038aa 389f          .dw VE_HEAD
                     .set VE_HEAD = VE_DUP
                 XT_DUP:
0038ab 38ac          .dw PFA_DUP
                 PFA_DUP:
0038ac 939a
0038ad 938a          savetos
0038ae cf55          jmp_ DO_NEXT
                 .include "words/qdup.asm"
                 
                 ; Stack
                 ; duplicate TOS if non-zero
                 VE_QDUP:
0038af ff04          .dw $ff04
0038b0 643f
0038b1 7075          .db "?dup"
0038b2 38a7          .dw VE_HEAD
                     .set VE_HEAD = VE_QDUP
                 XT_QDUP:
0038b3 38b4          .dw PFA_QDUP
                 PFA_QDUP:
0038b4 2f08          mov temp0, tosl
0038b5 2b09          or temp0, tosh
0038b6 f011          breq PFA_QDUP1
0038b7 939a
0038b8 938a          savetos
                 PFA_QDUP1:
0038b9 cf4a          jmp_ DO_NEXT
                 .include "words/swap.asm"
                 
                 ; Stack
                 ; swaps the two top level stack cells
                 VE_SWAP:
0038ba ff04          .dw $ff04
0038bb 7773
0038bc 7061          .db "swap"
0038bd 38af          .dw VE_HEAD
                     .set VE_HEAD = VE_SWAP
                 XT_SWAP:
0038be 38bf          .dw PFA_SWAP
                 PFA_SWAP:
0038bf 018c          movw temp0, tosl
0038c0 9189
0038c1 9199          loadtos
0038c2 931a          st -Y, temp1
0038c3 930a          st -Y, temp0
0038c4 cf3f          jmp_ DO_NEXT
                 .include "words/over.asm"
                 
                 ; Stack
                 ; Place a copy of x1 on top of the stack
                 VE_OVER:
0038c5 ff04          .dw $ff04
0038c6 766f
0038c7 7265          .db "over"
0038c8 38ba          .dw VE_HEAD
                     .set VE_HEAD = VE_OVER
                 XT_OVER:
0038c9 38ca          .dw PFA_OVER
                 PFA_OVER:
0038ca 939a
0038cb 938a          savetos
0038cc 818a          ldd tosl, Y+2
0038cd 819b          ldd tosh, Y+3
                 
0038ce cf35          jmp_ DO_NEXT
                 .include "words/drop.asm"
                 
                 ; Stack
                 ; drop TOS
                 VE_DROP:
0038cf ff04          .dw $ff04
0038d0 7264
0038d1 706f          .db "drop"
0038d2 38c5          .dw VE_HEAD
                     .set VE_HEAD = VE_DROP
                 XT_DROP:
0038d3 38d4          .dw PFA_DROP
                 PFA_DROP:
0038d4 9189
0038d5 9199          loadtos
0038d6 cf2d          jmp_ DO_NEXT
                 .include "words/rot.asm"
                 
                 ; Stack
                 ; rotate the three top level cells
                 VE_ROT:
0038d7 ff03          .dw $ff03
0038d8 6f72
0038d9 0074          .db "rot",0
0038da 38cf          .dw VE_HEAD
                     .set VE_HEAD = VE_ROT
                 XT_ROT:
0038db 38dc          .dw PFA_ROT
                 PFA_ROT:
0038dc 018c          movw temp0, tosl
0038dd 9129          ld temp2, Y+
0038de 9139          ld temp3, Y+ 
0038df 9189
0038e0 9199          loadtos
                         
0038e1 933a          st -Y, temp3
0038e2 932a          st -Y, temp2
0038e3 931a          st -Y, temp1
0038e4 930a          st -Y, temp0
                 
0038e5 cf1e          jmp_ DO_NEXT
                 .include "words/nip.asm"
                 
                 ; Stack
                 ; Remove Second of Stack
                 VE_NIP:
0038e6 ff03          .dw $ff03
0038e7 696e
0038e8 0070          .db "nip",0
0038e9 38d7          .dw VE_HEAD
                     .set VE_HEAD = VE_NIP
                 XT_NIP:
0038ea 38eb          .dw PFA_NIP
                 PFA_NIP:
0038eb 9622          adiw yl, 2
0038ec cf17          jmp_ DO_NEXT
                 ;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/r_from.asm"
                 
                 ; Stack
                 ; move TOR to TOS
                 VE_R_FROM:
0038ed ff02          .dw $ff02
0038ee 3e72          .db "r>"
0038ef 38e6          .dw VE_HEAD
                     .set VE_HEAD = VE_R_FROM
                 XT_R_FROM:
0038f0 38f1          .dw PFA_R_FROM
                 PFA_R_FROM:
0038f1 939a
0038f2 938a          savetos
0038f3 918f          pop tosl
0038f4 919f          pop tosh
0038f5 cf0e          jmp_ DO_NEXT
                 .include "words/to_r.asm"
                 
                 ; Stack
                 ; move TOS to TOR
                 VE_TO_R:
0038f6 ff02          .dw $ff02
0038f7 723e          .db ">r"
0038f8 38ed          .dw VE_HEAD
                     .set VE_HEAD = VE_TO_R
                 XT_TO_R:
0038f9 38fa          .dw PFA_TO_R
                 PFA_TO_R:
0038fa 939f          push tosh
0038fb 938f          push tosl
0038fc 9189
0038fd 9199          loadtos
0038fe cf05          jmp_ DO_NEXT
                 .include "words/r_fetch.asm"
                 
                 ; Stack
                 ; fetch content of TOR
                 VE_R_FETCH:
0038ff ff02          .dw $ff02
003900 4072          .db "r@"
003901 38f6          .dw VE_HEAD
                     .set VE_HEAD = VE_R_FETCH
                 XT_R_FETCH:
003902 3903          .dw PFA_R_FETCH
                 PFA_R_FETCH:
003903 939a
003904 938a          savetos
003905 918f          pop tosl
003906 919f          pop tosh
003907 939f          push tosh
003908 938f          push tosl
003909 cefa          jmp_ DO_NEXT
                 
                 
                 .include "words/not-equal.asm"
                 
                 ; Compare
                 ; true if n1 is not equal to n2
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_NOTEQUAL:
00390a ff02          .dw $ff02
00390b 3e3c          .db "<>"
00390c 38ff          .dw VE_HEAD
                     .set VE_HEAD = VE_NOTEQUAL
                 XT_NOTEQUAL:
00390d 3800          .dw DO_COLON
                 PFA_NOTEQUAL:
                 .endif
                 
00390e 3fc5
00390f 3914
003910 381a          .DW XT_EQUAL,XT_ZEROEQUAL,XT_EXIT
                 .include "words/equalzero.asm"
                 
                 ; Compare
                 ; compare with 0 (zero)
                 VE_ZEROEQUAL:
003911 ff02          .dw $ff02
003912 3d30          .db "0="
003913 390a          .dw VE_HEAD
                     .set VE_HEAD = VE_ZEROEQUAL
                 XT_ZEROEQUAL:
003914 3915          .dw PFA_ZEROEQUAL
                 PFA_ZEROEQUAL:
003915 2b98          or tosh, tosl
003916 f5d1          brne PFA_ZERO1
003917 c030          rjmp PFA_TRUE1
                 .include "words/lesszero.asm"
                 
                 ; Compare
                 ; compare with zero
                 VE_ZEROLESS:
003918 ff02          .dw $ff02
003919 3c30          .db "0<"
00391a 3911          .dw VE_HEAD
                     .set VE_HEAD = VE_ZEROLESS
                 XT_ZEROLESS:
00391b 391c          .dw PFA_ZEROLESS
                 PFA_ZEROLESS:
00391c fd97          sbrc tosh,7
00391d c02a          rjmp PFA_TRUE1
00391e c032          rjmp PFA_ZERO1
                 .include "words/greaterzero.asm"
                 
                 ; Compare
                 ; true if n1 is greater than 0
                 VE_GREATERZERO:
00391f ff02          .dw $ff02
003920 3e30          .db "0>"
003921 3918          .dw VE_HEAD
                     .set VE_HEAD = VE_GREATERZERO
                 XT_GREATERZERO:
003922 3923          .dw PFA_GREATERZERO
                 PFA_GREATERZERO:
003923 1582          cp tosl, zerol
003924 0593          cpc tosh, zeroh
003925 f15c          brlt PFA_ZERO1
003926 f151          brbs 1, PFA_ZERO1
003927 c020          rjmp PFA_TRUE1
                 .include "words/d-greaterzero.asm"
                 
                 ; Compare
                 ; compares if a double double cell number is greater 0
                 VE_DGREATERZERO:
003928 ff03          .dw $ff03
003929 3064
00392a 003e          .db "d0>",0
00392b 391f          .dw VE_HEAD
                     .set VE_HEAD = VE_DGREATERZERO
                 XT_DGREATERZERO:
00392c 392d          .dw PFA_DGREATERZERO
                 PFA_DGREATERZERO:
00392d 1582          cp tosl, zerol
00392e 0593          cpc tosh, zeroh
00392f 9189
003930 9199          loadtos
003931 0582          cpc tosl, zerol
003932 0593          cpc tosh, zeroh
003933 f0ec          brlt PFA_ZERO1
003934 f0e1          brbs 1, PFA_ZERO1
003935 c012          rjmp PFA_TRUE1
                 .include "words/d-lesszero.asm"
                 
                 ; Compare
                 ; compares if a double double cell number is less than 0
                 VE_DXT_ZEROLESS:
003936 ff03          .dw $ff03
003937 3064
003938 003c          .db "d0<",0
003939 3928          .dw VE_HEAD
                     .set VE_HEAD = VE_DXT_ZEROLESS
                 XT_DXT_ZEROLESS:
00393a 393b          .dw PFA_DXT_ZEROLESS
                 PFA_DXT_ZEROLESS:
00393b 9622          adiw Y,2
00393c fd97          sbrc tosh,7
00393d 940c 3948     jmp PFA_TRUE1
00393f 940c 3951     jmp PFA_ZERO1
                 
                 .include "words/true.asm"
                 
                 ; Arithmetics
                 ; leaves the value -1 (true) on TOS
                 VE_TRUE:
003941 ff04          .dw $ff04
003942 7274
003943 6575          .db "true"
003944 3936          .dw VE_HEAD
                     .set VE_HEAD = VE_TRUE
                 XT_TRUE:
003945 3946          .dw PFA_TRUE
                 PFA_TRUE:
003946 939a
003947 938a          savetos
                 PFA_TRUE1:
003948 ef8f          ser tosl
003949 ef9f          ser tosh
00394a ceb9          jmp_ DO_NEXT
                 .include "words/zero.asm"
                 
                 ; Arithmetics
                 ; place a value 0 on TOS
                 VE_ZERO:
00394b ff01          .dw $ff01
00394c 0030          .db "0",0
00394d 3941          .dw VE_HEAD
                     .set VE_HEAD = VE_ZERO
                 XT_ZERO:
00394e 394f          .dw PFA_ZERO
                 PFA_ZERO:
00394f 939a
003950 938a          savetos
                 PFA_ZERO1:
003951 01c1          movw tosl, zerol
003952 ceb1          jmp_ DO_NEXT
                 .include "words/uless.asm"
                 
                 ; Compare
                 ; true if u1 < u2 (unsigned)
                 VE_ULESS:
003953 ff02          .dw $ff02
003954 3c75          .db "u<"
003955 394b          .dw VE_HEAD
                     .set VE_HEAD = VE_ULESS
                 XT_ULESS:
003956 3957          .dw PFA_ULESS
                 PFA_ULESS:
003957 9129          ld temp2, Y+
003958 9139          ld temp3, Y+
003959 1782          cp tosl, temp2
00395a 0793          cpc tosh, temp3
00395b f3a8          brlo PFA_ZERO1
00395c f3a1          brbs 1, PFA_ZERO1
00395d cfea          jmp_ PFA_TRUE1
                 .include "words/u-greater.asm"
                 
                 ; Compare
                 ; true if u1 > u2 (unsigned)
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UGREATER:
00395e ff02          .dw $ff02
00395f 3e75          .db "u>"
003960 3953          .dw VE_HEAD
                     .set VE_HEAD = VE_UGREATER
                 XT_UGREATER:
003961 3800          .dw DO_COLON
                 PFA_UGREATER:
                 .endif
003962 38be          .DW XT_SWAP
003963 3956          .dw XT_ULESS
003964 381a          .dw XT_EXIT
                 .include "words/less.asm"
                 
                 ; Compare
                 ; true if n1 is less than n2
                     VE_LESS:
003965 ff01          .dw $ff01
003966 003c          .db "<",0
003967 395e          .dw VE_HEAD
                     .set VE_HEAD = VE_LESS
                 XT_LESS:
003968 3969          .dw PFA_LESS
                 PFA_LESS:
003969 9129          ld temp2, Y+
00396a 9139          ld temp3, Y+
00396b 1728          cp temp2, tosl
00396c 0739          cpc temp3, tosh
                 PFA_LESSDONE:
00396d f71c          brge PFA_ZERO1
00396e cfd9          rjmp PFA_TRUE1
                 .include "words/greater.asm"
                 
                 ; Compare
                 ; flag is true if n1 is greater than n2
                 VE_GREATER:
00396f ff01          .dw $ff01
003970 003e          .db ">",0
003971 3965          .dw VE_HEAD
                     .set VE_HEAD = VE_GREATER
                 XT_GREATER:
003972 3973          .dw PFA_GREATER
                 PFA_GREATER:
003973 9129          ld temp2, Y+
003974 9139          ld temp3, Y+
003975 1728          cp temp2, tosl
003976 0739          cpc temp3, tosh
                 PFA_GREATERDONE:
003977 f2cc          brlt PFA_ZERO1
003978 f2c1          brbs 1, PFA_ZERO1
003979 cfce          rjmp PFA_TRUE1
                 
                 .include "words/log2.asm"
                 
                 ; Arithmetics
                 ; logarithm to base 2 or highest set bitnumber
                 VE_LOG2:
00397a ff04          .dw $ff04
00397b 6f6c
00397c 3267          .db "log2"
00397d 396f          .dw VE_HEAD
                     .set VE_HEAD = VE_LOG2
                 XT_LOG2:
00397e 397f          .dw PFA_LOG2
                 PFA_LOG2:
00397f 01fc          movw zl, tosl
003980 2799          clr tosh
003981 e180          ldi tosl, 16
                 PFA_LOG2_1:
003982 958a          dec tosl
003983 f022          brmi PFA_LOG2_2 ; wrong data
003984 0fee          lsl  zl
003985 1fff          rol  zh
003986 f7d8          brcc PFA_LOG2_1
003987 ce7c          jmp_ DO_NEXT
                 
                 PFA_LOG2_2:
003988 959a          dec tosh
003989 ce7a          jmp_ DO_NEXT
                 .include "words/minus.asm"
                 
                 ; Arithmetics
                 ; subtract n2 from n1
                 VE_MINUS:
00398a ff01          .dw $ff01
00398b 002d          .db "-",0
00398c 397a          .dw VE_HEAD
                     .set VE_HEAD = VE_MINUS
                 XT_MINUS:
00398d 398e          .dw PFA_MINUS
                 PFA_MINUS:
00398e 9109          ld temp0, Y+
00398f 9119          ld temp1, Y+
003990 1b08          sub temp0, tosl
003991 0b19          sbc temp1, tosh
003992 01c8          movw tosl, temp0
003993 ce70          jmp_ DO_NEXT
                 .include "words/plus.asm"
                 
                 ; Arithmetics
                 ; add n1 and n2
                 VE_PLUS:
003994 ff01          .dw $ff01
003995 002b          .db "+",0
003996 398a          .dw VE_HEAD
                     .set VE_HEAD = VE_PLUS
                 XT_PLUS:
003997 3998          .dw PFA_PLUS
                 PFA_PLUS:
003998 9109          ld temp0, Y+
003999 9119          ld temp1, Y+
00399a 0f80          add tosl, temp0
00399b 1f91          adc tosh, temp1
00399c ce67          jmp_ DO_NEXT
                 .include "words/mstar.asm"
                 
                 ; Arithmetics
                 ; multiply 2 cells to a double cell
                 VE_MSTAR:
00399d ff02          .dw $ff02
00399e 2a6d          .db "m*"
00399f 3994          .dw VE_HEAD
                     .set VE_HEAD = VE_MSTAR
                 XT_MSTAR:
0039a0 39a1          .dw PFA_MSTAR
                 PFA_MSTAR:
0039a1 018c          movw temp0, tosl
0039a2 9189
0039a3 9199          loadtos
0039a4 019c          movw temp2, tosl
                     ; high cell ah*bh
0039a5 0231          muls temp3, temp1
0039a6 0170          movw temp4, r0
                     ; low cell  al*bl
0039a7 9f20          mul  temp2, temp0
0039a8 01c0          movw tosl, r0
                     ; signed ah*bl
0039a9 0330          mulsu temp3, temp0
0039aa 08f3          sbc   temp5, zeroh
0039ab 0d90          add   tosh,  r0
0039ac 1ce1          adc   temp4, r1
0039ad 1cf3          adc   temp5, zeroh
                     
                     ; signed al*bh
0039ae 0312          mulsu temp1, temp2
0039af 08f3          sbc   temp5, zeroh
0039b0 0d90          add   tosh,  r0
0039b1 1ce1          adc   temp4, r1
0039b2 1cf3          adc   temp5, zeroh
                 
0039b3 939a
0039b4 938a          savetos
0039b5 01c7          movw tosl, temp4
0039b6 ce4d          jmp_ DO_NEXT
                 .include "words/umslashmod.asm"
                 
                 ; Arithmetics
                 ; unsigned division ud / u2 with remainder
                 VE_UMSLASHMOD:
0039b7 ff06          .dw $ff06
0039b8 6d75
0039b9 6d2f
0039ba 646f          .db "um/mod"
0039bb 399d          .dw VE_HEAD
                     .set VE_HEAD = VE_UMSLASHMOD
                 XT_UMSLASHMOD:
0039bc 39bd          .dw PFA_UMSLASHMOD
                 PFA_UMSLASHMOD:
0039bd 017c          movw temp4, tosl
                 
0039be 9129          ld temp2, Y+
0039bf 9139          ld temp3, Y+
                   
0039c0 9109          ld temp0, Y+
0039c1 9119          ld temp1, Y+
                 
                 ;; unsigned 32/16 -> 16r16 divide
                 
                 PFA_UMSLASHMODmod:
                 
                   ; set loop counter
0039c2 e140          ldi temp6,$10
                 
                 PFA_UMSLASHMODmod_loop:
                     ; shift left, saving high bit
0039c3 2755          clr temp7
0039c4 0f00          lsl temp0
0039c5 1f11          rol temp1
0039c6 1f22          rol temp2
0039c7 1f33          rol temp3
0039c8 1f55          rol temp7
                 
                   ; try subtracting divisor
0039c9 152e          cp temp2, temp4
0039ca 053f          cpc temp3, temp5
0039cb 0552          cpc temp7,zerol
                 
0039cc f018          brcs PFA_UMSLASHMODmod_loop_control
                 
                 PFA_UMSLASHMODmod_subtract:
                     ; dividend is large enough
                     ; do the subtraction for real
                     ; and set lowest bit
0039cd 9503          inc temp0
0039ce 192e          sub temp2, temp4
0039cf 093f          sbc temp3, temp5
                 
                 PFA_UMSLASHMODmod_loop_control:
0039d0 954a          dec  temp6
0039d1 f789          brne PFA_UMSLASHMODmod_loop
                 
                 PFA_UMSLASHMODmod_done:
                     ; put remainder on stack
0039d2 933a          st -Y,temp3
0039d3 932a          st -Y,temp2
                 
                     ; put quotient on stack
0039d4 01c8          movw tosl, temp0
0039d5 ce2e          jmp_ DO_NEXT
                 .include "words/umstar.asm"
                 
                 ; Arithmetics
                 ; multiply 2 unsigned cells to a double cell
                 VE_UMSTAR:
0039d6 ff03          .dw $ff03
0039d7 6d75
0039d8 002a          .db "um*",0
0039d9 39b7          .dw VE_HEAD
                     .set VE_HEAD = VE_UMSTAR
                 XT_UMSTAR:
0039da 39db          .dw PFA_UMSTAR
                 PFA_UMSTAR:
0039db 018c          movw temp0, tosl
0039dc 9189
0039dd 9199          loadtos
                     ; result: (temp3*temp1)* 65536 + (temp3*temp0 + temp1*temp2) * 256 + (temp0 * temp2)
                     ; low bytes
0039de 9f80          mul tosl,temp0
0039df 01f0          movw zl, r0
0039e0 2722          clr temp2
0039e1 2733          clr temp3
                     ; middle bytes
0039e2 9f90          mul tosh, temp0
0039e3 0df0          add zh, r0
0039e4 1d21          adc temp2, r1
0039e5 1d33          adc temp3, zeroh
                         
0039e6 9f81          mul tosl, temp1
0039e7 0df0          add zh, r0
0039e8 1d21          adc temp2, r1
0039e9 1d33          adc temp3, zeroh
                     
0039ea 9f91          mul tosh, temp1
0039eb 0d20          add temp2, r0
0039ec 1d31          adc temp3, r1
0039ed 01cf          movw tosl, zl
0039ee 939a
0039ef 938a          savetos
0039f0 01c9          movw tosl, temp2
0039f1 ce12          jmp_ DO_NEXT
                 
                 .include "words/invert.asm"
                 
                 ; Arithmetics
                 ; 1-complement of TOS
                 VE_INVERT:
0039f2 ff06          .dw $ff06
0039f3 6e69
0039f4 6576
0039f5 7472          .db "invert"
0039f6 39d6          .dw VE_HEAD
                     .set VE_HEAD = VE_INVERT
                 XT_INVERT:
0039f7 39f8          .dw PFA_INVERT
                 PFA_INVERT:
0039f8 9580          com tosl
0039f9 9590          com tosh
0039fa ce09          jmp_ DO_NEXT
                 .include "words/2slash.asm"
                 
                 ; Arithmetics
                 ; arithmetic shift right
                 VE_2SLASH:
0039fb ff02          .dw $ff02
0039fc 2f32          .db "2/"
0039fd 39f2          .dw VE_HEAD
                     .set VE_HEAD = VE_2SLASH
                 XT_2SLASH:
0039fe 39ff          .dw PFA_2SLASH
                 PFA_2SLASH:
0039ff 9595          asr tosh
003a00 9587          ror tosl
003a01 ce02          jmp_ DO_NEXT
                 .include "words/2star.asm"
                 
                 ; Arithmetics
                 ; arithmetic shift left, filling with zero
                 VE_2STAR:
003a02 ff02          .dw $ff02
003a03 2a32          .db "2*"
003a04 39fb          .dw VE_HEAD
                     .set VE_HEAD = VE_2STAR
                 XT_2STAR:
003a05 3a06          .dw PFA_2STAR
                 PFA_2STAR:
003a06 0f88          lsl tosl
003a07 1f99          rol tosh
003a08 cdfb          jmp_ DO_NEXT
                 .include "words/and.asm"
                 
                 ; Logic
                 ; bitwise and
                 VE_AND:
003a09 ff03          .dw $ff03
003a0a 6e61
003a0b 0064          .db "and",0
003a0c 3a02          .dw VE_HEAD
                     .set VE_HEAD = VE_AND
                 XT_AND:
003a0d 3a0e          .dw PFA_AND
                 PFA_AND:
003a0e 9109          ld temp0, Y+
003a0f 9119          ld temp1, Y+
003a10 2380          and tosl, temp0
003a11 2391          and tosh, temp1
003a12 cdf1          jmp_ DO_NEXT
                 .include "words/or.asm"
                 
                 ; Logic
                 ; logical or
                 VE_OR:
003a13 ff02          .dw $ff02
003a14 726f          .db "or"
003a15 3a09          .dw VE_HEAD
                     .set VE_HEAD = VE_OR
                 XT_OR:
003a16 3a17          .dw PFA_OR
                 PFA_OR:
003a17 9109          ld temp0, Y+
003a18 9119          ld temp1, Y+
003a19 2b80          or tosl, temp0
003a1a 2b91          or tosh, temp1
003a1b cde8          jmp_ DO_NEXT
                 
                 .include "words/xor.asm"
                 
                 ; Logic
                 ; exclusive or
                 VE_XOR:
003a1c ff03          .dw $ff03
003a1d 6f78
003a1e 0072          .db "xor",0
003a1f 3a13          .dw VE_HEAD
                     .set VE_HEAD = VE_XOR
                 XT_XOR:
003a20 3a21          .dw PFA_XOR
                 PFA_XOR:
003a21 9109          ld temp0, Y+
003a22 9119          ld temp1, Y+
003a23 2780          eor tosl, temp0
003a24 2791          eor tosh, temp1
003a25 cdde          jmp_ DO_NEXT
                 
                 .include "words/1plus.asm"
                 
                 ; Arithmetics
                 ; optimized increment
                 VE_1PLUS:
003a26 ff02          .dw $ff02
003a27 2b31          .db "1+"
003a28 3a1c          .dw VE_HEAD
                     .set VE_HEAD = VE_1PLUS
                 XT_1PLUS:
003a29 3a2a          .dw PFA_1PLUS
                 PFA_1PLUS:
003a2a 9601          adiw tosl,1
003a2b cdd8          jmp_ DO_NEXT
                 .include "words/1minus.asm"
                 
                 ; Arithmetics
                 ; optimized decrement
                 VE_1MINUS:
003a2c ff02          .dw $ff02 
003a2d 2d31          .db "1-"
003a2e 3a26          .dw VE_HEAD
                     .set VE_HEAD = VE_1MINUS
                 XT_1MINUS:
003a2f 3a30          .dw PFA_1MINUS
                 PFA_1MINUS:
003a30 9701          sbiw tosl, 1
003a31 cdd2          jmp_ DO_NEXT
                 .include "words/lshift.asm"
                 
                 ; Arithmetics
                 ; logically shift n1 left n2 times
                 VE_LSHIFT:
003a32 ff06          .dw $ff06
003a33 736c
003a34 6968
003a35 7466          .db "lshift"
003a36 3a2c          .dw VE_HEAD
                     .set VE_HEAD = VE_LSHIFT
                 XT_LSHIFT:
003a37 3a38          .dw PFA_LSHIFT
                 PFA_LSHIFT:
003a38 01fc          movw zl, tosl
003a39 9189
003a3a 9199          loadtos
                 PFA_LSHIFT1:
003a3b 9731          sbiw zl, 1
003a3c f01a          brmi PFA_LSHIFT2
003a3d 0f88          lsl tosl
003a3e 1f99          rol tosh
003a3f cffb          rjmp PFA_LSHIFT1
                 PFA_LSHIFT2:
003a40 cdc3          jmp_ DO_NEXT
                 
                 .include "words/rshift.asm"
                 
                 ; Arithmetics
                 ; shift n1 n2-times logically right
                 VE_RSHIFT:
003a41 ff06          .dw $ff06
003a42 7372
003a43 6968
003a44 7466          .db "rshift"
003a45 3a32          .dw VE_HEAD
                     .set VE_HEAD = VE_RSHIFT
                 XT_RSHIFT:
003a46 3a47          .dw PFA_RSHIFT
                 PFA_RSHIFT:
003a47 01fc          movw zl, tosl
003a48 9189
003a49 9199          loadtos
                 PFA_RSHIFT1:
003a4a 9731          sbiw zl, 1
003a4b f01a          brmi PFA_RSHIFT2
003a4c 9596          lsr tosh
003a4d 9587          ror tosl
003a4e cffb          rjmp PFA_RSHIFT1
                 PFA_RSHIFT2:
003a4f cdb4          jmp_ DO_NEXT
                 
                 .include "words/plusstore.asm"
                 
                 ; Arithmetics
                 ; add n to content of RAM address a-addr
                 VE_PLUSSTORE:
003a50 ff02          .dw $ff02
003a51 212b          .db "+!"
003a52 3a41          .dw VE_HEAD
                     .set VE_HEAD = VE_PLUSSTORE
                 XT_PLUSSTORE:
003a53 3a54          .dw PFA_PLUSSTORE
                 PFA_PLUSSTORE:
003a54 01fc          movw zl, tosl
003a55 9189
003a56 9199          loadtos
003a57 8120          ldd temp2, Z+0
003a58 8131          ldd temp3, Z+1
003a59 0f82          add tosl, temp2
003a5a 1f93          adc tosh, temp3
003a5b 8380          std Z+0, tosl
003a5c 8391          std Z+1, tosh
003a5d 9189
003a5e 9199          loadtos
003a5f cda4          jmp_ DO_NEXT
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/rpfetch.asm"
                 
                 ; Stack
                 ; current return stack pointer address
                 VE_RP_FETCH:
003a60 ff03          .dw $ff03
003a61 7072
003a62 0040          .db "rp@",0
003a63 3a50          .dw VE_HEAD
                     .set VE_HEAD = VE_RP_FETCH
                 XT_RP_FETCH:
003a64 3a65          .dw PFA_RP_FETCH
                 PFA_RP_FETCH:
003a65 939a
003a66 938a          savetos
003a67 b78d          in tosl, SPL
003a68 b79e          in tosh, SPH
003a69 cd9a          jmp_ DO_NEXT
                 .include "words/rpstore.asm"
                 
                 ; Stack
                 ; set return stack pointer
                 VE_RP_STORE:
003a6a ff03          .dw $ff03
003a6b 7072
003a6c 0021          .db "rp!",0
003a6d 3a60          .dw VE_HEAD
                     .set VE_HEAD = VE_RP_STORE
                 XT_RP_STORE:
003a6e 3a6f          .dw PFA_RP_STORE
                 PFA_RP_STORE:
003a6f b72f          in temp2, SREG
003a70 94f8          cli
003a71 bf8d          out SPL, tosl
003a72 bf9e          out SPH, tosh
003a73 bf2f          out SREG, temp2
003a74 9189
003a75 9199          loadtos
003a76 cd8d          jmp_ DO_NEXT
                 .include "words/spfetch.asm"
                 
                 ; Stack
                 ; current data stack pointer
                 VE_SP_FETCH:
003a77 ff03          .dw $ff03
003a78 7073
003a79 0040          .db "sp@",0
003a7a 3a6a          .dw VE_HEAD
                     .set VE_HEAD = VE_SP_FETCH
                 XT_SP_FETCH:
003a7b 3a7c          .dw PFA_SP_FETCH
                 PFA_SP_FETCH:
003a7c 939a
003a7d 938a          savetos
003a7e 01ce          movw tosl, yl
003a7f cd84          jmp_ DO_NEXT
                 .include "words/spstore.asm"
                 
                 ; Stack
                 ; set data stack pointer to addr
                 VE_SP_STORE:
003a80 ff03          .dw $ff03
003a81 7073
003a82 0021          .db "sp!",0
003a83 3a77          .dw VE_HEAD
                     .set VE_HEAD = VE_SP_STORE
                 XT_SP_STORE:
003a84 3a85          .dw PFA_SP_STORE
                 PFA_SP_STORE:
003a85 01ec          movw yl, tosl
003a86 9189
003a87 9199          loadtos
003a88 cd7b          jmp_ DO_NEXT
                 
                 .include "words/dodo.asm"
                 
                 ; System
                 ; runtime of do
                 ;VE_DODO:
                 ;    .dw $ff04
                 ;    .db "(do)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DODO
                 XT_DODO:
003a89 3a8a          .dw PFA_DODO
                 PFA_DODO:
003a8a 9129          ld temp2, Y+
003a8b 9139          ld temp3, Y+  ; limit
                 PFA_DODO1:
003a8c e8e0          ldi zl, $80
003a8d 0f3e          add temp3, zl
003a8e 1b82          sub  tosl, temp2
003a8f 0b93          sbc  tosh, temp3
                 
003a90 933f          push temp3
003a91 932f          push temp2    ; limit  ( --> limit + $8000)
003a92 939f          push tosh
003a93 938f          push tosl     ; start -> index ( --> index - (limit - $8000)
003a94 9189
003a95 9199          loadtos
003a96 cd6d          jmp_ DO_NEXT
                 .include "words/i.asm"
                 
                 ; Compiler
                 ; current loop counter
                 VE_I:
003a97 ff01          .dw $FF01
003a98 0069          .db "i",0
003a99 3a80          .dw VE_HEAD
                     .set VE_HEAD = VE_I
                 XT_I:
003a9a 3a9b          .dw PFA_I
                 PFA_I:
003a9b 939a
003a9c 938a          savetos
003a9d 918f          pop tosl
003a9e 919f          pop tosh  ; index
003a9f 91ef          pop zl
003aa0 91ff          pop zh    ; limit
003aa1 93ff          push zh
003aa2 93ef          push zl
003aa3 939f          push tosh
003aa4 938f          push tosl
003aa5 0f8e          add tosl, zl
003aa6 1f9f          adc tosh, zh
003aa7 cd5c          jmp_ DO_NEXT
                 .include "words/doplusloop.asm"
                 
                 ; System
                 ; runtime of +loop
                 ;VE_DOPLUSLOOP:
                 ;    .dw $ff07
                 ;    .db "(+loop)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOPLUSLOOP
                 XT_DOPLUSLOOP:
003aa8 3aa9          .dw PFA_DOPLUSLOOP
                 PFA_DOPLUSLOOP:
003aa9 91ef          pop zl
003aaa 91ff          pop zh
003aab 0fe8          add zl, tosl
003aac 1ff9          adc zh, tosh
003aad 9189
003aae 9199          loadtos
003aaf f01b          brvs PFA_DOPLUSLOOP_LEAVE
                     ; next cycle
                 PFA_DOPLUSLOOP_NEXT:
                     ; next iteration
003ab0 93ff          push zh
003ab1 93ef          push zl
003ab2 cd77          rjmp PFA_DOBRANCH ; read next cell from dictionary and jump to its destination
                 PFA_DOPLUSLOOP_LEAVE:
003ab3 910f          pop  temp0
003ab4 911f          pop  temp1  ; remove limit
003ab5 9611          adiw xl, 1  ; skip branch-back address
003ab6 cd4d          jmp_ DO_NEXT
                 .include "words/doloop.asm"
                 
                 ; System
                 ; runtime of loop
                 ;VE_DOLOOP:
                 ;    .dw $ff06
                 ;    .db "(loop)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOLOOP
                 XT_DOLOOP:
003ab7 3ab8          .dw PFA_DOLOOP
                 PFA_DOLOOP:
003ab8 91ef          pop zl
003ab9 91ff          pop zh
003aba 9631          adiw zl,1
003abb f3bb          brvs PFA_DOPLUSLOOP_LEAVE
003abc cff3          jmp_ PFA_DOPLUSLOOP_NEXT
                 .include "words/unloop.asm"
                 
                 ; Compiler
                 ; remove loop-sys, exit the loop and continue execution after it
                 VE_UNLOOP:
003abd ff06          .dw $ff06
003abe 6e75
003abf 6f6c
003ac0 706f          .db "unloop"
003ac1 3a97          .dw VE_HEAD
                     .set VE_HEAD = VE_UNLOOP
                 XT_UNLOOP:
003ac2 3ac3          .dw PFA_UNLOOP
                 PFA_UNLOOP:
003ac3 911f          pop temp1
003ac4 910f          pop temp0
003ac5 911f          pop temp1
003ac6 910f          pop temp0
003ac7 cd3c          jmp_ DO_NEXT
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
                 .include "words/cmove_g.asm"
                 
                 ; Memory
                 ; copy data in RAM from higher to lower addresses.
                 VE_CMOVE_G:
003ac8 ff06          .dw $ff06
003ac9 6d63
003aca 766f
003acb 3e65          .db "cmove>"
003acc 3abd          .dw VE_HEAD
                     .set VE_HEAD  = VE_CMOVE_G
                 XT_CMOVE_G:
003acd 3ace          .dw PFA_CMOVE_G
                 PFA_CMOVE_G:
003ace 93bf          push xh
003acf 93af          push xl
003ad0 91e9          ld zl, Y+
003ad1 91f9          ld zh, Y+ ; addr-to
003ad2 91a9          ld xl, Y+
003ad3 91b9          ld xh, Y+ ; addr-from
003ad4 2f09          mov temp0, tosh
003ad5 2b08          or temp0, tosl
003ad6 f041          brbs 1, PFA_CMOVE_G1
003ad7 0fe8          add zl, tosl
003ad8 1ff9          adc zh, tosh
003ad9 0fa8          add xl, tosl
003ada 1fb9          adc xh, tosh
                 PFA_CMOVE_G2:
003adb 911e          ld temp1, -X
003adc 9312          st -Z, temp1
003add 9701          sbiw tosl, 1
003ade f7e1          brbc 1, PFA_CMOVE_G2
                 PFA_CMOVE_G1:
003adf 91af          pop xl
003ae0 91bf          pop xh
003ae1 9189
003ae2 9199          loadtos
003ae3 cd20          jmp_ DO_NEXT
                 .include "words/byteswap.asm"
                 
                 ; Arithmetics
                 ; exchange the bytes of the TOS
                 VE_BYTESWAP:
003ae4 ff02          .dw $ff02
003ae5 3c3e          .db "><"
003ae6 3ac8          .dw VE_HEAD
                     .set VE_HEAD = VE_BYTESWAP
                 XT_BYTESWAP:
003ae7 3ae8          .dw PFA_BYTESWAP
                 PFA_BYTESWAP:
003ae8 2f09          mov temp0, tosh
003ae9 2f98          mov tosh, tosl
003aea 2f80          mov tosl, temp0
003aeb cd18          jmp_ DO_NEXT
                 .include "words/up.asm"
                 
                 ; System Variable
                 ; get user area pointer
                 VE_UP_FETCH:
003aec ff03          .dw $ff03
003aed 7075
003aee 0040          .db "up@",0
003aef 3ae4          .dw VE_HEAD
                     .set VE_HEAD = VE_UP_FETCH
                 XT_UP_FETCH:
003af0 3af1          .dw PFA_UP_FETCH
                 PFA_UP_FETCH:
003af1 939a
003af2 938a          savetos
003af3 01c2          movw tosl, upl
003af4 cd0f          jmp_ DO_NEXT
                 
                 ; ( addr -- ) 
                 ; System Variable
                 ; set user area pointer
                 VE_UP_STORE:
003af5 ff03          .dw $ff03
003af6 7075
003af7 0021          .db "up!",0
003af8 3aec          .dw VE_HEAD
                     .set VE_HEAD = VE_UP_STORE
                 XT_UP_STORE:
003af9 3afa          .dw PFA_UP_STORE
                 PFA_UP_STORE:
003afa 012c          movw upl, tosl
003afb 9189
003afc 9199          loadtos
003afd cd06          jmp_ DO_NEXT
                 .include "words/1ms.asm"
                 
                 ; Time
                 ; busy waits (almost) exactly 1 millisecond
                 VE_1MS:
003afe ff03          .dw $ff03
003aff 6d31
003b00 0073          .db "1ms",0
003b01 3af5          .dw VE_HEAD
                     .set VE_HEAD = VE_1MS
                 XT_1MS:
003b02 3b03          .dw PFA_1MS
                 PFA_1MS:
003b03 eae0
003b04 e0ff
003b05 9731
003b06 f7f1          delay 1000
003b07 ccfc          jmp_ DO_NEXT
                 .include "words/2to_r.asm"
                 
                 ; Stack
                 ; move DTOS to TOR
                 VE_2TO_R:
003b08 ff03          .dw $ff03
003b09 3e32
003b0a 0072          .db "2>r",0
003b0b 3afe          .dw VE_HEAD
                     .set VE_HEAD = VE_2TO_R
                 XT_2TO_R:
003b0c 3b0d          .dw PFA_2TO_R
                 PFA_2TO_R:
003b0d 01fc          movw zl, tosl
003b0e 9189
003b0f 9199          loadtos
003b10 939f          push tosh
003b11 938f          push tosl
003b12 93ff          push zh
003b13 93ef          push zl
003b14 9189
003b15 9199          loadtos
003b16 cced          jmp_ DO_NEXT
                 .include "words/2r_from.asm"
                 
                 ; Stack
                 ; move DTOR to TOS
                 VE_2R_FROM:
003b17 ff03          .dw $ff03
003b18 7232
003b19 003e          .db "2r>",0
003b1a 3b08          .dw VE_HEAD
                     .set VE_HEAD = VE_2R_FROM
                 XT_2R_FROM:
003b1b 3b1c          .dw PFA_2R_FROM
                 PFA_2R_FROM:
003b1c 939a
003b1d 938a          savetos
003b1e 91ef          pop zl
003b1f 91ff          pop zh
003b20 918f          pop tosl
003b21 919f          pop tosh
003b22 939a
003b23 938a          savetos
003b24 01cf          movw tosl, zl
003b25 ccde          jmp_ DO_NEXT
                 
                 .include "words/store-e.asm"
                 
                 ; Memory
                 ; write n (2bytes) to eeprom address
                 VE_STOREE:
003b26 ff02          .dw $ff02
003b27 6521          .db "!e"
003b28 3b17          .dw VE_HEAD
                     .set VE_HEAD = VE_STOREE
                 XT_STOREE:
003b29 3b2a          .dw PFA_STOREE
                 PFA_STOREE:
                 .if WANT_UNIFIED == 1
                 .endif
                 PFA_STOREE0:
003b2a 01fc          movw zl, tosl
003b2b 9189
003b2c 9199          loadtos
003b2d b72f          in_ temp2, SREG
003b2e 94f8          cli
003b2f d028          rcall PFA_FETCHE2
003b30 b500          in_  temp0, EEDR
003b31 1708          cp temp0,tosl
003b32 f009          breq PFA_STOREE3
003b33 d00b          rcall PFA_STOREE1
                 PFA_STOREE3:
003b34 9631          adiw zl,1
003b35 d022          rcall PFA_FETCHE2
003b36 b500          in_  temp0, EEDR
003b37 1709          cp temp0,tosh
003b38 f011          breq PFA_STOREE4
003b39 2f89          mov tosl, tosh
003b3a d004          rcall PFA_STOREE1
                 PFA_STOREE4:
003b3b bf2f          out_ SREG, temp2
003b3c 9189
003b3d 9199          loadtos
003b3e ccc5          jmp_ DO_NEXT
                     
                 PFA_STOREE1:
003b3f 99f9          sbic EECR, EEPE
003b40 cffe          rjmp PFA_STOREE1
                 
                 PFA_STOREE2: ; estore_wait_low_spm:
003b41 b707          in_ temp0, SPMCSR
003b42 fd00          sbrc temp0,SPMEN
003b43 cffd          rjmp PFA_STOREE2
                 
003b44 bdf2          out_ EEARH,zh
003b45 bde1          out_ EEARL,zl
003b46 bd80          out_ EEDR, tosl
003b47 9afa          sbi EECR,EEMPE
003b48 9af9          sbi EECR,EEPE
                 
003b49 9508          ret
                 .if WANT_UNIFIED == 1
                 .endif
                 .include "words/fetch-e.asm"
                 
                 ; Memory
                 ; read 1 cell from eeprom
                 VE_FETCHE:
003b4a ff02          .dw $ff02
003b4b 6540          .db "@e"
003b4c 3b26          .dw VE_HEAD
                     .set VE_HEAD = VE_FETCHE
                 XT_FETCHE:
003b4d 3b4e          .dw PFA_FETCHE
                 PFA_FETCHE:
                 .if WANT_UNIFIED == 1
                 .endif
                 PFA_FETCHE1:
003b4e b72f          in_ temp2, SREG
003b4f 94f8          cli
003b50 01fc          movw zl, tosl
003b51 d006          rcall PFA_FETCHE2
003b52 b580          in_ tosl, EEDR
                 
003b53 9631          adiw zl,1
                 
003b54 d003          rcall PFA_FETCHE2
003b55 b590          in_  tosh, EEDR
003b56 bf2f          out_ SREG, temp2
003b57 ccac          jmp_ DO_NEXT
                 
                 PFA_FETCHE2:
003b58 99f9          sbic EECR, EEPE
003b59 cffe          rjmp PFA_FETCHE2
                 
003b5a bdf2          out_ EEARH,zh
003b5b bde1          out_ EEARL,zl
                 
003b5c 9af8          sbi EECR,EERE
003b5d 9508          ret
                 
                 .if WANT_UNIFIED == 1
                 .endif
                 .include "words/store-i.asm"
                 
                 ; System Value
                 ; Deferred action to write a single 16bit cell to flash
                 VE_STOREI:
003b5e ff02          .dw $ff02
003b5f 6921          .db "!i"
003b60 3b4a          .dw VE_HEAD
                     .set VE_HEAD = VE_STOREI
                 XT_STOREI:
003b61 3dd8          .dw PFA_DODEFER1
                 PFA_STOREI:
003b62 003e          .dw EE_STOREI
003b63 3d7a          .dw XT_EDEFERFETCH
003b64 3d84          .dw XT_EDEFERSTORE
                 .if FLASHEND > $10000
                 .else
                   .include "words/store-i_nrww.asm"
                 
                 ; Memory
                 ; writes n to flash memory using assembly code (code to be placed in boot loader section)
                 VE_DO_STOREI_NRWW:
003b65 ff09          .dw $ff09
003b66 2128
003b67 2d69
003b68 726e
003b69 7777
003b6a 0029          .db "(!i-nrww)",0
003b6b 3b5e          .dw VE_HEAD
                     .set VE_HEAD = VE_DO_STOREI_NRWW
                 XT_DO_STOREI:
003b6c 3b6d          .dw PFA_DO_STOREI_NRWW
                 PFA_DO_STOREI_NRWW:
                   ; store status register
003b6d b71f        in temp1,SREG
003b6e 931f        push temp1
003b6f 94f8        cli
                 
003b70 019c        movw temp2, tosl ; save the (word) address
003b71 9189
003b72 9199        loadtos          ; get the new value for the flash cell
003b73 93af        push xl
003b74 93bf        push xh
003b75 93cf        push yl
003b76 93df        push yh
003b77 d009        rcall DO_STOREI_atmega
003b78 91df        pop yh
003b79 91cf        pop yl
003b7a 91bf        pop xh
003b7b 91af        pop xl
                   ; finally clear the stack
003b7c 9189
003b7d 9199        loadtos
003b7e 911f        pop temp1
                   ; restore status register (and interrupt enable flag)
003b7f bf1f        out SREG,temp1
                 
003b80 cc83        jmp_ DO_NEXT
                 
                 ; 
                 DO_STOREI_atmega:
                   ; write data to temp page buffer
                   ; use the values in tosl/tosh at the
                   ; appropiate place
003b81 d011        rcall pageload
                 
                   ; erase page if needed
                   ; it is needed if a bit goes from 0 to 1
003b82 94e0        com temp4
003b83 94f0        com temp5
003b84 218e        and tosl, temp4
003b85 219f        and tosh, temp5
003b86 2b98        or tosh, tosl
003b87 f021        breq DO_STOREI_writepage 
003b88 94b3          inc erase_counter
003b89 01f9          movw zl, temp2
003b8a e002          ldi temp0,(1<<PGERS)
003b8b d020          rcall dospm
                 
                 DO_STOREI_writepage:
                   ; write page
003b8c 01f9        movw zl, temp2
003b8d e004        ldi temp0,(1<<PGWRT)
003b8e d01d        rcall dospm
                 
                   ; reenable RWW section
003b8f 01f9        movw zl, temp2
003b90 e100        ldi temp0,(1<<RWWSRE)
003b91 d01a        rcall dospm
003b92 9508        ret
                 
                 ; load the desired page
                 .equ pagemask = ~ ( PAGESIZE - 1 )
                 pageload:
003b93 01f9        movw zl, temp2
                   ; get the beginning of page
003b94 7ce0        andi zl,low(pagemask)
003b95 7fff        andi zh,high(pagemask)
003b96 01ef        movw y, z
                   ; loop counter (in words)
003b97 e4a0        ldi xl,low(pagesize)
003b98 e0b0        ldi xh,high(pagesize)
                 pageload_loop:
                   ; we need the current flash value anyways
003b99 01fe        movw z, y
003b9a 0fee
003b9b 1fff
003b9c 9145
003b9d 9155        readflashcell temp6, temp7 ; destroys Z
                   ; now check: if Z points to the same cell as temp2/3, we want the new data
003b9e 01fe        movw z, y
003b9f 17e2        cp zl, temp2
003ba0 07f3        cpc zh, temp3
003ba1 f011        breq pageload_newdata
003ba2 010a          movw r0, temp6
003ba3 c002          rjmp pageload_cont
                 pageload_newdata:
003ba4 017a          movw temp4, temp6
003ba5 010c          movw r0, tosl
                 pageload_cont:
003ba6 2700        clr temp0
003ba7 d004        rcall dospm
003ba8 9621        adiw y, 1
003ba9 9711        sbiw x, 1
003baa f771        brne pageload_loop
                 
                 pageload_done:
003bab 9508        ret
                 
                 
                 ;; dospm
                 ;;
                 ;; execute spm instruction
                 ;;   temp0 holds the value for SPMCR
                 
                 dospm:
                 dospm_wait_ee:
003bac 99f9        sbic EECR, EEPE
003bad cffe        rjmp dospm_wait_ee
                 dospm_wait_spm:
003bae b717        in_  temp1, SPMCSR
003baf fd10        sbrc temp1, SPMEN
003bb0 cffd        rjmp dospm_wait_spm
                 
                   ; turn the word addres into a byte address
003bb1 0fee
003bb2 1fff        writeflashcell
                   ; execute spm
003bb3 6001        ori temp0, (1<<SPMEN)
003bb4 bf07        out_ SPMCSR,temp0
003bb5 95e8        spm
003bb6 9508        ret
                 .endif
                 .include "words/fetch-i.asm"
                 
                 ; Memory
                 ; read 1 cell from flash
                 VE_FETCHI:
003bb7 ff02          .dw $ff02
003bb8 6940          .db "@i"
003bb9 3b65          .dw VE_HEAD
                     .set VE_HEAD = VE_FETCHI
                 XT_FETCHI:
003bba 3bbb          .dw PFA_FETCHI
                 PFA_FETCHI:
003bbb 01fc          movw zl, tosl
003bbc 0fee
003bbd 1fff
003bbe 9185
003bbf 9195          readflashcell tosl,tosh
003bc0 cc43          jmp_ DO_NEXT
                 
                 .if AMFORTH_NRWW_SIZE>8000
                 .elif AMFORTH_NRWW_SIZE>4000
                 .include "dict/core_4k.inc"
                 
                 ; in a short distance to DO_NEXT
                 .include "words/n_to_r.asm"
                 
                 ; Stack
                 ; move n items from data stack to return stack
                 VE_N_TO_R:
003bc1 ff03          .dw $ff03
003bc2 3e6e
003bc3 0072          .db "n>r",0
003bc4 3bb7          .dw VE_HEAD
                     .set VE_HEAD = VE_N_TO_R
                 XT_N_TO_R:
003bc5 3bc6          .dw PFA_N_TO_R
                 PFA_N_TO_R:
003bc6 01fc          movw zl, tosl
003bc7 2f08          mov  temp0, tosl
                 PFA_N_TO_R1:
003bc8 9189
003bc9 9199          loadtos
003bca 939f          push tosh
003bcb 938f          push tosl
003bcc 950a          dec temp0
003bcd f7d1          brne PFA_N_TO_R1
003bce 93ef          push zl
003bcf 93ff          push zh
003bd0 9189
003bd1 9199          loadtos
003bd2 cc31          jmp_ DO_NEXT
                 .include "words/n_r_from.asm"
                 
                 ; Stack
                 ; move n items from return stack to data stack
                 VE_N_R_FROM:
003bd3 ff03          .dw $ff03
003bd4 726e
003bd5 003e          .db "nr>",0
003bd6 3bc1          .dw VE_HEAD
                     .set VE_HEAD = VE_N_R_FROM
                 XT_N_R_FROM:
003bd7 3bd8          .dw PFA_N_R_FROM
                 PFA_N_R_FROM:
003bd8 939a
003bd9 938a          savetos
003bda 91ff          pop zh
003bdb 91ef          pop zl
003bdc 2f0e          mov  temp0, zl
                 PFA_N_R_FROM1:
003bdd 918f          pop tosl
003bde 919f          pop tosh
003bdf 939a
003be0 938a          savetos
003be1 950a          dec temp0
003be2 f7d1          brne PFA_N_R_FROM1
003be3 01cf          movw tosl, zl
003be4 cc1f          jmp_ DO_NEXT
                 .include "words/d-2star.asm"
                 
                 ; Arithmetics
                 ; shift a double cell left
                 VE_D2STAR:
003be5 ff03          .dw $ff03
003be6 3264
003be7 002a          .db "d2*",0
003be8 3bd3          .dw VE_HEAD
                     .set VE_HEAD = VE_D2STAR
                 XT_D2STAR:
003be9 3bea          .dw PFA_D2STAR
                 PFA_D2STAR:
003bea 9109          ld temp0, Y+
003beb 9119          ld temp1, Y+
003bec 0f00          lsl temp0
003bed 1f11          rol temp1
003bee 1f88          rol tosl
003bef 1f99          rol tosh
003bf0 931a          st -Y, temp1
003bf1 930a          st -Y, temp0
003bf2 cc11          jmp_ DO_NEXT
                 .include "words/d-2slash.asm"
                 
                 ; Arithmetics
                 ; shift a double cell value right
                 VE_D2SLASH:
003bf3 ff03          .dw $ff03
003bf4 3264
003bf5 002f          .db "d2/",0
003bf6 3be5          .dw VE_HEAD
                     .set VE_HEAD = VE_D2SLASH
                 XT_D2SLASH:
003bf7 3bf8          .dw PFA_D2SLASH
                 PFA_D2SLASH:
003bf8 9109          ld temp0, Y+
003bf9 9119          ld temp1, Y+
003bfa 9595          asr tosh
003bfb 9587          ror tosl
003bfc 9517          ror temp1
003bfd 9507          ror temp0
003bfe 931a          st -Y, temp1
003bff 930a          st -Y, temp0
003c00 cc03          jmp_ DO_NEXT
                 .include "words/d-plus.asm"
                 
                 ; Arithmetics
                 ; add 2 double cell values
                 VE_DPLUS:
003c01 ff02          .dw $ff02
003c02 2b64          .db "d+"
003c03 3bf3          .dw VE_HEAD
                     .set VE_HEAD = VE_DPLUS
                 XT_DPLUS:
003c04 3c05          .dw PFA_DPLUS
                 PFA_DPLUS:
003c05 9129          ld temp2, Y+
003c06 9139          ld temp3, Y+
                 
003c07 90e9          ld temp4, Y+
003c08 90f9          ld temp5, Y+
003c09 9149          ld temp6, Y+
003c0a 9159          ld temp7, Y+
                 
003c0b 0f24          add temp2, temp6
003c0c 1f35          adc temp3, temp7
003c0d 1d8e          adc tosl, temp4
003c0e 1d9f          adc tosh, temp5
                     
003c0f 933a          st -Y, temp3
003c10 932a          st -Y, temp2
003c11 cbf2          jmp_ DO_NEXT
                 .include "words/d-minus.asm"
                 
                 ; Arithmetics
                 ; subtract d2 from d1 
                 VE_DMINUS:
003c12 ff02          .dw $ff02
003c13 2d64          .db "d-"
003c14 3c01          .dw VE_HEAD
                     .set VE_HEAD = VE_DMINUS
                 XT_DMINUS:
003c15 3c16          .dw PFA_DMINUS
                 PFA_DMINUS:
003c16 9129          ld temp2, Y+
003c17 9139          ld temp3, Y+
                 
003c18 90e9          ld temp4, Y+
003c19 90f9          ld temp5, Y+
003c1a 9149          ld temp6, Y+
003c1b 9159          ld temp7, Y+
                 
003c1c 1b42          sub temp6, temp2
003c1d 0b53          sbc temp7, temp3
003c1e 0ae8          sbc temp4, tosl
003c1f 0af9          sbc temp5, tosh
                 
003c20 935a          st -Y, temp7
003c21 934a          st -Y, temp6
003c22 01c7          movw tosl, temp4
003c23 cbe0          jmp_ DO_NEXT
                 .include "words/d-invert.asm"
                 
                 ; Arithmetics
                 ; invert all bits in the double cell value
                 VE_DINVERT:
003c24 ff07          .dw $ff07
003c25 6964
003c26 766e
003c27 7265
003c28 0074          .db "dinvert",0
003c29 3c12          .dw VE_HEAD
                     .set VE_HEAD = VE_DINVERT
                 XT_DINVERT:
003c2a 3c2b          .dw PFA_DINVERT
                 PFA_DINVERT:
003c2b 9109          ld temp0, Y+
003c2c 9119          ld temp1, Y+
003c2d 9580          com tosl
003c2e 9590          com tosh
003c2f 9500          com temp0
003c30 9510          com temp1
003c31 931a          st -Y, temp1
003c32 930a          st -Y, temp0
003c33 cbd0          jmp_ DO_NEXT
                 .include "words/slashmod.asm"
                 
                 ; Arithmetics
                 ; signed division n1/n2 with remainder and quotient
                 VE_SLASHMOD:
003c34 ff04          .dw $ff04
003c35 6d2f
003c36 646f          .db "/mod"
003c37 3c24          .dw VE_HEAD
                     .set VE_HEAD = VE_SLASHMOD
                 XT_SLASHMOD:
003c38 3c39          .dw PFA_SLASHMOD
                 PFA_SLASHMOD:
003c39 019c          movw temp2, tosl
                     
003c3a 9109          ld temp0, Y+
003c3b 9119          ld temp1, Y+
                 
003c3c 2f41          mov	temp6,temp1	;move dividend High to sign register
003c3d 2743          eor	temp6,temp3	;xor divisor High with sign register
003c3e ff17          sbrs	temp1,7	;if MSB in dividend set
003c3f c004          rjmp	PFA_SLASHMOD_1
003c40 9510          com	temp1		;    change sign of dividend
003c41 9500          com	temp0		
003c42 5f0f          subi	temp0,low(-1)
003c43 4f1f          sbci	temp1,high(-1)
                 PFA_SLASHMOD_1:	
003c44 ff37          sbrs	temp3,7	;if MSB in divisor set
003c45 c004          rjmp	PFA_SLASHMOD_2
003c46 9530          com	temp3		;    change sign of divisor
003c47 9520          com	temp2		
003c48 5f2f          subi	temp2,low(-1)
003c49 4f3f          sbci	temp3,high(-1)
003c4a 24ee      PFA_SLASHMOD_2:	clr	temp4	;clear remainder Low byte
003c4b 18ff          sub	temp5,temp5;clear remainder High byte and carry
003c4c e151          ldi	temp7,17	;init loop counter
                 
003c4d 1f00      PFA_SLASHMOD_3:	rol	temp0		;shift left dividend
003c4e 1f11          rol	temp1
003c4f 955a          dec	temp7		;decrement counter
003c50 f439          brne	PFA_SLASHMOD_5		;if done
003c51 ff47          sbrs	temp6,7		;    if MSB in sign register set
003c52 c004          rjmp	PFA_SLASHMOD_4
003c53 9510          com	temp1	;        change sign of result
003c54 9500          com	temp0
003c55 5f0f          subi	temp0,low(-1)
003c56 4f1f          sbci	temp1,high(-1)
003c57 c00b      PFA_SLASHMOD_4:	rjmp PFA_SLASHMODmod_done			;    return
003c58 1cee      PFA_SLASHMOD_5:	rol	temp4	;shift dividend into remainder
003c59 1cff          rol	temp5
003c5a 1ae2          sub	temp4,temp2	;remainder = remainder - divisor
003c5b 0af3          sbc	temp5,temp3	;
003c5c f420          brcc	PFA_SLASHMOD_6		;if result negative
003c5d 0ee2          add	temp4,temp2	;    restore remainder
003c5e 1ef3          adc	temp5,temp3
003c5f 9488          clc			;    clear carry to be shifted into result
003c60 cfec          rjmp	PFA_SLASHMOD_3		;else
003c61 9408      PFA_SLASHMOD_6:	sec			;    set carry to be shifted into result
003c62 cfea          rjmp	PFA_SLASHMOD_3
                 
                 PFA_SLASHMODmod_done:
                     ; put remainder on stack
003c63 92fa          st -Y,temp5
003c64 92ea          st -Y,temp4
                 
                     ; put quotient on stack
003c65 01c8          movw tosl, temp0
003c66 cb9d          jmp_ DO_NEXT
                 .include "words/abs.asm"
                 
                 ; Arithmetics
                 ; get the absolute value
                 VE_ABS:
003c67 ff03          .dw $ff03
003c68 6261
003c69 0073          .db "abs",0
003c6a 3c34          .dw VE_HEAD
                     .set VE_HEAD = VE_ABS
                 XT_ABS:
003c6b 3c6c          .dw PFA_ABS
                 PFA_ABS:
003c6c 2399          tst tosh
003c6d f41a          brpl PFA_ABS1
003c6e 9580          com tosl
003c6f 9590          com tosh
003c70 9601          adiw tosl, 1
                 PFA_ABS1:
003c71 cb92          jmp_ do_next
                 .include "words/pick.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_PICK:
003c72 ff04          .dw $ff04
003c73 6970
003c74 6b63          .db "pick"
003c75 3c67          .dw VE_HEAD
                     .set VE_HEAD = VE_PICK
                 XT_PICK:
003c76 3800          .dw DO_COLON
                 PFA_PICK:
                 .endif
003c77 3a29          .dw XT_1PLUS
003c78 3ea5          .dw XT_CELLS
003c79 3a7b          .dw XT_SP_FETCH
003c7a 3997          .dw XT_PLUS
003c7b 3873          .dw XT_FETCH
003c7c 381a          .dw XT_EXIT
                 .include "words/cellplus.asm"
                 
                 ; Arithmetics
                 ; add the size of an address-unit to a-addr1
                 VE_CELLPLUS:
003c7d ff05          .dw $ff05
003c7e 6563
003c7f 6c6c
003c80 002b          .db "cell+",0
003c81 3c72          .dw VE_HEAD
                     .set VE_HEAD = VE_CELLPLUS
                 XT_CELLPLUS:
003c82 3c83          .dw PFA_CELLPLUS
                 PFA_CELLPLUS:
003c83 9602          adiw tosl, CELLSIZE
003c84 cb7f          jmp_ DO_NEXT
                 .include "dict/interrupt.inc"
                 
                 .include "words/int-on.asm"
                 
                 ; Interrupt
                 ; turns on all interrupts
                 VE_INTON:
003c85 ff04          .dw $ff04
003c86 692b
003c87 746e          .db "+int"
003c88 3c7d          .dw VE_HEAD
                     .set VE_HEAD = VE_INTON
                 XT_INTON:
003c89 3c8a          .dw PFA_INTON
                 PFA_INTON:
003c8a 9478          sei
003c8b cb78          jmp_ DO_NEXT
                 .include "words/int-off.asm"
                 
                 ; Interrupt
                 ; turns off all interrupts 
                 VE_INTOFF:
003c8c ff04          .dw $ff04
003c8d 692d
003c8e 746e          .db "-int"
003c8f 3c85          .dw VE_HEAD
                     .set VE_HEAD = VE_INTOFF
                 XT_INTOFF:
003c90 3c91          .dw PFA_INTOFF
                 PFA_INTOFF:
003c91 94f8          cli
003c92 cb71          jmp_ DO_NEXT
                 .include "words/int-store.asm"
                 
                 ; Interrupt
                 ; stores XT as interrupt vector i
                 VE_INTSTORE:
003c93 ff04          .dw $ff04
003c94 6e69
003c95 2174          .db "int!"
003c96 3c8c          .dw VE_HEAD
                     .set VE_HEAD = VE_INTSTORE
                 XT_INTSTORE:
003c97 3800          .dw DO_COLON
                 PFA_INTSTORE:
003c98 3837          .dw XT_DOLITERAL
003c99 0000          .dw intvec
003c9a 3997          .dw XT_PLUS
003c9b 3b29          .dw XT_STOREE
003c9c 381a          .dw XT_EXIT
                 .include "words/int-fetch.asm"
                 
                 ; Interrupt
                 ; fetches XT from interrupt vector i
                 VE_INTFETCH:
003c9d ff04          .dw $ff04
003c9e 6e69
003c9f 4074          .db "int@"
003ca0 3c93          .dw VE_HEAD
                     .set VE_HEAD = VE_INTFETCH
                 XT_INTFETCH:
003ca1 3800          .dw DO_COLON
                 PFA_INTFETCH:
003ca2 3837          .dw XT_DOLITERAL
003ca3 0000          .dw intvec
003ca4 3997          .dw XT_PLUS
003ca5 3b4d          .dw XT_FETCHE
003ca6 381a          .dw XT_EXIT
                 .include "words/int-trap.asm"
                 
                 ; Interrupt
                 ; trigger an interrupt
                 VE_INTTRAP:
003ca7 ff08          .dw $ff08
003ca8 6e69
003ca9 2d74
003caa 7274
003cab 7061          .db "int-trap"
003cac 3c9d          .dw VE_HEAD
                     .set VE_HEAD = VE_INTTRAP
                 XT_INTTRAP:
003cad 3cae          .dw PFA_INTTRAP
                 PFA_INTTRAP:
003cae 9380 0116     sts intcur, tosl
003cb0 9189
003cb1 9199          loadtos
003cb2 9468          set ; set the interrupt flag for the inner interpreter
003cb3 cb50          jmp_ DO_NEXT
                 
                 .include "words/isr-exec.asm"
                 
                 ; Interrupt
                 ; executes an interrupt service routine
                 ;VE_ISREXEC:
                 ;    .dw $ff08
                 ;    .db "isr-exec"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_ISREXEC
                 XT_ISREXEC:
003cb4 3800          .dw DO_COLON
                 PFA_ISREXEC:
003cb5 3837          .dw XT_DOLITERAL
003cb6 0116          .dw intcur
003cb7 3892          .dw XT_CFETCH
003cb8 3837          .dw XT_DOLITERAL
003cb9 0000          .dw intvec
003cba 3997          .dw XT_PLUS
003cbb 3b4d          .dw XT_FETCHE
003cbc 3824          .dw XT_EXECUTE
003cbd 3cbf          .dw XT_ISREND
003cbe 381a          .dw XT_EXIT
                 .include "words/isr-end.asm"
                 
                 ; Interrupt
                 ; re-enables interrupts in an ISR
                 ;VE_ISREND:
                 ;    .dw $ff07
                 ;    .db "isr-end",0
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_ISREND
                 XT_ISREND:
003cbf 3cc0          .dw PFA_ISREND
                 PFA_ISREND:
003cc0 d001          rcall PFA_ISREND1 ; clear the interrupt flag for the controller
003cc1 cb42          jmp_ DO_NEXT
                 PFA_ISREND1:
003cc2 9518          reti
                 
                 ; now the relocatable colon words
                 .include "words/prompt-ok.asm"
                 
                 ; System
                 ; send the READY prompt to the command line
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 ;VE_PROMPTOK:
                 ;    .dw $ff02
                 ;    .db "ok"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_PROMPTOK
                 XT_PROMPTOK:
003cc3 3800          .dw DO_COLON
                 PFA_PROMPTOK:
003cc4 036d          .dw XT_DOSLITERAL
003cc5 0003          .dw 3
003cc6 6f20
003cc7 006b          .db " ok",0
                 .endif
003cc8 03a0          .dw XT_ITYPE
003cc9 381a          .dw XT_EXIT
                 .include "words/prompt-ready.asm"
                 
                 ; System
                 ; process the error prompt
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 ;VE_PROMPTRDY:
                 ;    .dw $ff04
                 ;    .db "p_er"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_PROMPTRDY
                 XT_PROMPTREADY:
003cca 3800          .dw DO_COLON
                 PFA_PROMPTREADY:
003ccb 036d          .dw XT_DOSLITERAL
003ccc 0002          .dw 2
003ccd 203e          .db "> "
                 .endif
003cce 3f89          .dw XT_CR
003ccf 03a0          .dw XT_ITYPE
003cd0 381a          .dw XT_EXIT
                 .include "words/prompt-error.asm"
                 
                 ; System
                 ; process the error prompt
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 ;VE_PROMPTERROR:
                 ;    .dw $ff04
                 ;    .db "p_er"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_PROMPTERROR
                 XT_PROMPTERROR:
003cd1 3800          .dw DO_COLON
                 PFA_PROMPTERROR:
003cd2 036d      	.dw XT_DOSLITERAL
003cd3 0004          .dw 4
003cd4 3f20
003cd5 203f          .db " ?? "
                 .endif
003cd6 03a0          .dw XT_ITYPE
003cd7 3e9e          .dw XT_BASE
003cd8 3873          .dw XT_FETCH
003cd9 38f9          .dw XT_TO_R
003cda 3f29          .dw XT_DECIMAL
003cdb 0322          .dw XT_DOT
003cdc 3ec3          .dw XT_TO_IN
003cdd 3873          .dw XT_FETCH
003cde 0322          .dw XT_DOT
003cdf 38f0          .dw XT_R_FROM
003ce0 3e9e          .dw XT_BASE
003ce1 387b          .dw XT_STORE
003ce2 381a          .dw XT_EXIT
                 
                 .include "words/quit.asm"
                 
                 ; System
                 ; main loop of amforth. accept - interpret in an endless loop
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_QUIT:
003ce3 ff04          .dw $ff04
003ce4 7571
003ce5 7469          .db "quit"
003ce6 3ca7          .dw VE_HEAD
                     .set VE_HEAD = VE_QUIT
                 XT_QUIT:
003ce7 3800          .dw DO_COLON
                 PFA_QUIT:
                 .endif
                 PFA_QUIT1:
003ce8 07f4
003ce9 07fb
003cea 387b          .dw XT_LP0,XT_LP,XT_STORE
003ceb 0569          .dw XT_SP0
003cec 3a84          .dw XT_SP_STORE
003ced 0576          .dw XT_RP0
003cee 3a6e          .dw XT_RP_STORE
003cef 0896          .dw XT_LBRACKET
                 
                 PFA_QUIT2:
003cf0 3e98          .dw XT_STATE
003cf1 3873          .dw XT_FETCH
003cf2 3914          .dw XT_ZEROEQUAL
003cf3 3830          .dw XT_DOCONDBRANCH
003cf4 3cf6          DEST(PFA_QUIT4)
003cf5 3cca          .dw XT_PROMPTREADY
                 PFA_QUIT4:
003cf6 0476          .dw XT_REFILL
003cf7 3830          .dw XT_DOCONDBRANCH
003cf8 3cf0          DEST(PFA_QUIT2)
003cf9 3837          .dw XT_DOLITERAL
003cfa 05b9          .dw XT_INTERPRET
003cfb 3d4a          .dw XT_CATCH
003cfc 38b3          .dw XT_QDUP
003cfd 3830          .dw XT_DOCONDBRANCH
003cfe 3d08          DEST(PFA_QUIT3)
003cff 38ab      	.dw XT_DUP
003d00 3837      	.dw XT_DOLITERAL
003d01 fffe      	.dw -2
003d02 3968      	.dw XT_LESS
003d03 3830      	.dw XT_DOCONDBRANCH
003d04 3d06      	DEST(PFA_QUIT5)
003d05 3cd1      	.dw XT_PROMPTERROR
                 PFA_QUIT5:
003d06 3829      	.dw XT_DOBRANCH
003d07 3ce8      	DEST(PFA_QUIT1)
                 PFA_QUIT3:
003d08 3cc3          .dw XT_PROMPTOK
003d09 3829          .dw XT_DOBRANCH
003d0a 3cf0          DEST(PFA_QUIT2)
003d0b 381a          .dw XT_EXIT ; never reached
                 
                 .include "words/pause.asm"
                 
                 ; Multitasking
                 ; Fetch pause vector and execute it. may make a context/task switch
                 VE_PAUSE:
003d0c ff05          .dw $ff05
003d0d 6170
003d0e 7375
003d0f 0065          .db "pause",0
003d10 3ce3          .dw VE_HEAD
                     .set VE_HEAD = VE_PAUSE
                 XT_PAUSE:
003d11 3dd8          .dw PFA_DODEFER1
                 PFA_PAUSE:
003d12 017b          .dw ram_pause
003d13 3d8e          .dw XT_RDEFERFETCH
003d14 3d98          .dw XT_RDEFERSTORE
                 
                 .dseg
00017b           ram_pause: .byte 2
                 .cseg
                 .include "words/cold.asm"
                 
                 ; System
                 ; start up amforth.
                 VE_COLD:
003d15 ff04          .dw $ff04
003d16 6f63
003d17 646c          .db "cold"
003d18 3d0c          .dw VE_HEAD
                     .set VE_HEAD = VE_COLD
                 XT_COLD:
003d19 3d1a          .dw PFA_COLD
                 PFA_COLD:
003d1a b6a4          in_ mcu_boot, MCUSR
003d1b 2422          clr zerol
003d1c 2433          clr zeroh
003d1d be24          out_ MCUSR, zerol
                     ; init first user data area
                     ; allocate space for User Area
                 .dseg
00017d           ram_user1: .byte SYSUSERSIZE + APPUSERSIZE
                 .cseg
003d1e e7ed          ldi zl, low(ram_user1)
003d1f e0f1          ldi zh, high(ram_user1)
003d20 012f          movw upl, zl
                     ; init return stack pointer
003d21 ef0f          ldi temp0,low(rstackstart)
003d22 bf0d          out_ SPL,temp0
003d23 8304          std Z+4, temp0
003d24 e018          ldi temp1,high(rstackstart)
003d25 bf1e          out_ SPH,temp1
003d26 8315          std Z+5, temp1
                 
                     ; init parameter stack pointer
003d27 eacf          ldi yl,low(stackstart)
003d28 83c6          std Z+6, yl
003d29 e0d8          ldi yh,high(stackstart)
003d2a 83d7          std Z+7, yh
                 
                     ; load Forth IP with starting word
003d2b e3a3          ldi XL, low(PFA_WARM)
003d2c e3bd          ldi XH, high(PFA_WARM)
                     ; its a far jump...
003d2d cad6          jmp_ DO_NEXT
                 .include "words/warm.asm"
                 
                 ; System
                 ; initialize amforth further. executes turnkey operation and go to quit
                 VE_WARM:
003d2e ff04          .dw $ff04
003d2f 6177
003d30 6d72          .db "warm"
003d31 3d15          .dw VE_HEAD
                     .set VE_HEAD = VE_WARM
                 XT_WARM:
003d32 3800          .dw DO_COLON
                 PFA_WARM:
003d33 023f          .dw XT_INITUSER
003d34 3837          .dw XT_DOLITERAL
003d35 013d          .dw XT_NOOP
003d36 3837          .dw XT_DOLITERAL
003d37 3d11          .dw XT_PAUSE
003d38 3db9          .dw XT_DEFERSTORE
003d39 0896          .dw XT_LBRACKET
003d3a 3f44          .dw XT_TURNKEY
003d3b 3ce7          .dw XT_QUIT
003d3c 381a          .dw XT_EXIT
                 
                 .include "words/handler.asm"
                 
                 ; Exceptions
                 ; USER variable used by catch/throw
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_HANDLER:
003d3d ff07          .dw $ff07
003d3e 6168
003d3f 646e
003d40 656c
003d41 0072          .db "handler",0
003d42 3d2e          .dw VE_HEAD
                     .set VE_HEAD = VE_HANDLER
                 XT_HANDLER:
003d43 3852          .dw PFA_DOUSER
                 PFA_HANDLER:
                 .endif
003d44 000a          .dw USER_HANDLER
                 .include "words/catch.asm"
                 
                 ; Exceptions
                 ; execute XT and check for exceptions.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_CATCH:
003d45 ff05          .dw $ff05
003d46 6163
003d47 6374
003d48 0068          .db "catch",0
003d49 3d3d          .dw VE_HEAD
                     .set VE_HEAD = VE_CATCH
                 XT_CATCH:
003d4a 3800          .dw DO_COLON
                 PFA_CATCH:
                 .endif
                 
                     ; sp@ >r
003d4b 3a7b          .dw XT_SP_FETCH
003d4c 38f9          .dw XT_TO_R
                     ; handler @ >r
003d4d 3d43          .dw XT_HANDLER
003d4e 3873          .dw XT_FETCH
003d4f 38f9          .dw XT_TO_R
                     ; rp@ handler !
003d50 3a64          .dw XT_RP_FETCH
003d51 3d43          .dw XT_HANDLER
003d52 387b          .dw XT_STORE
003d53 3824          .dw XT_EXECUTE
                     ; r> handler !
003d54 38f0          .dw XT_R_FROM
003d55 3d43          .dw XT_HANDLER
003d56 387b          .dw XT_STORE
003d57 38f0          .dw XT_R_FROM
003d58 38d3          .dw XT_DROP
003d59 394e          .dw XT_ZERO
003d5a 381a          .dw XT_EXIT
                 .include "words/throw.asm"
                 
                 ; Exceptions
                 ; throw an exception
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_THROW:
003d5b ff05          .dw $ff05
003d5c 6874
003d5d 6f72
003d5e 0077          .db "throw",0
003d5f 3d45          .dw VE_HEAD
                     .set VE_HEAD = VE_THROW
                 XT_THROW:
003d60 3800          .dw DO_COLON
                 PFA_THROW:
                 .endif
003d61 38ab          .dw XT_DUP
003d62 3914          .dw XT_ZEROEQUAL
003d63 3830          .dw XT_DOCONDBRANCH
003d64 3d67          DEST(PFA_THROW1)
003d65 38d3      	.dw XT_DROP
003d66 381a      	.dw XT_EXIT
                 PFA_THROW1:
003d67 3d43          .dw XT_HANDLER
003d68 3873          .dw XT_FETCH
003d69 3a6e          .dw XT_RP_STORE
003d6a 38f0          .dw XT_R_FROM
003d6b 3d43          .dw XT_HANDLER
003d6c 387b          .dw XT_STORE
003d6d 38f0          .dw XT_R_FROM
003d6e 38be          .dw XT_SWAP
003d6f 38f9          .dw XT_TO_R
003d70 3a84          .dw XT_SP_STORE
003d71 38d3          .dw XT_DROP
003d72 38f0          .dw XT_R_FROM    
003d73 381a          .dw XT_EXIT
                 
                 
                 
                 .include "words/edefer-fetch.asm"
                 
                 ; System
                 ; does the real defer@ for eeprom defers
                 VE_EDEFERFETCH:
003d74 ff07          .dw $ff07
003d75 6445
003d76 6665
003d77 7265
003d78 0040          .db "Edefer@",0
003d79 3d5b          .dw VE_HEAD
                     .set VE_HEAD = VE_EDEFERFETCH
                 XT_EDEFERFETCH:
003d7a 3800          .dw DO_COLON
                 PFA_EDEFERFETCH:
003d7b 3bba          .dw XT_FETCHI
003d7c 3b4d          .dw XT_FETCHE
003d7d 381a          .dw XT_EXIT
                 .include "words/edefer-store.asm"
                 
                 ; System
                 ; does the real defer! for eeprom defers
                 VE_EDEFERSTORE:
003d7e ff07          .dw $ff07
003d7f 6445
003d80 6665
003d81 7265
003d82 0021          .db "Edefer!",0
003d83 3d74          .dw VE_HEAD
                     .set VE_HEAD = VE_EDEFERSTORE
                 XT_EDEFERSTORE:
003d84 3800          .dw DO_COLON
                 PFA_EDEFERSTORE:
003d85 3bba          .dw XT_FETCHI
003d86 3b29          .dw XT_STOREE
003d87 381a          .dw XT_EXIT
                 .include "words/rdefer-fetch.asm"
                 
                 ; System
                 ; The defer@ for ram defers
                 VE_RDEFERFETCH:
003d88 ff07          .dw $ff07
003d89 6452
003d8a 6665
003d8b 7265
003d8c 0040          .db "Rdefer@",0
003d8d 3d7e          .dw VE_HEAD
                     .set VE_HEAD = VE_RDEFERFETCH
                 XT_RDEFERFETCH:
003d8e 3800          .dw DO_COLON
                 PFA_RDEFERFETCH:
003d8f 3bba          .dw XT_FETCHI
003d90 3873          .dw XT_FETCH
003d91 381a          .dw XT_EXIT
                 .include "words/rdefer-store.asm"
                 
                 ; System
                 ; The defer! for ram defers
                 VE_RDEFERSTORE:
003d92 ff07          .dw $ff07
003d93 6452
003d94 6665
003d95 7265
003d96 0021          .db "Rdefer!",0
003d97 3d88          .dw VE_HEAD
                     .set VE_HEAD = VE_RDEFERSTORE
                 XT_RDEFERSTORE:
003d98 3800          .dw DO_COLON
                 PFA_RDEFERSTORE:
003d99 3bba          .dw XT_FETCHI
003d9a 387b          .dw XT_STORE
003d9b 381a          .dw XT_EXIT
                 
                 .include "words/udefer-fetch.asm"
                 
                 ; System
                 ; does the real defer@ for user based defers
                 VE_UDEFERFETCH:
003d9c ff07          .dw $ff07
003d9d 6455
003d9e 6665
003d9f 7265
003da0 0040          .db "Udefer@",0
003da1 3d92          .dw VE_HEAD
                     .set VE_HEAD = VE_UDEFERFETCH
                 XT_UDEFERFETCH:
003da2 3800          .dw DO_COLON
                 PFA_UDEFERFETCH:
003da3 3bba          .dw XT_FETCHI
003da4 3af0          .dw XT_UP_FETCH
003da5 3997          .dw XT_PLUS
003da6 3873          .dw XT_FETCH
003da7 381a          .dw XT_EXIT
                 .include "words/udefer-store.asm"
                 
                 ; System
                 ; does the real defer! for user based defers
                 VE_UDEFERSTORE:
003da8 ff07          .dw $ff07
003da9 6455
003daa 6665
003dab 7265
003dac 0021          .db "Udefer!",0
003dad 3d9c          .dw VE_HEAD
                     .set VE_HEAD = VE_UDEFERSTORE
                 XT_UDEFERSTORE:
003dae 3800          .dw DO_COLON
                 PFA_UDEFERSTORE:
003daf 3bba          .dw XT_FETCHI
003db0 3af0          .dw XT_UP_FETCH
003db1 3997          .dw XT_PLUS
003db2 387b          .dw XT_STORE
003db3 381a          .dw XT_EXIT
                 
                 .include "words/defer-store.asm"
                 
                 ; System
                 ; stores xt1 as the xt to be executed when xt2 is called
                 VE_DEFERSTORE:
003db4 ff06          .dw $ff06
003db5 6564
003db6 6566
003db7 2172          .db "defer!"
003db8 3da8          .dw VE_HEAD
                     .set VE_HEAD = VE_DEFERSTORE
                 XT_DEFERSTORE:
003db9 3800          .dw DO_COLON
                 PFA_DEFERSTORE:
003dba 3a29          .dw XT_1PLUS
003dbb 38ab          .dw XT_DUP
003dbc 3c82          .dw XT_CELLPLUS ; 2+
003dbd 3bba          .dw XT_FETCHI
003dbe 3824          .dw XT_EXECUTE
003dbf 381a          .dw XT_EXIT
                 
                 .include "words/defer-fetch.asm"
                 
                 ; System
                 ; returns the XT associated with the given XT
                 VE_DEFERFETCH:
003dc0 ff06          .dw $ff06
003dc1 6564
003dc2 6566
003dc3 4072          .db "defer@"
003dc4 3db4          .dw VE_HEAD
                     .set VE_HEAD = VE_DEFERFETCH
                 XT_DEFERFETCH:
003dc5 3800          .dw DO_COLON
                 PFA_DEFERFETCH:
003dc6 3a29          .dw XT_1PLUS ; >body
003dc7 38ab          .dw XT_DUP
003dc8 3a29          .dw XT_1PLUS 
003dc9 3bba          .dw XT_FETCHI
003dca 3824          .dw XT_EXECUTE
003dcb 381a          .dw XT_EXIT
                 .include "words/do-defer.asm"
                 
                 ; System
                 ; runtime of defer
                 VE_DODEFER:
003dcc ff07          .dw $ff07
003dcd 6428
003dce 6665
003dcf 7265
003dd0 0029          .db "(defer)", 0
003dd1 3dc0          .dw VE_HEAD
                     .set VE_HEAD = VE_DODEFER
                 XT_DODEFER:
003dd2 3800          .dw DO_COLON
                 PFA_DODEFER:
003dd3 06c7          .dw XT_DOCREATE
003dd4 0831          .dw XT_REVEAL
003dd5 06ed          .dw XT_COMPILE
003dd6 3dd8          .dw PFA_DODEFER1
003dd7 381a          .dw XT_EXIT
                 PFA_DODEFER1:
003dd8 940e 0855     call_ DO_DODOES
003dda 38ab          .dw XT_DUP
003ddb 3a29          .dw XT_1PLUS
003ddc 3bba          .dw XT_FETCHI
003ddd 3824          .dw XT_EXECUTE 
003dde 3824          .dw XT_EXECUTE
003ddf 381a          .dw XT_EXIT
                 
                 .include "words/d-equal.asm"
                 
                 ; Compare
                 ; compares two double cell values
                 VE_DEQUAL:
003de0 ff02          .dw $ff02
003de1 3d64          .db "d="
003de2 3dcc          .dw VE_HEAD
                     .set VE_HEAD = VE_DEQUAL
                 XT_DEQUAL:
003de3 3800          .dw DO_COLON
                 PFA_DEQUAL:
003de4 3c15          .dw XT_DMINUS
003de5 3a16          .dw XT_OR
003de6 3914          .dw XT_ZEROEQUAL
003de7 381a          .dw XT_EXIT
                 .include "words/u-dot.asm"
                 
                 ; Numeric IO
                 ; unsigned PNO with single cell numbers
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UDOT:
003de8 ff02          .dw $ff02
003de9 2e75          .db "u."
003dea 3de0          .dw VE_HEAD
                     .set VE_HEAD = VE_UDOT
                 XT_UDOT:
003deb 3800          .dw DO_COLON
                 PFA_UDOT:
                 .endif
003dec 394e          .dw XT_ZERO
003ded 032a          .dw XT_UDDOT
003dee 381a          .dw XT_EXIT
                 ; : u.        ( us -- )    0 ud. ;
                 .include "words/u-dot-r.asm"
                 
                 ; Numeric IO
                 ; unsigned PNO with single cells numbers, right aligned in width w
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_UDOTR:
003def ff03          .dw $ff03
003df0 2e75
003df1 0072          .db "u.r",0
003df2 3de8          .dw VE_HEAD
                     .set VE_HEAD = VE_UDOTR
                 XT_UDOTR:
003df3 3800          .dw DO_COLON
                 PFA_UDOTR:
                 .endif
003df4 394e          .dw XT_ZERO
003df5 38be          .dw XT_SWAP
003df6 0333          .dw XT_UDDOTR
003df7 381a          .dw XT_EXIT
                 ; : u.r       ( s n -- )   0 swap ud.r ;
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/uslashmod.asm"
                 
                 ; Arithmetics
                 ; unsigned division with remainder
                 VE_USLASHMOD:
003df8 ff05          .dw $ff05
003df9 2f75
003dfa 6f6d
003dfb 0064          .db "u/mod",0
003dfc 3def          .dw VE_HEAD
                     .set VE_HEAD = VE_USLASHMOD
                 XT_USLASHMOD:
003dfd 3800          .dw DO_COLON
                 PFA_USLASHMOD:
003dfe 38f9          .dw XT_TO_R
003dff 394e          .dw XT_ZERO
003e00 38f0          .dw XT_R_FROM
003e01 39bc          .dw XT_UMSLASHMOD
003e02 381a          .dw XT_EXIT
                 .include "words/negate.asm"
                 
                 ; Logic
                 ; 2-complement
                 VE_NEGATE:
003e03 ff06          .dw $ff06
003e04 656e
003e05 6167
003e06 6574          .db "negate"
003e07 3df8          .dw VE_HEAD
                     .set VE_HEAD = VE_NEGATE
                 XT_NEGATE:
003e08 3800          .dw DO_COLON
                 PFA_NEGATE:
003e09 39f7          .dw XT_INVERT
003e0a 3a29          .dw XT_1PLUS
003e0b 381a          .dw XT_EXIT
                 .include "words/slash.asm"
                 
                 ; Arithmetics
                 ; divide n1 by n2. giving the quotient
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_SLASH:
003e0c ff01          .dw $ff01
003e0d 002f          .db "/",0
003e0e 3e03          .dw VE_HEAD
                     .set VE_HEAD = VE_SLASH
                 XT_SLASH:
003e0f 3800          .dw DO_COLON
                 PFA_SLASH:
                 .endif
003e10 3c38          .dw XT_SLASHMOD
003e11 38ea          .dw XT_NIP
003e12 381a          .dw XT_EXIT
                 
                 .include "words/mod.asm"
                 
                 ; Arithmetics
                 ; divide n1 by n2 giving the remainder n3
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_MOD:
003e13 ff03          .dw $ff03
003e14 6f6d
003e15 0064          .db "mod",0
003e16 3e0c          .dw VE_HEAD
                     .set VE_HEAD = VE_MOD
                 XT_MOD:
003e17 3800          .dw DO_COLON
                 PFA_MOD:
                 .endif
003e18 3c38          .dw XT_SLASHMOD
003e19 38d3          .dw XT_DROP
003e1a 381a          .dw XT_EXIT
                 
                 .include "words/min.asm"
                 
                 ; Compare
                 ; compare two values leave the smaller one
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_MIN:
003e1b ff03          .dw $ff03
003e1c 696d
003e1d 006e          .db "min",0
003e1e 3e13          .dw VE_HEAD
                     .set VE_HEAD = VE_MIN
                 XT_MIN:
003e1f 3800          .dw DO_COLON
                 PFA_MIN:
                 .endif
003e20 3eaa          .dw XT_2DUP
003e21 3972          .dw XT_GREATER
003e22 3830          .dw XT_DOCONDBRANCH
003e23 3e25          DEST(PFA_MIN1)
003e24 38be          .dw XT_SWAP
                 PFA_MIN1:
003e25 38d3          .dw XT_DROP
003e26 381a          .dw XT_EXIT
                 .include "words/max.asm"
                 
                 ; Compare
                 ; compare two values, leave the bigger one
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_MAX:
003e27 ff03          .dw $ff03
003e28 616d
003e29 0078          .db "max",0
003e2a 3e1b          .dw VE_HEAD
                     .set VE_HEAD = VE_MAX
                 XT_MAX:
003e2b 3800          .dw DO_COLON
                 PFA_MAX:
                 
                 .endif
003e2c 3eaa          .dw XT_2DUP
003e2d 3968          .dw XT_LESS
003e2e 3830          .dw XT_DOCONDBRANCH
003e2f 3e31          DEST(PFA_MAX1)
003e30 38be          .dw XT_SWAP
                 PFA_MAX1:
003e31 38d3          .dw XT_DROP
003e32 381a          .dw XT_EXIT
                 .include "words/within.asm"
                 
                 ; Compare
                 ; check if n is within min..max
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_WITHIN:
003e33 ff06          .dw $ff06
003e34 6977
003e35 6874
003e36 6e69          .db "within"
003e37 3e27          .dw VE_HEAD
                     .set VE_HEAD = VE_WITHIN
                 XT_WITHIN:
003e38 3800          .dw DO_COLON
                 PFA_WITHIN:
                 .endif
003e39 38c9          .dw XT_OVER
003e3a 398d          .dw XT_MINUS
003e3b 38f9          .dw XT_TO_R
003e3c 398d          .dw XT_MINUS
003e3d 38f0          .dw XT_R_FROM
003e3e 3956          .dw XT_ULESS
003e3f 381a          .dw XT_EXIT
                 
                 .include "words/show-wordlist.asm"
                 
                 ; Tools
                 ; prints the name of the words in a wordlist
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SHOWWORDLIST:
003e40 ff0d          .dw $ff0d
003e41 6873
003e42 776f
003e43 772d
003e44 726f
003e45 6c64
003e46 7369
003e47 0074          .db "show-wordlist",0
003e48 3e33          .dw VE_HEAD
                     .set VE_HEAD = VE_SHOWWORDLIST
                 XT_SHOWWORDLIST:
003e49 3800          .dw DO_COLON
                 PFA_SHOWWORDLIST:
                 .endif
003e4a 3837          .dw XT_DOLITERAL
003e4b 3e4f          .dw XT_SHOWWORD
003e4c 38be          .dw XT_SWAP
003e4d 0675          .dw XT_TRAVERSEWORDLIST
003e4e 381a          .dw XT_EXIT
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_SHOWWORD:
003e4f 3800          .dw DO_COLON
                 PFA_SHOWWORD:
                 .endif
003e50 0690          .dw XT_NAME2STRING
003e51 03a0          .dw XT_ITYPE
003e52 3f96          .dw XT_SPACE         ; ( -- addr n)
003e53 3945          .dw XT_TRUE
003e54 381a          .dw XT_EXIT
                 .include "words/words.asm"
                 
                 ; Tools
                 ; prints a list of all (visible) words in the dictionary
                 VE_WORDS:
003e55 ff05          .dw $ff05
003e56 6f77
003e57 6472
003e58 0073          .db "words",0
003e59 3e40          .dw VE_HEAD
                     .set VE_HEAD = VE_WORDS
                 XT_WORDS:
003e5a 3800          .dw DO_COLON
                 PFA_WORDS:
003e5b 3837          .dw XT_DOLITERAL
003e5c 004a          .dw CFG_ORDERLIST
003e5d 3b4d          .dw XT_FETCHE
003e5e 3e49          .dw XT_SHOWWORDLIST
003e5f 381a          .dw XT_EXIT
                 
                 .include "words/dot-quote.asm"
                 
                 ; Compiler
                 ; compiles string into dictionary to be printed at runtime
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_DOTSTRING:
003e60 0002          .dw $0002
003e61 222e          .db ".",$22
003e62 3e55          .dw VE_HEAD
                     .set VE_HEAD = VE_DOTSTRING
                 XT_DOTSTRING:
003e63 3800          .dw DO_COLON
                 PFA_DOTSTRING:
                 .endif
003e64 3e6b          .dw XT_SQUOTE
003e65 06ed          .dw XT_COMPILE
003e66 03a0          .dw XT_ITYPE
003e67 381a          .dw XT_EXIT
                 .include "words/squote.asm"
                 
                 ; Compiler
                 ; compiles a string to flash, at runtime leaves ( -- flash-addr count) on stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SQUOTE:
003e68 0002        .dw $0002
003e69 2273        .db "s",$22
003e6a 3e60        .dw VE_HEAD
                   .set VE_HEAD = VE_SQUOTE
                 XT_SQUOTE:
003e6b 3800          .dw DO_COLON
                 PFA_SQUOTE:
                 .endif
003e6c 3837          .dw XT_DOLITERAL
003e6d 0022          .dw 34   ; 0x22 
003e6e 0521          .dw XT_PARSE       ; ( -- addr n)
003e6f 3e98          .dw XT_STATE
003e70 3873          .dw XT_FETCH
003e71 3830          .dw XT_DOCONDBRANCH
003e72 3e74          DEST(PFA_SQUOTE1)
003e73 071f            .dw XT_SLITERAL
                 PFA_SQUOTE1:
003e74 381a          .dw XT_EXIT
                 .include "words/fill.asm"
                 
                 ; Memory
                 ; fill u bytes memory beginning at a-addr with character c
                 VE_FILL:
003e75 ff04          .dw $ff04
003e76 6966
003e77 6c6c          .db "fill"
003e78 3e68          .dw VE_HEAD
                     .set VE_HEAD = VE_FILL
                 XT_FILL:
003e79 3800          .dw DO_COLON
                 PFA_FILL:
003e7a 38db          .dw XT_ROT
003e7b 38db          .dw XT_ROT
003e7c 38b3
003e7d 3830          .dw XT_QDUP,XT_DOCONDBRANCH
003e7e 3e86          DEST(PFA_FILL2)
003e7f 3f81          .dw XT_BOUNDS
003e80 3a89          .dw XT_DODO
                 PFA_FILL1:
003e81 38ab          .dw XT_DUP
003e82 3a9a          .dw XT_I
003e83 3887          .dw XT_CSTORE  ; ( -- c c-addr)
003e84 3ab7          .dw XT_DOLOOP
003e85 3e81          .dw PFA_FILL1
                 PFA_FILL2:
003e86 38d3          .dw XT_DROP
003e87 381a          .dw XT_EXIT
                 
                 .include "words/f_cpu.asm"
                 
                 ; System
                 ; put the cpu frequency in Hz on stack
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_F_CPU:
003e88 ff05          .dw $ff05
003e89 5f66
003e8a 7063
003e8b 0075          .db "f_cpu",0
003e8c 3e75          .dw VE_HEAD
                     .set VE_HEAD = VE_F_CPU
                 XT_F_CPU:
003e8d 3800          .dw DO_COLON
                 PFA_F_CPU:
                 .endif
003e8e 3837          .dw XT_DOLITERAL
003e8f 2400          .dw (F_CPU % 65536)
003e90 3837          .dw XT_DOLITERAL
003e91 00f4          .dw (F_CPU / 65536)
003e92 381a          .dw XT_EXIT
                 .include "words/state.asm"
                 
                 ; System Variable
                 ; system state
                 VE_STATE:
003e93 ff05          .dw $ff05
003e94 7473
003e95 7461
003e96 0065          .db "state",0
003e97 3e88          .dw VE_HEAD
                     .set VE_HEAD = VE_STATE
                 XT_STATE:
003e98 3842          .dw PFA_DOVARIABLE
                 PFA_STATE:
003e99 01a3          .dw ram_state
                 
                 .dseg
0001a3           ram_state: .byte 2
                 .include "words/base.asm"
                 
                 ; Numeric IO
                 ; location of the cell containing the number conversion radix
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BASE:
003e9a ff04          .dw $ff04
003e9b 6162
003e9c 6573          .db "base"
003e9d 3e93          .dw VE_HEAD
                     .set VE_HEAD = VE_BASE
                 XT_BASE:
003e9e 3852          .dw PFA_DOUSER
                 PFA_BASE:
                 .endif
003e9f 000c          .dw USER_BASE
                 
                 .include "words/cells.asm"
                 
                 ; Arithmetics
                 ; n2 is the size in address units of n1 cells
                 VE_CELLS:
003ea0 ff05          .dw $ff05
003ea1 6563
003ea2 6c6c
003ea3 0073          .db "cells",0
003ea4 3e9a          .dw VE_HEAD
                     .set VE_HEAD = VE_CELLS
                 XT_CELLS:
003ea5 3a06          .dw PFA_2STAR
                 
                 .include "words/2dup.asm"
                 
                 ; Stack
                 ; Duplicate the 2 top elements
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_2DUP:
003ea6 ff04          .dw $ff04
003ea7 6432
003ea8 7075          .db "2dup"
003ea9 3ea0          .dw VE_HEAD
                     .set VE_HEAD = VE_2DUP
                 XT_2DUP:
003eaa 3800          .dw DO_COLON
                 PFA_2DUP:
                 .endif
                 
003eab 38c9          .dw XT_OVER
003eac 38c9          .dw XT_OVER
003ead 381a          .dw XT_EXIT
                 .include "words/2drop.asm"
                 
                 ; Stack
                 ; Remove the 2 top elements
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_2DROP:
003eae ff05          .dw $ff05
003eaf 6432
003eb0 6f72
003eb1 0070          .db "2drop",0
003eb2 3ea6          .dw VE_HEAD
                     .set VE_HEAD = VE_2DROP
                 XT_2DROP:
003eb3 3800          .dw DO_COLON
                 PFA_2DROP:
                 .endif
003eb4 38d3          .dw XT_DROP
003eb5 38d3          .dw XT_DROP
003eb6 381a          .dw XT_EXIT
                 .include "words/tuck.asm"
                 
                 ; Stack
                 ; Copy the first (top) stack item below the second stack item. 
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TUCK:
003eb7 ff04          .dw $ff04
003eb8 7574
003eb9 6b63          .db "tuck"
003eba 3eae          .dw VE_HEAD
                     .set VE_HEAD = VE_TUCK
                 XT_TUCK:
003ebb 3800          .dw DO_COLON
                 PFA_TUCK:
                 .endif
003ebc 38be          .dw XT_SWAP
003ebd 38c9          .dw XT_OVER
003ebe 381a          .dw XT_EXIT
                 
                 .include "words/to-in.asm"
                 
                 ; System Variable
                 ; pointer to current read position in input buffer
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TO_IN:
003ebf ff03          .dw $ff03
003ec0 693e
003ec1 006e          .db ">in",0
003ec2 3eb7          .dw VE_HEAD
                     .set VE_HEAD = VE_TO_IN
                 XT_TO_IN:
003ec3 3852          .dw PFA_DOUSER
                 PFA_TO_IN:
                 .endif
003ec4 0018          .dw USER_TO_IN
                 .include "words/sharptib.asm"
                 
                 ; System Variable
                 ; variable holding the number of characters in TIB
                 VE_NUMBERTIB:
003ec5 ff04          .dw $ff04
003ec6 7423
003ec7 6269          .db "#tib"
003ec8 3ebf          .dw VE_HEAD
                     .set VE_HEAD  = VE_NUMBERTIB
                 XT_NUMBERTIB:
003ec9 3842          .dw PFA_DOVARIABLE
                 PFA_NUMBERTIB:
003eca 01a5          .dw ram_sharptib
                 
                 .dseg
0001a5           ram_sharptib: .byte 2
                 .cseg
                  
                 .include "words/pad.asm"
                 
                 ; System Variable
                 ; Address of the temporary scratch buffer.
                 VE_PAD:
003ecb ff03          .dw $ff03
003ecc 6170
003ecd 0064          .db "pad",0
003ece 3ec5          .dw VE_HEAD
                     .set VE_HEAD = VE_PAD
                 XT_PAD:
003ecf 3800          .dw DO_COLON
                 PFA_PAD:
003ed0 3f0a          .dw XT_HERE
003ed1 3837          .dw XT_DOLITERAL
003ed2 0064          .dw 100
003ed3 3997          .dw XT_PLUS
003ed4 381a          .dw XT_EXIT
                 .include "words/emit.asm"
                 
                 ; Character IO
                 ; fetch the emit vector and execute it. should emit a character from TOS
                 VE_EMIT:
003ed5 ff04          .dw $ff04
003ed6 6d65
003ed7 7469          .db "emit"
003ed8 3ecb          .dw VE_HEAD
                     .set VE_HEAD = VE_EMIT
                 XT_EMIT:
003ed9 3dd8          .dw PFA_DODEFER1
                 PFA_EMIT:
003eda 000e          .dw USER_EMIT
003edb 3da2          .dw XT_UDEFERFETCH
003edc 3dae          .dw XT_UDEFERSTORE
                 .include "words/emitq.asm"
                 
                 ; Character IO
                 ; fetch emit? vector and execute it. should return the ready-to-send condition
                 VE_EMITQ:
003edd ff05          .dw $ff05
003ede 6d65
003edf 7469
003ee0 003f          .db "emit?",0
003ee1 3ed5          .dw VE_HEAD
                     .set VE_HEAD = VE_EMITQ
                 XT_EMITQ:
003ee2 3dd8          .dw PFA_DODEFER1
                 PFA_EMITQ:
003ee3 0010          .dw USER_EMITQ
003ee4 3da2          .dw XT_UDEFERFETCH
003ee5 3dae          .dw XT_UDEFERSTORE
                 .include "words/key.asm"
                 
                 ; Character IO
                 ; fetch key vector and execute it, should leave a single character on TOS
                 VE_KEY:
003ee6 ff03          .dw $ff03
003ee7 656b
003ee8 0079          .db "key",0
003ee9 3edd          .dw VE_HEAD
                     .set VE_HEAD = VE_KEY
                 XT_KEY:
003eea 3dd8          .dw PFA_DODEFER1
                 PFA_KEY:
003eeb 0012          .dw USER_KEY
003eec 3da2          .dw XT_UDEFERFETCH
003eed 3dae          .dw XT_UDEFERSTORE
                 .include "words/keyq.asm"
                 
                 ; Character IO
                 ; fetch key? vector and execute it. should turn on key sender, if it is disabled/stopped
                 VE_KEYQ:
003eee ff04          .dw $ff04
003eef 656b
003ef0 3f79          .db "key?"
003ef1 3ee6          .dw VE_HEAD
                     .set VE_HEAD = VE_KEYQ
                 XT_KEYQ:
003ef2 3dd8          .dw PFA_DODEFER1
                 PFA_KEYQ:
003ef3 0014          .dw USER_KEYQ
003ef4 3da2          .dw XT_UDEFERFETCH
003ef5 3dae          .dw XT_UDEFERSTORE
                 
                 .include "words/dp.asm"
                 
                 ; System Value
                 ; address of the next free dictionary cell
                 VE_DP:
003ef6 ff02          .dw $ff02
003ef7 7064          .db "dp"
003ef8 3eee          .dw VE_HEAD
                     .set VE_HEAD = VE_DP
                 XT_DP:
003ef9 3869          .dw PFA_DOVALUE1
                 PFA_DP:
003efa 0036          .dw EE_DP
003efb 3d7a          .dw XT_EDEFERFETCH
003efc 3d84          .dw XT_EDEFERSTORE
                 .include "words/ehere.asm"
                 
                 ; System Value
                 ; address of the next free address in eeprom
                 VE_EHERE:
003efd ff05          .dw $ff05
003efe 6865
003eff 7265
003f00 0065          .db "ehere",0
003f01 3ef6          .dw VE_HEAD
                     .set VE_HEAD = VE_EHERE
                 XT_EHERE:
003f02 3869          .dw PFA_DOVALUE1
                 PFA_EHERE:
003f03 003a          .dw EE_EHERE
003f04 3d7a          .dw XT_EDEFERFETCH
003f05 3d84          .dw XT_EDEFERSTORE
                 .include "words/here.asm"
                 
                 ; System Value
                 ; address of the next free data space (RAM) cell
                 VE_HERE:
003f06 ff04          .dw $ff04
003f07 6568
003f08 6572          .db "here"
003f09 3efd          .dw VE_HEAD
                     .set VE_HEAD = VE_HERE
                 XT_HERE:
003f0a 3869          .dw PFA_DOVALUE1
                 PFA_HERE:
003f0b 0038          .dw EE_HERE
003f0c 3d7a          .dw XT_EDEFERFETCH
003f0d 3d84          .dw XT_EDEFERSTORE
                 .include "words/allot.asm"
                 
                 ; System
                 ; allocate or release memory in RAM
                 VE_ALLOT:
003f0e ff05          .dw $ff05
003f0f 6c61
003f10 6f6c
003f11 0074          .db "allot",0
003f12 3f06          .dw VE_HEAD
                     .set VE_HEAD = VE_ALLOT
                 XT_ALLOT:
003f13 3800          .dw DO_COLON
                 PFA_ALLOT:
003f14 3f0a          .dw XT_HERE
003f15 3997          .dw XT_PLUS
003f16 0158          .dw XT_DOTO
003f17 3f0b          .dw PFA_HERE
003f18 381a          .dw XT_EXIT
                 
                 .include "words/bin.asm"
                 
                 ; Numeric IO
                 ; set base for numeric conversion to 10
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BIN:
003f19 ff03          .dw $ff03
003f1a 6962
003f1b 006e          .db "bin",0
003f1c 3f0e          .dw VE_HEAD
                     .set VE_HEAD = VE_BIN
                 XT_BIN:
003f1d 3800          .dw DO_COLON
                 PFA_BIN:
                 .endif
003f1e 3837          .dw XT_DOLITERAL
003f1f 0002          .dw 2
003f20 3e9e          .dw XT_BASE
003f21 387b          .dw XT_STORE
003f22 381a          .dw XT_EXIT
                 .include "words/decimal.asm"
                 
                 ; Numeric IO
                 ; set base for numeric conversion to 10
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DECIMAL:
003f23 ff07          .dw $ff07
003f24 6564
003f25 6963
003f26 616d
003f27 006c          .db "decimal",0
003f28 3f19          .dw VE_HEAD
                     .set VE_HEAD = VE_DECIMAL
                 XT_DECIMAL:
003f29 3800          .dw DO_COLON
                 PFA_DECIMAL:
                 .endif
003f2a 3837          .dw XT_DOLITERAL
003f2b 000a          .dw 10
003f2c 3e9e          .dw XT_BASE
003f2d 387b          .dw XT_STORE
003f2e 381a          .dw XT_EXIT
                 .include "words/hex.asm"
                 
                 ; Numeric IO
                 ; set base for numeric conversion to 10
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_HEX:
003f2f ff03          .dw $ff03
003f30 6568
003f31 0078          .db "hex",0
003f32 3f23          .dw VE_HEAD
                     .set VE_HEAD = VE_HEX
                 XT_HEX:
003f33 3800          .dw DO_COLON
                 PFA_HEX:
                 .endif
003f34 3837          .dw XT_DOLITERAL
003f35 0010          .dw 16
003f36 3e9e          .dw XT_BASE
003f37 387b          .dw XT_STORE
003f38 381a          .dw XT_EXIT
                 .include "words/bl.asm"
                 
                 ; Character IO
                 ; put ascii code of the blank to the stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BL:
003f39 ff02          .dw $ff02
003f3a 6c62          .db "bl"
003f3b 3f2f          .dw VE_HEAD
                     .set VE_HEAD = VE_BL
                 XT_BL:
003f3c 3842          .dw PFA_DOVARIABLE
                 PFA_BL:
                 .endif
003f3d 0020          .dw 32
                 
                 .include "words/turnkey.asm"
                 
                 ; System Value
                 ; Deferred action during startup/reset
                 VE_TURNKEY:
003f3e ff07          .dw $ff07
003f3f 7574
003f40 6e72
003f41 656b
003f42 0079          .db "turnkey",0
003f43 3f39          .dw VE_HEAD
                     .set VE_HEAD = VE_TURNKEY
                 XT_TURNKEY:
003f44 3dd8          .dw PFA_DODEFER1
                 PFA_TURNKEY:
003f45 003c          .dw EE_TURNKEY
003f46 3d7a          .dw XT_EDEFERFETCH
003f47 3d84          .dw XT_EDEFERSTORE
                 .include "words/to-upper.asm"
                 
                 ; String
                 ; if c is a lowercase letter convert it to uppercase
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TOUPPER:
003f48 ff07          .dw $ff07 
003f49 6f74
003f4a 7075
003f4b 6570
003f4c 0072          .db "toupper",0
003f4d 3f3e          .dw VE_HEAD
                     .set VE_HEAD = VE_TOUPPER
                 XT_TOUPPER:
003f4e 3800          .dw DO_COLON 
                 PFA_TOUPPER:
                 .endif
003f4f 38ab          .dw XT_DUP 
003f50 3837          .dw XT_DOLITERAL 
003f51 0061          .dw 'a' 
003f52 3837          .dw XT_DOLITERAL 
003f53 007b          .dw 'z'+1
003f54 3e38          .dw XT_WITHIN 
003f55 3830          .dw XT_DOCONDBRANCH
003f56 3f5a          DEST(PFA_TOUPPER0)
003f57 3837          .dw XT_DOLITERAL
003f58 00df          .dw 223 ; inverse of 0x20: 0xdf
003f59 3a0d          .dw XT_AND 
                 PFA_TOUPPER0:
003f5a 381a          .dw XT_EXIT 
                 .include "words/to-lower.asm"
                 
                 ; String
                 ; if C is an uppercase letter convert it to lowercase
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_TOLOWER:
003f5b ff07          .dw $ff07
003f5c 6f74
003f5d 6f6c
003f5e 6577
003f5f 0072          .db "tolower",0
003f60 3f48          .dw VE_HEAD
                     .set VE_HEAD = VE_TOLOWER
                 XT_TOLOWER:
003f61 3800          .dw DO_COLON
                 PFA_TOLOWER:
                 .endif
003f62 38ab          .dw XT_DUP
003f63 3837          .dw XT_DOLITERAL
003f64 0041          .dw 'A'
003f65 3837          .dw XT_DOLITERAL
003f66 005b          .dw 'Z'+1
003f67 3e38          .dw XT_WITHIN
003f68 3830          .dw XT_DOCONDBRANCH
003f69 3f6d          DEST(PFA_TOLOWER0)
003f6a 3837          .dw XT_DOLITERAL
003f6b 0020          .dw 32
003f6c 3a16          .dw XT_OR 
                 PFA_TOLOWER0:
003f6d 381a          .dw XT_EXIT 
                 
                 .include "words/q-stack.asm"
                 
                 ; Tools
                 ; check data stack depth and exit to quit if underrun
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_QSTACK:
003f6e ff06          .dw $ff06
003f6f 733f
003f70 6174
003f71 6b63          .db "?stack"
003f72 3f5b          .dw VE_HEAD
                     .set VE_HEAD = VE_QSTACK
                 XT_QSTACK:
003f73 3800          .dw DO_COLON
                 PFA_QSTACK:
                 .endif
003f74 0581          .dw XT_DEPTH
003f75 391b          .dw XT_ZEROLESS
003f76 3830          .dw XT_DOCONDBRANCH
003f77 3f7b          DEST(PFA_QSTACK1)
003f78 3837            .dw XT_DOLITERAL
003f79 fffc            .dw -4
003f7a 3d60            .dw XT_THROW
                 PFA_QSTACK1:
003f7b 381a          .dw XT_EXIT
                 .include "words/bounds.asm"
                 
                 ; Tools
                 ; convert a string to an address range
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BOUNDS:
003f7c ff06          .dw $ff06
003f7d 6f62
003f7e 6e75
003f7f 7364          .db "bounds"
003f80 3f6e          .dw VE_HEAD
                     .set VE_HEAD = VE_BOUNDS
                 XT_BOUNDS:
003f81 3800          .dw DO_COLON
                 PFA_BOUNDS:
                 .endif
003f82 38c9          .dw XT_OVER
003f83 3997          .dw XT_PLUS
003f84 38be          .dw XT_SWAP
003f85 381a          .dw XT_EXIT
                 .include "words/cr.asm"
                 
                 ; Character IO
                 ; cause subsequent output appear at the beginning of the next line
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_CR:
003f86 ff02          .dw 0xff02
003f87 7263          .db "cr"
003f88 3f7c          .dw VE_HEAD
                     .set VE_HEAD = VE_CR
                 XT_CR:
003f89 3800          .dw DO_COLON
                 PFA_CR:
                 .endif
                 
003f8a 3837          .dw XT_DOLITERAL
003f8b 000d          .dw 13
003f8c 3ed9          .dw XT_EMIT
003f8d 3837          .dw XT_DOLITERAL
003f8e 000a          .dw 10
003f8f 3ed9          .dw XT_EMIT
003f90 381a          .dw XT_EXIT
                 .include "words/space.asm"
                 
                 ; Character IO
                 ; emits a space (bl)
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SPACE:
003f91 ff05          .dw $ff05
003f92 7073
003f93 6361
003f94 0065          .db "space",0
003f95 3f86          .dw VE_HEAD
                     .set VE_HEAD = VE_SPACE
                 XT_SPACE:
003f96 3800          .dw DO_COLON
                 PFA_SPACE:
                 .endif
003f97 3f3c          .dw XT_BL
003f98 3ed9          .dw XT_EMIT
003f99 381a          .dw XT_EXIT
                 .include "words/spaces.asm"
                 
                 ; Character IO
                 ; emits n space(s) (bl)
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SPACES:
003f9a ff06          .dw $ff06
003f9b 7073
003f9c 6361
003f9d 7365          .db "spaces"
003f9e 3f91          .dw VE_HEAD
                     .set VE_HEAD = VE_SPACES
                 XT_SPACES:
003f9f 3800          .dw DO_COLON
                 PFA_SPACES:
                 
                 .endif
                 ;C SPACES   n --            output n spaces
                 ;   BEGIN DUP 0> WHILE SPACE 1- REPEAT DROP ;
003fa0 394e
003fa1 3e2b      	.DW XT_ZERO, XT_MAX
003fa2 38ab
003fa3 3830      SPCS1:  .DW XT_DUP,XT_DOCONDBRANCH
003fa4 3fa9              DEST(SPCS2)
003fa5 3f96
003fa6 3a2f
003fa7 3829              .DW XT_SPACE,XT_1MINUS,XT_DOBRANCH
003fa8 3fa2              DEST(SPCS1)
003fa9 38d3
003faa 381a      SPCS2:  .DW XT_DROP,XT_EXIT
                 .include "words/s-to-d.asm"
                 
                 ; Conversion
                 ; extend (signed) single cell value to double cell
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_S2D:
003fab ff03          .dw $ff03
003fac 3e73
003fad 0064          .db "s>d",0
003fae 3f9a          .dw VE_HEAD
                     .set VE_HEAD = VE_S2D
                 XT_S2D:
003faf 3800          .dw DO_COLON
                 PFA_S2D:
                 .endif
003fb0 38ab          .dw XT_DUP
003fb1 391b          .dw XT_ZEROLESS
003fb2 381a          .dw XT_EXIT
                 .elif AMFORTH_NRWW_SIZE>2000
                 .else
                 .endif
                 ; now colon words
                 ;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/2literal.asm"
                 
                 ; Compiler
                 ; compile a cell pair literal in colon definitions
                 VE_2LITERAL:
003fb3 0008          .dw $0008
003fb4 6c32
003fb5 7469
003fb6 7265
003fb7 6c61          .db "2literal"
003fb8 3fab          .dw VE_HEAD
                     .set VE_HEAD = VE_2LITERAL
                 XT_2LITERAL:
003fb9 3800          .dw DO_COLON
                 PFA_2LITERAL:
003fba 38be          .dw XT_SWAP
003fbb 06ed          .dw XT_COMPILE
003fbc 3837          .dw XT_DOLITERAL
003fbd 06f8          .dw XT_COMMA
003fbe 06ed          .dw XT_COMPILE
003fbf 3837          .dw XT_DOLITERAL
003fc0 06f8          .dw XT_COMMA
                     
003fc1 381a          .dw XT_EXIT
                 .include "words/equal.asm"
                 
                 ; Compare
                 ; compares two values for equality
                 VE_EQUAL:
003fc2 ff01          .dw $ff01
003fc3 003d          .db "=",0
003fc4 3fb3          .dw VE_HEAD
                     .set VE_HEAD = VE_EQUAL
                 XT_EQUAL:
003fc5 3800          .dw DO_COLON
                 PFA_EQUAL:
003fc6 398d          .dw XT_MINUS
003fc7 3914          .dw XT_ZEROEQUAL
003fc8 381a          .dw XT_EXIT
                 .include "words/num-constants.asm"
                 
                 .endif
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ONE:
003fc9 ff01          .dw $ff01
003fca 0031          .db "1",0
003fcb 3fc2          .dw VE_HEAD
                     .set VE_HEAD = VE_ONE
                 XT_ONE:
003fcc 3842          .dw PFA_DOVARIABLE
                 PFA_ONE:
                 .endif
003fcd 0001              .DW 1
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TWO:
003fce ff01          .dw $ff01
003fcf 0032          .db "2",0
003fd0 3fc9          .dw VE_HEAD
                     .set VE_HEAD = VE_TWO
                 XT_TWO:
003fd1 3842          .dw PFA_DOVARIABLE
                 PFA_TWO:
                 .endif
003fd2 0002              .DW 2
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_MINUSONE:
003fd3 ff02          .dw $ff02
003fd4 312d          .db "-1"
003fd5 3fce          .dw VE_HEAD
                     .set VE_HEAD = VE_MINUSONE
                 XT_MINUSONE:
003fd6 3842          .dw PFA_DOVARIABLE
                 PFA_MINUSONE:
                 .endif
003fd7 ffff              .DW -1
                 .include "dict_appl_core.inc"
                 
                 ; do not delete it!
                 
                 .set flashlast = pc
                 .if (pc>FLASHEND)
                 .endif
                 
                 .dseg
                 ; define a label for the 1st free ram address
                 HERESTART:
                 .eseg
                 .include "amforth-eeprom.inc"
000034 ff ff     
                 EE_DP:
000036 61 0a         .dw DPSTART      ; Dictionary Pointer
                 EE_HERE:
000038 a7 01         .dw HERESTART    ; Memory Allocation
                 EE_EHERE:
00003a 88 00         .dw EHERESTART     ; EEProm Memory Allocation
                 EE_TURNKEY:
00003c 53 0a         .dw XT_APPLTURNKEY  ; TURNKEY
                 EE_STOREI:
00003e 6c 3b         .dw XT_DO_STOREI  ; Store a cell into flash
                 
                 EE_ENVIRONMENT:
000040 9c 02         .dw VE_ENVHEAD   ; environmental queries
                 EE_WL_FORTH:
000042 46 00         .dw EE_FORTHWORDLIST; forth-wordlist
                 EE_CURRENT:
000044 46 00         .dw EE_FORTHWORDLIST
                 EE_FORTHWORDLIST:
000046 d3 3f         .dw VE_HEAD      ; pre-defined (compiled in) wordlist
                 CFG_ORDERLISTLEN:
000048 01 00         .dw 1
                 CFG_ORDERLIST: ; list of wordlist id, exactly numwordlist entries
00004a 46 00         .dw EE_FORTHWORDLIST      ; get/set-order
00004c               .byte  (NUMWORDLISTS-1)*CELLSIZE ; one slot is already used
                 CFG_RECOGNIZERLISTLEN:
00005a 02 00         .dw 2
                 CFG_RECOGNIZERLIST:
00005c 04 06         .dw XT_REC_WORD
00005e ef 05         .dw XT_REC_NUM
000060               .byte  (NUMRECOGNIZERS-2)*CELLSIZE ; two slots are already used
                 
                 EE_WLSCOPE:
000064 6f 09         .dw XT_GET_CURRENT  ; default wordlist scope
                 
                 ; LEAVE stack is between data stack and return stack.
                 EE_LP0:
000066 b0 08         .dw stackstart+1
                 
                 ; MARKER saves everything up to here. Nothing beyond gets saved
                 EE_MARKER:
000068 68 00         .dw EE_MARKER
                 
                 ; default user area
                 EE_INITUSER:
00006a 00 00         .dw 0  ; USER_STATE
00006c 00 00         .dw 0  ; USER_FOLLOWER
00006e ff 08         .dw rstackstart  ; USER_RP
000070 af 08         .dw stackstart   ; USER_SP0
000072 af 08         .dw stackstart   ; USER_SP
                     
000074 00 00         .dw 0  ; USER_HANDLER
000076 0a 00         .dw 10 ; USER_BASE
                     
000078 90 00         .dw XT_TX  ; USER_EMIT
00007a 9e 00         .dw XT_TXQ ; USER_EMITQ
00007c 66 00         .dw XT_RX  ; USER_KEY
00007e 80 00         .dw XT_RXQ ; USER_KEYQ
000080 1f 02         .dw XT_SOURCETIB ; USER_SKEY
000082 00 00         .dw 0            ; USER_G_IN
000084 0c 02         .dw XT_REFILLTIB ; USER_REFILL  
                 
                 ; calculate baud rate error
                 .equ UBRR_VAL   = ((F_CPU+BAUD*8)/(BAUD*16)-1)  ; smart round
                 .equ BAUD_REAL  = (F_CPU/(16*(UBRR_VAL+1)))     ; effective baud rate
                 .equ BAUD_ERROR = ((BAUD_REAL*1000)/BAUD-1000)  ; error in pro mille
                 
                 .if ((BAUD_ERROR>BAUD_MAXERROR) || (BAUD_ERROR<-BAUD_MAXERROR))       
                 .endif
                 EE_UBRRVAL:
000086 19 00         .dw UBRR_VAL     ; BAUDRATE
                 ; 1st free address in EEPROM.
                 EHERESTART:
                 .cseg


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
r0 :  20 r1 :   5 r2 :   7 r3 :  11 r4 :   4 r5 :   1 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   1 r11:   1 r12:   0 r13:   0 r14:  22 r15:  20 
r16:  76 r17:  52 r18:  52 r19:  37 r20:  13 r21:  11 r22:  11 r23:   3 
r24: 185 r25: 132 r26:  39 r27:  21 r28:   7 r29:   4 r30:  74 r31:  36 
x  :   4 y  : 199 z  :  38 
Registers used: 29 out of 35 (82.9%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :  21 add   :  16 adiw  :  18 and   :   4 
andi  :   3 asr   :   2 bclr  :   0 bld   :   0 brbc  :   2 brbs  :   7 
brcc  :   2 brcs  :   1 break :   0 breq  :   6 brge  :   1 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   3 brmi  :   3 
brne  :  10 brpl  :   1 brsh  :   0 brtc  :   0 brts  :   1 brvc  :   0 
brvs  :   2 bset  :   0 bst   :   0 call  :   2 cbi   :   0 cbr   :   0 
clc   :   1 clh   :   0 cli   :   5 cln   :   0 clr   :  10 cls   :   0 
clt   :   1 clv   :   0 clz   :   0 com   :  16 cp    :  10 cpc   :  10 
cpi   :   0 cpse  :   0 dec   :  10 eor   :   3 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   1 in    :  15 inc   :   3 jmp   :   7 
ld    : 133 ldd   :   4 ldi   :  23 lds   :   2 lpm   :  16 lsl   :  14 
lsr   :   1 mov   :  11 movw  :  65 mul   :   5 muls  :   1 mulsu :   2 
neg   :   0 nop   :   0 or    :   9 ori   :   1 out   :  17 pop   :  48 
push  :  42 rcall :  38 ret   :   6 reti  :   2 rjmp  : 105 rol   :  23 
ror   :   5 sbc   :   9 sbci  :   3 sbi   :   3 sbic  :   3 sbis  :   0 
sbiw  :   7 sbr   :   0 sbrc  :   4 sbrs  :   3 sec   :   1 seh   :   0 
sei   :   1 sen   :   0 ser   :   3 ses   :   0 set   :   2 sev   :   0 
sez   :   0 sleep :   0 spm   :   2 st    :  70 std   :   8 sts   :   3 
sub   :   6 subi  :   3 swap  :   0 tst   :   1 wdr   :   0 
Instructions used: 74 out of 113 (65.5%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x007fb0   1832  11468  13300   32768  40.6%
[.dseg] 0x000100 0x0001a7      0    167    167    2048   8.2%
[.eseg] 0x000000 0x000088      0    136    136    1024  13.3%

Assembly complete, 0 errors, 5 warnings
